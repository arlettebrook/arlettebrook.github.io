<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Skill on Arlettebrook's blog</title><link>https://arlettebrook.github.io/en/categories/%E6%8A%80%E6%9C%AF/</link><description>Recent content in Skill on Arlettebrook's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Arlettebrook</copyright><lastBuildDate>Mon, 22 Apr 2024 22:18:17 +0800</lastBuildDate><atom:link href="https://arlettebrook.github.io/en/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Git常用命令</title><link>https://arlettebrook.github.io/en/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 22 Apr 2024 22:18:17 +0800</pubDate><guid>https://arlettebrook.github.io/en/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;blockquote>
&lt;p>注意：要学会使用-h &amp;ndash;help选项，查看命令，看不懂在查阅。&lt;code>git help &amp;lt;command&amp;gt;&lt;/code>可进入官方文档。&lt;strong>Git&lt;/strong>&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener"
>入门参考&lt;/a>。以下常用命令个人收集总结。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="git简单命令">
&lt;a href="#git%e7%ae%80%e5%8d%95%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git简单命令
&lt;/h2>&lt;h3 id="git-init">
&lt;a href="#git-init" class="header-anchor">#&lt;/a>
git init
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git init &amp;lt;directory&amp;gt;&lt;/code>在指定的⽬录下创建⼀个空的git repo。不带参数将在当前⽬录下创建⼀个git repo。&lt;/li>
&lt;/ul>
&lt;h3 id="git-clone">
&lt;a href="#git-clone" class="header-anchor">#&lt;/a>
git clone
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git clone &amp;lt;repo&amp;gt;&lt;/code>克隆⼀个指定repo到本地。指定的repo可以是本地⽂件系统或者由HTTP或SSH指定的远程路径。&lt;/li>
&lt;li>&lt;code>git clone -b &amp;lt;branch&amp;gt; &amp;lt;repo&amp;gt;&lt;/code>克隆指定仓库的分支&lt;/li>
&lt;li>&lt;code>git clone --recursive &amp;lt;repo&amp;gt;&lt;/code>递归地克隆，克隆带有子模块的仓库
&lt;ul>
&lt;li>&lt;code>git clone --recurse-submodules &amp;lt;repository_url&amp;gt;&lt;/code>同理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可组合使用&lt;/li>
&lt;/ul>
&lt;h3 id="git-add">
&lt;a href="#git-add" class="header-anchor">#&lt;/a>
git add
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git add &amp;lt;directory&amp;gt;&lt;/code>将指定⽬录的所有修改加⼊到下⼀次 commit中。把&lt;code>&amp;lt;directory&amp;gt;&lt;/code>替换成&lt;code>&amp;lt;file&amp;gt;&lt;/code>将添加指定⽂件的修改。&lt;/li>
&lt;li>&lt;code>git add *&lt;/code>、&lt;code>git add .&lt;/code>、&lt;code>git add -A&lt;/code>三条命令但是一样的，将所以修改提交到暂存区。&lt;/li>
&lt;/ul>
&lt;h3 id="git-commit">
&lt;a href="#git-commit" class="header-anchor">#&lt;/a>
git commit
&lt;/h3>&lt;ul>
&lt;li>这个命令通常带&lt;code>-m&lt;/code>选项&lt;code>git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot;&lt;/code>提交暂存区的修改，使⽤指定的 &lt;code>&amp;lt;message&amp;gt;&lt;/code>作为提交信息，⽽不是打开⽂本编辑器输⼊提交信息。&lt;/li>
&lt;li>&lt;code>git commit -m &amp;lt;message&amp;gt; --amend&lt;/code>将当前staged修改合并到最近⼀次的commit中。&lt;/li>
&lt;/ul>
&lt;h3 id="git-status">
&lt;a href="#git-status" class="header-anchor">#&lt;/a>
git status
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git status&lt;/code>显示哪些⽂件已被staged、以及未跟踪(untracked)。&lt;/li>
&lt;/ul>
&lt;h3 id="git-reflog">
&lt;a href="#git-reflog" class="header-anchor">#&lt;/a>
git reflog
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git reflog&lt;/code>显示本地repo的所有commit⽇志。&lt;/li>
&lt;li>与&lt;code>git log&lt;/code>的区别
&lt;ol>
&lt;li>&lt;code>log&lt;/code>项目的提交历史，&lt;code>reflog&lt;/code>本地仓库的&lt;strong>引用&lt;/strong>提交日志。&lt;/li>
&lt;li>引用会保留所以的提交历史，如何重置的历史。主要目的是提供一个安全网，以便在误操作（如错误的 &lt;code>git reset&lt;/code>）后可以恢复丢失的提交或分支。&lt;/li>
&lt;li>&lt;code>git log&lt;/code> 的输出是永久性的，而 &lt;code>reflog&lt;/code> 会在一段时间后自动过期（默认是 30 天），以节省空间。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-rm">
&lt;a href="#git-rm" class="header-anchor">#&lt;/a>
git rm
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git rm fileName&lt;/code>删除指定的文件。
&lt;ul>
&lt;li>与&lt;code>rm fileName&lt;/code>的区别。
&lt;ol>
&lt;li>&lt;code>git rm&lt;/code>不能删除未跟踪的文件，&lt;/li>
&lt;li>&lt;code>git rm&lt;/code>删除之后直接到暂存区，而&lt;code>rm&lt;/code>是到工作区&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意删除之后都需要提交操作。&lt;/li>
&lt;li>撤销操作不用记，git都会有提示&lt;/li>
&lt;/ul>
&lt;h3 id="git-switch">
&lt;a href="#git-switch" class="header-anchor">#&lt;/a>
git switch
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>该命令适用于特定git版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git switch &amp;lt;branch&amp;gt;&lt;/code>切换到指定分支，&lt;/p>
&lt;ul>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>同理，但这个都适用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git switch -c &amp;lt;branch&amp;gt;&lt;/code>创建并切换指定分支&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-branch">
&lt;a href="#git-branch" class="header-anchor">#&lt;/a>
git branch
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git branch&lt;/code>显示本地repo的所有分⽀。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-v&lt;/code>显示详细信息&lt;/li>
&lt;li>带&lt;code>*&lt;/code>的为当前分支&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -r&lt;/code>显示远程仓库的所以分支。&lt;/p>
&lt;ul>
&lt;li>可以使用&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>检出远程分支，可以省略&lt;code>origin/&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -a&lt;/code>显示本地和远程的所有分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -m &amp;lt;old_branch_name&amp;gt; &amp;lt;new_branch_name&amp;gt;&lt;/code>重命名分支&lt;/p>
&lt;ul>
&lt;li>新分支名已经存在， &lt;code>-M&lt;/code> 强制重命名。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch &amp;lt;name&amp;gt;&lt;/code>创建指定分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -D &amp;lt;branch&amp;gt;&lt;/code>强制删除指定分支，无论是否合并到当前分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -d &amp;lt;branch&amp;gt;&lt;/code>删除指定的分支，如果没有合并到当前分支，git会阻止操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-merge">
&lt;a href="#git-merge" class="header-anchor">#&lt;/a>
git merge
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git merge &amp;lt;branch&amp;gt;&lt;/code>合并指定分支。将指定&lt;code>&amp;lt;branch&amp;gt;&lt;/code>分⽀合并到当前分⽀。
&lt;ul>
&lt;li>是在当前分支合并指定分支。&lt;/li>
&lt;li>合并分支可能会出现冲突。要解决冲突之后才能合并。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git merge --abort&lt;/code>放弃本次合并&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="git一般命令">
&lt;a href="#git%e4%b8%80%e8%88%ac%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git一般命令
&lt;/h2>&lt;h3 id="git-revert">
&lt;a href="#git-revert" class="header-anchor">#&lt;/a>
git revert
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git revert &amp;lt;commit&amp;gt; &lt;/code>对指定&lt;code>&amp;lt;commit&amp;gt;&lt;/code>创建⼀个undo的commit，并应⽤到当前分⽀。就是撤销指定的提交并保留记录
&lt;ul>
&lt;li>效果：撤销指定的提交，回到了撤销提交的是上个版本，&lt;strong>保留了撤销历史&lt;/strong>。&lt;strong>会打开编辑器显示具体效果&lt;/strong>&lt;/li>
&lt;li>一般不用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-reset">
&lt;a href="#git-reset" class="header-anchor">#&lt;/a>
git reset
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git reset &amp;lt;commit&amp;gt;&lt;/code>&lt;strong>重置&lt;/strong>到指定的提交，不会保留commit历史。工作区和暂存区会变成未跟踪。&lt;code>--hard&lt;/code>选项完全重置到指定提交。未跟踪的重置不了。重置历史可以通过&lt;code>git reflog&lt;/code>查看，利用这个可以重置已经重置的版本库。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;commit&amp;gt;&lt;/code>可以是：
&lt;ul>
&lt;li>&lt;code>HEAD&lt;/code>表示最新的提交或者这个&lt;strong>版本库&lt;/strong>，HEAD^、HEAD~1上上次提交或者上个版本&lt;/li>
&lt;li>或者使用&lt;code>commit_hash&lt;/code>，提交的哈希值可以使用&lt;code>git log&lt;/code>查看，只需要前几位就行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git reset&lt;/code>（重置到最新的提交）移除所有暂存区、工作区的修改，到未跟踪。这些命令其实省略了&lt;code>HEAD&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>git reset --hard&lt;/code> 重置到最新的提交，删除工作区和暂存区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git reset &amp;lt;file&amp;gt;&lt;/code>将&lt;code>&amp;lt;file&amp;gt;&lt;/code>从暂存区移除，但保持⼯作区不变。此操作不会修改⼯作区的任何⽂件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-restore">
&lt;a href="#git-restore" class="header-anchor">#&lt;/a>
git restore
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git restore &amp;lt;file&amp;gt;...&lt;/code>撤销对工作区的修改，是对以跟踪的文件当未添加到暂存区的文件。多个文件用空格分开。
&lt;ul>
&lt;li>&lt;code>git checkout -- &amp;lt;file&amp;gt;...&lt;/code>同理，&lt;code>--&lt;/code>可以省略&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git restore --staged &amp;lt;file&amp;gt;...&lt;/code>撤销对暂存区的修改到未跟踪。针对添加到暂存区的文件。
&lt;ul>
&lt;li>&lt;code>git reset HEAD &amp;lt;file&amp;gt;...&lt;/code>同理，&lt;code>HEAD&lt;/code>可以省略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>具体用哪一个，git都会有提示，不用记。&lt;/li>
&lt;/ul>
&lt;h3 id="git-checkout">
&lt;a href="#git-checkout" class="header-anchor">#&lt;/a>
git checkout
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>切换到指定的分支&lt;/p>
&lt;ul>
&lt;li>如果分支为远程分支，则检出远程分支&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -b &amp;lt;new-branch&amp;gt;&lt;/code>切换并创建指定的分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;file&amp;gt;&lt;/code>撤销工作区的修改&lt;/p>
&lt;ul>
&lt;li>&lt;code>git restore &amp;lt;file&amp;gt;&lt;/code>同理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;commit&amp;gt;&lt;/code>根据指定的提交创建一个分支,处于游离态。一般不用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -b &amp;lt;local_branch_name&amp;gt; origin/&amp;lt;remote_branch_name&amp;gt;&lt;/code>切换到远程分支&lt;/p>
&lt;ul>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>差不多，可以使用&lt;code>git fetch origin&lt;/code>获取仓库所以信息，在检出分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -&lt;/code>切换到前一个分支。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-remote">
&lt;a href="#git-remote" class="header-anchor">#&lt;/a>
git remote
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>用来管理远程仓库列表，&lt;code>origin&lt;/code>为远程仓库的默认别名。这些远端仓库的信息都被保存在&lt;code>./git/config&lt;/code> 文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote&lt;/code>列出所有已配置的远程仓库的信息。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-v&lt;/code>显示详细信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote add &amp;lt;remote_name&amp;gt; &amp;lt;remote_url&amp;gt;&lt;/code>添加远程仓库&lt;/p>
&lt;ul>
&lt;li>添加⼀个新的远程连接。添加后可使⽤ &lt;code>&amp;lt;name&amp;gt;&lt;/code>作为指定&lt;code>&amp;lt;url&amp;gt;&lt;/code>远程连接的名称。&lt;/li>
&lt;li>只有配置了这个才能推送到远程仓库。&lt;/li>
&lt;li>&lt;code>git remote rename &amp;lt;old_name&amp;gt; &amp;lt;new_name&amp;gt;&lt;/code>重命名远程仓库。&lt;/li>
&lt;li>&lt;code>git remote set-url &amp;lt;remote_name&amp;gt; &amp;lt;new_url&amp;gt;&lt;/code>修改远程仓库的url。&lt;/li>
&lt;li>&lt;code>git remote remove &amp;lt;remote_name&amp;gt;&lt;/code>或&lt;code>git remote rm &amp;lt;remote_name&amp;gt;&lt;/code>删除远程仓库。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote show &amp;lt;remote_name&amp;gt;&lt;/code>显示远程仓库的详细信息，包括 URL、跟踪的分支等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>补充如何创建远程仓库&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建远程仓库可以先在github上创建好，然后在本地pull下来，在进行修改后push上去。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以建一个&lt;strong>空白仓库&lt;/strong>，在本地push上去，但需要进行绑定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git remote add origin https://github.com/username/null-project.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -M main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="gjit-push">
&lt;a href="#gjit-push" class="header-anchor">#&lt;/a>
gjit push
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>将本地仓库推送到远程仓库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;&lt;/code>推送本地分支到指定的远程分支。如果远程分支不存在，会自动创建。&lt;code>:&lt;/code>前后不能有空格。&lt;/p>
&lt;ul>
&lt;li>当分支同名，可以简写成&lt;code>git push &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;&lt;/code>&lt;/li>
&lt;li>果无法提交的话执行，&lt;code>-f&lt;/code>、&lt;code>--force&lt;/code>选项强制推送，一般不用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push -u &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;&lt;/code>设置默认推送分支。&lt;/p>
&lt;ul>
&lt;li>作用：这样设置以后，推送到远程仓库可以简写成&lt;code>git push&lt;/code>
&lt;ul>
&lt;li>&lt;code>git push&lt;/code> 代替 &lt;code>git push origin master&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-u&lt;/code>是&lt;code>--set-upstream&lt;/code>的短形式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote_repository&amp;gt; -d &amp;lt;远程分支名&amp;gt;&lt;/code>删除远程分支 。&lt;/p>
&lt;ul>
&lt;li>&lt;code>--delete&lt;/code>长选项。&lt;/li>
&lt;li>&lt;code>git push origin :test&lt;/code>同理，没有写本地分支，就是删除远程分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;tagname&amp;gt;&lt;/code>推送指定标签到指定远程仓库，一般为`origin``&lt;/p>
&lt;/li>
&lt;li>
&lt;p>``git push &lt;remote> &amp;ndash;tags`推送所用标签到远程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-pull">
&lt;a href="#git-pull" class="header-anchor">#&lt;/a>
git pull
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git pull &amp;lt;remote_repository&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;&lt;/code>从远程仓库拉取最新代码到本地仓库。
&lt;ul>
&lt;li>&lt;code>git pull&lt;/code>会拉取并合并，出现冲突要解决之后才能合并。&lt;/li>
&lt;li>&lt;code>git fetch&lt;/code>获取当前远程仓库的最新信息，不会合并。&lt;/li>
&lt;li>通常可以简写成&lt;code>git pull&lt;/code>,远程仓库默认是&lt;code>origin&lt;/code>，分支默认是当前分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git pull --rebase&amp;lt;remote&amp;gt;&lt;/code> 抓取远程分⽀，并以rebase模式并⼊本地repo⽽不是merge。&lt;/li>
&lt;/ul>
&lt;h3 id="git-fetch">
&lt;a href="#git-fetch" class="header-anchor">#&lt;/a>
git fetch
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git fetch origin&lt;/code>获取远程仓库最新的更改。不会合并。默认仓库是&lt;code>origin&lt;/code>，分支是当前分支，这里可以省略&lt;code>origin&lt;/code>
&lt;ul>
&lt;li>&lt;code>git fetch origin &amp;lt;branch&amp;gt;&lt;/code>获取特定分支的更改.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git fetch --all&lt;/code>获取所用仓库远程仓库的最新更改。&lt;/li>
&lt;li>与&lt;code>git pull&lt;/code>的区别
&lt;ol>
&lt;li>都会获取远程仓库最新的更改。&lt;/li>
&lt;li>但是fetch不会合并，而pull会合并。可以理解为&lt;code>git pull&lt;/code> 是 &lt;code>git fetch&lt;/code> 和 &lt;code>git merge&lt;/code> 的组合&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>获取最新更改之后可以：
&lt;ol>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>检出指定分支，如果加&lt;code>origin&lt;/code>要这样&lt;code>git checkout -b &amp;lt;branch&amp;gt; origin/&amp;lt;branch&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>git merge origin/master&lt;/code>合并远程 master 分支的更改到当前的分支&lt;/li>
&lt;li>&lt;code>git rebase origin/master&lt;/code>使用 rebase 来整合更改（这可能会改变提交历史）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-stash">
&lt;a href="#git-stash" class="header-anchor">#&lt;/a>
git stash
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git stash&lt;/code>保存工作区、暂存区，可以切换分支去完成别的任务。不保存修改，未提交的修改会错乱到别的分支。并且只能保存已追踪的文件。&lt;/li>
&lt;li>&lt;code>git stash list&lt;/code>查看保存的工作区以及暂存区。&lt;/li>
&lt;li>&lt;code>git stash apply&lt;/code>恢复保存的工作区以及暂存区。
&lt;ul>
&lt;li>这个命令执行之后不会删除存储的工作区以及暂存区。&lt;/li>
&lt;li>要用&lt;code>git stash drop&lt;/code>才能删除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git stash pop&lt;/code>恢复并删除保存的工作区以及暂存区。&lt;/li>
&lt;li>默认都是保存、恢复第一个stash即&lt;code>stash@{0}&lt;/code>。若要指定第几个在后面加&lt;code>stash@{num}&lt;/code>。
&lt;ul>
&lt;li>如恢复第二个stash：&lt;code>git stash pop stash@{1}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每个分支共用一个stash。&lt;/li>
&lt;/ul>
&lt;h3 id="git-tag">
&lt;a href="#git-tag" class="header-anchor">#&lt;/a>
git tag
&lt;/h3>&lt;ul>
&lt;li>作用：用于标记项目的版本发布或重要的里程碑。&lt;/li>
&lt;li>分类
&lt;ol>
&lt;li>&lt;code>git tag &amp;lt;tagname&amp;gt; &amp;lt;commit ID&amp;gt;&lt;/code>轻量标签
&lt;ul>
&lt;li>&lt;code>git tag vn.n.n&lt;/code>打标签，&lt;code>n.n.n&lt;/code>表示对应的版本号，版本号前面一般加&lt;code>v&lt;/code>，遵循一定的命名规范，如&lt;code>v1.0.1&lt;/code>。
&lt;ul>
&lt;li>默认是打在最新的一次提交。&lt;/li>
&lt;li>后面跟提交的哈希值可以指定给那次提交打标签。如&lt;code>git tag v0.9.0 f52c633&lt;/code>。
&lt;ul>
&lt;li>哈希值可以通过&lt;code>git log&lt;/code>查看&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;&amp;lt;tag message&amp;gt;&amp;quot; &amp;lt;commit ID&amp;gt;&lt;/code>附注标签
&lt;ol>
&lt;li>如&lt;code>git tag -a v0.1 -m &amp;quot;version 0.1 released&amp;quot; 1094adb&lt;/code>&lt;/li>
&lt;li>推荐id省略默认最新提交。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>查看标签
&lt;ol>
&lt;li>&lt;code>git tag&lt;/code>显示所有的本地tag列表，按照字母顺序排序。如果tag数量较多，可能会显示不全。省略选项&lt;code>-l&lt;/code>、&lt;code>--list&lt;/code>&lt;/li>
&lt;li>&lt;code>git show &amp;lt;tagname&amp;gt;&lt;/code>显示指定tag的详细信息，包括提交的作者、提交时间、提交信息等。&lt;/li>
&lt;li>&lt;code>git tag -n&lt;/code>：显示tag列表，并同时显示每个tag对应的提交信息。&lt;/li>
&lt;li>&lt;code>git ls-remote --tags origin&lt;/code>：显示远程仓库中的所有tag信息。更推荐这种。
&lt;ol>
&lt;li>或者先&lt;code>git fetch&lt;/code>获取最新的更改，然后&lt;code>git tag&lt;/code>检出所有标签。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>删除标签
&lt;ol>
&lt;li>&lt;code>git tag -d &amp;lt;tagname&amp;gt;&lt;/code>删除本地标签&lt;/li>
&lt;li>删除远程标签：首先需要在本地删除标签，然后推送到远程仓库 &lt;code>git push origin :refs/tags/&amp;lt;tagname&amp;gt;&lt;/code>
&lt;ol>
&lt;li>远程标签是&lt;code>refs/tags/v0.0.1&lt;/code>这样存在的，跟删除远程分支差不多。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>标签一旦创建，就不能直接修改,如果需要修改标签，通常需要删除原标签，并重新创建一个新标签。&lt;/li>
&lt;li>推送标签
&lt;ol>
&lt;li>打的标签不会自动推送到远程仓库，需要手动推送。&lt;/li>
&lt;li>&lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;tagname&amp;gt;&lt;/code>推送指定标签到指定远程仓库，一般为&lt;code>origin&lt;/code>&lt;/li>
&lt;li>&lt;code>git push &amp;lt;remote&amp;gt; --tags&lt;/code>推送所用标签到远程&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="git复杂命令">
&lt;a href="#git%e5%a4%8d%e6%9d%82%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git复杂命令
&lt;/h2>&lt;h3 id="git-log">
&lt;a href="#git-log" class="header-anchor">#&lt;/a>
git log
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git log&lt;/code>以缺省格式显示全部commit历史。更多⾃定义参数请参考后续部分。&lt;code>q&lt;/code>退出，&lt;code>空格&lt;/code>下一页，&lt;code>h&lt;/code>查看帮助
&lt;ul>
&lt;li>&lt;code>git log --stat&lt;/code>：显示详细的commit历史。&lt;/li>
&lt;li>&lt;code>git log -&amp;lt;limit&amp;gt;&lt;/code>限制log的显示数量。例如：”git log -5”仅显示最新5条commit。&lt;/li>
&lt;li>&lt;code>git log --oneline&lt;/code>每⾏显示⼀条commit，简化信息。与&lt;code>--pretty=oneline&lt;/code>等效&lt;/li>
&lt;li>&lt;code>git log --author= &amp;quot;&amp;lt;pattern&amp;gt;&amp;quot;&lt;/code>按提交者名字搜索并显示commit。&lt;/li>
&lt;li>&lt;code>git log --grep= &amp;quot;&amp;lt;pattern&amp;gt;&amp;quot;&lt;/code>按指定内容搜索并显示commit。&lt;/li>
&lt;li>&lt;code>git log &amp;lt;since&amp;gt;..&amp;lt;until&amp;gt;&lt;/code>显示指定范围的commit。范围参数可以是commit ID、分⽀名称、HEAD或任意相对位置。&lt;/li>
&lt;li>&lt;code>git log -- &amp;lt;file&amp;gt;&lt;/code>仅显示包含指定⽂件修改的commit。&lt;/li>
&lt;li>&lt;code>git log --graph&lt;/code>使⽤&amp;ndash;graph参数显示图形化的branch信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-diff">
&lt;a href="#git-diff" class="header-anchor">#&lt;/a>
git diff
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git diff&lt;/code>⽐较⼯作区和暂存区的修改。&lt;/li>
&lt;li>&lt;code>git diff HEAD&lt;/code>⽐较⼯作区和上⼀次commit后的修改。
&lt;ul>
&lt;li>HEAD指向当前分支最新的commit版本库&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git diff --cached&lt;/code>⽐较暂存区和上⼀次commit后的修改。&lt;/li>
&lt;li>&lt;code>git diff --stashed&lt;/code>查看暂存区与最新提交的差异，与上面一样&lt;/li>
&lt;li>&lt;code>git diff &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt;&lt;/code>查看两个提交之间的差异。&lt;/li>
&lt;li>&lt;code>git diff &amp;lt;filename&amp;gt;&lt;/code>后面指定文件，只查看该文件的修改情况，没有参数查询全部&lt;/li>
&lt;li>用&lt;code>git diff HEAD -- readme.txt&lt;/code>命令可以查看版本库和工作区里面最新版本的区别&lt;/li>
&lt;/ul>
&lt;h3 id="git-config">
&lt;a href="#git-config" class="header-anchor">#&lt;/a>
git config
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>作用：通过&lt;code>git config&lt;/code>命令配置git的配置文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git配置文件级别分为：&lt;/p>
&lt;ol>
&lt;li>仓库级别 &lt;code>--local&lt;/code> 【优先级最高】。文件所在位置仓库下的&lt;code>.git/config&lt;/code>&lt;/li>
&lt;li>当前用户级别 &lt;code>--global&lt;/code>【优先级次之】&lt;strong>一般配置它&lt;/strong>。文件所在位置用户家目录下的&lt;code>.gitconfig&lt;/code>&lt;/li>
&lt;li>系统所有用户级别 &lt;code>--system&lt;/code>【优先级最低】。文件所在位置git安装目录下的&lt;code> ./etc/gitconfig&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-l&lt;/code>、&lt;code>--list&lt;/code>查看配置。&lt;strong>常用&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>git config -l&lt;/code>查看所有的配置信息，依次是系统级别、用户级别、仓库级别&lt;/li>
&lt;li>&lt;code>git config --local -l&lt;/code> 查看仓库级别配置。必须要进入到具体的目录下。&lt;/li>
&lt;li>&lt;code>git config --global -l&lt;/code> 查看当前用户配置&lt;/li>
&lt;li>&lt;code>git config --system -l&lt;/code> 查看系统所有用户配置&lt;/li>
&lt;li>可以与&lt;code>--show-origin&lt;/code> 显示文件位置，&lt;code>--show-scope&lt;/code>显示文件级别&lt;strong>组合使用&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-e&lt;/code>、&lt;code>--edit&lt;/code>打开编辑器编辑&lt;strong>指定级别&lt;/strong>的配置文件，没有指定默认仓库级别，会使用默认编辑器打开编辑。安装的时候设置的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加配置、修改配置：直接配置对应的配置参数就行。一般配置用户级别就行。省略了&lt;code>--add&lt;/code>选项。没有指定级别，默认仓库基本。常用的添加配置命令:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>用户邮箱和用户名。安装git之后&lt;strong>必设置的配置&lt;/strong>&lt;/p>
&lt;p>&lt;code>git config --global user.email &amp;quot;Your mail&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global user.name &amp;quot;Your name&amp;quot;&lt;/code>&lt;/p>
&lt;p>如果我们没有配置，在提交代码时会有如下错误：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">xxx@DESKTOP-MD21325 MINGW64 /d/test/test &lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git commit -m &lt;span class="s2">&amp;#34;feature: add readme&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author identity unknown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Please tell me who you are.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.email &lt;span class="s2">&amp;#34;you@example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.name &lt;span class="s2">&amp;#34;Your Name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">to &lt;span class="nb">set&lt;/span> your account&lt;span class="s1">&amp;#39;s default identity.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Omit --global to set the identity only in this repository.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">fatal: unable to auto-detect email address (got &amp;#39;&lt;/span>xxx@DESKTOP-MD21325.&lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置自己的代理。网速慢&lt;strong>必设置的配置&lt;/strong>&lt;/p>
&lt;p>&lt;code>git config --global http.proxy &amp;quot;http://proxy_ip:port&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global https.proxy &amp;quot;https://proxy_ip:port&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--unset&lt;/code>取消配置，注意要指定取消的配置级别。常用取消配置命令：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>取消代理配置&lt;/p>
&lt;p>&lt;code>git config --global --unset http.proxy&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global --unset https.proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--get&lt;/code>查看指定级别、指定配置项的配置，默认仓库级别。如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>查看代理配置&lt;/p>
&lt;p>&lt;code>git config --global --get http.proxy&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global --get https.proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git config --global alias.&amp;lt;alias-name&amp;gt; &amp;lt;git-command&amp;gt;&lt;/code>配置⼀个git命令的快捷⽅式。例如：配置”alias.glog log &amp;ndash;graph &amp;ndash;oneline”使”git glog”相当于”git log &amp;ndash;graph &amp;ndash;oneline”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git config --global core.editor &amp;lt;editor&amp;gt;&lt;/code>配置⽂本编辑器，例如vi，在必要时⾃动打开此⽂本编辑器。安装的时候也可以指定默认编辑器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-submodule">
&lt;a href="#git-submodule" class="header-anchor">#&lt;/a>
git submodule
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git submodule init&lt;/code>初始化子模块，将子模块的配置信息存储在父仓库中。&lt;/p>
&lt;ul>
&lt;li>通常执行之后再执行更新子模块使用，如克隆带有子模块的仓库，没有加&lt;code>--recursive&lt;/code>，是不会克隆子模块的&lt;/li>
&lt;li>初始化子模块之后，执行更新子模块就会根据配置信息下载子模块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git submodule update&lt;/code>根据父仓库子模块的配置信息更新子模块，如果没有初始化子模块可以加参数&lt;code>--init&lt;/code>，会下载与父项目绑定版本的子模块，若要更新加&lt;code>--remote&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>--init&lt;/code>初识化子模块&lt;/li>
&lt;li>&lt;code>--recursive&lt;/code>会递归下载子模块的子模块&lt;/li>
&lt;li>&lt;code>--remote&lt;/code>根据子模块远程仓库的配置信息更新子模块，会下载最新版本的子模块
&lt;ul>
&lt;li>注意更新之后要提交更新的版本，否则当在执行更新命令没有加&lt;code>--remote&lt;/code>时会退回与父仓库绑定的版本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git submodule add &amp;lt;repository&amp;gt; &amp;lt;path&amp;gt;&lt;/code>添加子模块。其中，&lt;code>&amp;lt;repository&amp;gt;&lt;/code>是子模块的远程仓库地址，&lt;code>&amp;lt;path&amp;gt;&lt;/code>是子模块在主项目中的路径。&lt;/p>
&lt;ul>
&lt;li>子模块可以当正常仓库使用。创建时&lt;code>&amp;lt;path&amp;gt;&lt;/code>路径不能存在文件，更克隆差不多。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-subtree">
&lt;a href="#git-subtree" class="header-anchor">#&lt;/a>
git subtree
&lt;/h3>&lt;ul>
&lt;li>作用：将一个仓库中的目录作为另一个仓库，可以指定分支&lt;/li>
&lt;li>用途：搭建项目网站时，将项目网站资源推送到gh-pages分支上
&lt;ul>
&lt;li>&lt;code>git subtree push --prefix=dist origin gh-pages&lt;/code>将目录添加到&lt;code>gh-pages&lt;/code>分支上，&lt;code>dist&lt;/code>为项目网站的目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git subtree push --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>将子目录的内容推送到远程仓库。它会将当前仓库中子目录的修改推送到指定的远程仓库和分支中。
&lt;ul>
&lt;li>注意：以这种推送的方式添加的&lt;code>subtree&lt;/code>不能执行&lt;code>subtree pull&lt;/code>命令，只有通过&lt;code>subtree add&lt;/code>添加的&lt;strong>才能都执行&lt;/strong>，但能够执行&lt;code>subtree push&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git subtree pull --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>这个命令用于从远程仓库更新子目录的内容。它会拉取远程仓库的最新代码，并更新到当前仓库的子目录中。&lt;/li>
&lt;li>&lt;code>git subtree add --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>这个命令用于将远程仓库的内容作为子目录添加到当前仓库中。&lt;code>&amp;lt;prefix&amp;gt;&lt;/code>是子目录的名称，&lt;code>&amp;lt;repository&amp;gt;&lt;/code>是远程仓库的地址，&lt;code>&amp;lt;branch&amp;gt;&lt;/code>是要合并的分支。&lt;/li>
&lt;/ul>
&lt;h3 id="git-rebase">
&lt;a href="#git-rebase" class="header-anchor">#&lt;/a>
git rebase
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>作用：rebase翻译成变基，顾名思义：改变基准点。可以使提交历史更加清晰和线性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>原因：通过合并两个不同的分支，提交历史会很错乱。而通过变基，会使得提交历史更加整洁和可读。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何实现：就是修改创建分支的起点（基准点），到最新的提交。起点变了，提交历史就简化了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>git rebase &amp;lt;base&amp;gt;&lt;/code>基于&lt;code>&amp;lt;base&amp;gt;&lt;/code>对当前分⽀进⾏rebase&lt;code>。&amp;lt;base&amp;gt;&lt;/code>可以是commit、分⽀名称、tag或相对于HEAD的commit。&lt;/li>
&lt;li>&lt;code>git rebase -i &amp;lt;base&amp;gt;&lt;/code>以交互模式对当前分⽀做rebase。&lt;/li>
&lt;li>rebase的过程中可能会出现冲突，解决冲突之后需要使用&lt;code>git add&lt;/code>命令将解决冲突后的文件标记为已解决，然后，使用&lt;code>git rebase --continue&lt;/code>命令继续rebase过程。Git会尝试继续应用剩余的提交。如果再次出现冲突，你需要重复上述解决冲突和继续rebase的步骤。&lt;/li>
&lt;li>如果在rebase过程中出现了问题，或者你决定放弃rebase操作，你可以使用&lt;code>git rebase --abort&lt;/code>命令来撤销整个rebase操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>git rebase的注意事项&lt;/p>
&lt;ul>
&lt;li>&lt;strong>避免对已经推送到远程仓库的提交执行rebase操作&lt;/strong>：这可能会导致提交历史的不一致，给其他协作者带来困扰。&lt;/li>
&lt;li>&lt;strong>保持工作目录干净&lt;/strong>：在执行rebase之前，确保你的工作目录中没有未提交的更改。&lt;/li>
&lt;li>&lt;strong>谨慎使用&lt;/strong>：由于rebase会改变提交历史，因此在与他人共享分支时要特别小心。通常，在公共分支上应该使用merge而不是rebase。&lt;/li>
&lt;/ul>
&lt;p>通过掌握git rebase的用法和注意事项，你可以更有效地管理你的Git仓库，保持代码的清晰和整洁。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;hr>
&lt;h2 id="扩展">
&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">#&lt;/a>
扩展
&lt;/h2>&lt;h3 id="gitignore文件">
&lt;a href="#gitignore%e6%96%87%e4%bb%b6" class="header-anchor">#&lt;/a>
.gitignore文件
&lt;/h3>&lt;p>Git提供了&lt;code>.gitignore&lt;/code>文件，用于指定哪些文件或目录应该被Git忽略，不纳入版本控制系统中。&lt;code>.gitignore&lt;/code>文件是一个文本文件，可以包含一些简单的规则，指定应该忽略哪些文件或目录。以下是一些.gitignore文件的示例规则：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>忽略所有以.tmp结尾的文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">*.tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的log文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">*.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的.idea目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.idea/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的build目录及其内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">build/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略根目录下的config.json文件，但不忽略子目录中的config.json文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的node_modules目录及其内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">node_modules/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的DS_Store文件（Mac OS X系统中的文件）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.DS_Store
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>可以将这些规则写入.gitignore文件中，并将该文件添加到Git仓库中，以使Git忽略这些文件或目录。需要注意的是，即使某些文件或目录已经被添加到Git仓库中，也可以通过修改.gitignore文件来让Git忽略它们，但需要执行以下命令才能使.gitignore文件生效：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git rm -r --cached .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;update .gitignore&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些命令会删除Git缓存中已经添加的文件，然后重新添加文件并提交更改，以使.gitignore文件生效。&lt;/p>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>当Git执行提交操作时，它会检查.gitignore文件中列出的文件和目录，并将它们从提交中排除。这是非常有用的，因为有些文件或目录不应该被纳入版本控制系统中，例如编译生成的文件、日志文件、临时文件等。&lt;/p>
&lt;p>.gitignore文件的语法是基于模式匹配的，其中的特殊字符有：&lt;/p>
&lt;ul>
&lt;li>*：匹配任意字符，但不包括路径分隔符（/）。&lt;/li>
&lt;li>?：匹配任意单个字符，但不包括路径分隔符（/）。&lt;/li>
&lt;li>/：路径分隔符，用于指定目录。&lt;/li>
&lt;li>!：用于否定模式，即不忽略指定的文件或目录。&lt;/li>
&lt;/ul>
&lt;p>可以在.gitignore文件中使用通配符、路径、注释等语法，以更精确地指定需要忽略的文件或目录。同时，可以在仓库的根目录下创建一个.gitignore文件，也可以在子目录中创建独立的.gitignore文件。&lt;/p>
&lt;hr>
&lt;h3 id="git账户认证">
&lt;a href="#git%e8%b4%a6%e6%88%b7%e8%ae%a4%e8%af%81" class="header-anchor">#&lt;/a>
git账户认证
&lt;/h3>&lt;ul>
&lt;li>当我们对远程仓库就行修改时，需要对应的权限，不是什么人都能够修改仓库。只有通过了git账户认证，才能修改对应的仓库。&lt;/li>
&lt;li>常见git账户认证的方式：
&lt;ul>
&lt;li>&lt;strong>SSH秘钥认证&lt;/strong>
&lt;ul>
&lt;li>这是Git中最常见的认证方式之一。用户首先生成一对公钥和私钥，然后将&lt;strong>公钥&lt;/strong>添加到Git服务器上的用户帐户中。当用户尝试与Git服务器进行通信时，Git将使用私钥进行身份验证。这种方式相对安全，因为私钥是保存在用户本地机器上的，不会被传输到Git服务器。&lt;/li>
&lt;li>秘钥生成命令：bash中运行&lt;code>ssh-keygen&lt;/code>,一直回车就行，秘钥位置：主目录下的&lt;code>.ssh&lt;/code>目录&lt;/li>
&lt;li>公钥设置位置：github账户&lt;code>Settings&lt;/code>-&amp;gt;&lt;code>SSH and GPG keys&lt;/code>-&amp;gt;&lt;code>New SSH key&lt;/code>将公钥复制粘贴保存就行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>HTTPS认证&lt;/strong>
&lt;ul>
&lt;li>在这种方式中，用户需要提供&lt;strong>用户名&lt;/strong>和&lt;strong>密码&lt;/strong>进行身份验证。用户需要在Git服务器上创建一个用户帐户，并将其关联到本地的Git仓库中。当用户执行需要身份验证的操作时，Git会要求输入用户名和密码。这种方式相对简单，适用于个人项目或小型团队。&lt;/li>
&lt;li>设置位置：在使用Git进行操作时，如push或pull，系统会提示你输入用户名和密码进行身份验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>访问令牌（Personal Access Token）认证&lt;/strong>：不常用
&lt;ul>
&lt;li>访问令牌提供了一种更安全、更灵活的身份验证方式，因为它可以限制令牌的使用权限，并且可以随时撤销或重新生成令牌。&lt;/li>
&lt;li>设置位置：github账户&lt;code>Settings&lt;/code>-&amp;gt;&lt;code>Developer Settings&lt;/code>-&amp;gt;&lt;code>Personal access tokens&lt;/code>-&amp;gt;&lt;code>Tokens (classic)&lt;/code>-&amp;gt;&lt;code>Generate new token&lt;/code>，然后根据自己的需求设置token的权限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="ssh-keygen">
&lt;a href="#ssh-keygen" class="header-anchor">#&lt;/a>
ssh-keygen
&lt;/h4>&lt;p>&lt;code>ssh-keygen&lt;/code>命令是一个用于生成、管理和转换SSH认证密钥的工具。它支持RSA和DSA两种认证密钥类型，并且提供了多种选项和参数，以满足不同的需求。&lt;/p>
&lt;p>使用&lt;code>ssh-keygen&lt;/code>命令，你可以生成新的密钥对，指定密钥的长度、类型以及保存的文件名。生成的私钥将保存在本地，而公钥则用于在SSH服务器上进行身份验证。&lt;/p>
&lt;p>以下是一些常用的&lt;code>ssh-keygen&lt;/code>命令选项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-t&lt;/code>：指定要创建的密钥类型，默认为RSA。&lt;/li>
&lt;li>&lt;code>-b&lt;/code>：指定密钥长度（以位为单位）。对于RSA密钥，最小要求是768位，默认是2048位。对于DSA密钥，长度必须是1024位（根据FIPS 1862标准规定）。&lt;/li>
&lt;li>&lt;code>-f&lt;/code>：指定用于保存密钥的文件名。如果不指定，将使用默认值&lt;code>id_rsa&lt;/code>（对于私钥）和&lt;code>id_rsa.pub&lt;/code>（对于公钥）。&lt;/li>
&lt;li>&lt;code>-C&lt;/code>：提供一个新注释，通常用于标识密钥的用途或所有者。&lt;/li>
&lt;li>&lt;code>-P&lt;/code> 和 &lt;code>-N&lt;/code>：分别用于提供旧密码和新密码，以保护私钥文件。如果留空，则表示不需要密码。&lt;/li>
&lt;/ul>
&lt;p>在生成密钥对后，你可以将公钥复制到需要访问的SSH服务器上，通常是将公钥内容追加到服务器的&lt;code>~/.ssh/authorized_keys&lt;/code>文件中。这样，当你使用SSH客户端连接到服务器时，客户端将使用私钥进行身份验证，如果验证成功，你将能够无需输入密码即可登录到服务器。&lt;/p>
&lt;p>请注意，私钥的安全性至关重要。私钥应该妥善保管，并且不应该与其他人共享。同时，定期更换密钥对也是保持安全性的好习惯。&lt;/p>
&lt;p>除了生成和管理密钥对，&lt;code>ssh-keygen&lt;/code>还提供了其他功能，如转换密钥格式、读取密钥文件等。你可以通过查看&lt;code>ssh-keygen&lt;/code>的帮助文档或手册页（通过运行&lt;code>man ssh-keygen&lt;/code>命令）来获取更详细的信息和用法示例。&lt;/p></description></item></channel></rss>