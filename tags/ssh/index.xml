<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSH on Arlettebrook's blog</title><link>https://arlettebrook.github.io/tags/ssh/</link><description>Recent content in SSH on Arlettebrook's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Arlettebrook</copyright><lastBuildDate>Sat, 03 Aug 2024 23:59:44 +0800</lastBuildDate><atom:link href="https://arlettebrook.github.io/tags/ssh/index.xml" rel="self" type="application/rss+xml"/><item><title>SSH Introduction</title><link>https://arlettebrook.github.io/p/ssh-introduction/</link><pubDate>Sat, 03 Aug 2024 23:59:44 +0800</pubDate><guid>https://arlettebrook.github.io/p/ssh-introduction/</guid><description>&lt;hr>
&lt;h2 id="ssh-介绍">SSH 介绍
&lt;/h2>&lt;p>SSH（Secure Shell 的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。&lt;/p>
&lt;p>实际中，它主要用于保证远程登录和远程通信的安全，任何网络服务都可以用这个协议来加密。&lt;/p>
&lt;h3 id="ssh-是什么">SSH 是什么
&lt;/h3>&lt;p>历史上，网络主机之间的通信是不加密的，属于明文通信。这使得通信很不安全，一个典型的例子就是服务器登录。登录远程服务器的时候，需要将用户输入的密码传给服务器，如果这个过程是明文通信，就意味着传递过程中，线路经过的中间计算机都能看到密码，这是很可怕的。&lt;/p>
&lt;p>SSH 就是为了解决这个问题而诞生的，它能够加密计算机之间的通信，保证不被窃听或篡改。它还能对操作者进行认证（authentication）和授权（authorization）。明文的网络协议可以套用在它里面，从而实现加密。&lt;/p>
&lt;h3 id="历史">历史
&lt;/h3>&lt;p>1995年，芬兰赫尔辛基工业大学的研究员 Tatu Ylönen 设计了 SSH 协议的第一个版本（现称为 SSH 1），同时写出了第一个实现（称为 SSH1）。&lt;/p>
&lt;p>当时，他所在的大学网络一直发生密码嗅探攻击，他不得不为服务器设计一个更安全的登录方式。写完以后，他就把这个工具公开了，允许其他人免费使用。&lt;/p>
&lt;p>SSH 可以替换 rlogin、TELNET、FTP 和 rsh 这些不安全的协议，所以大受欢迎，用户快速增长，1995年底已经发展到五十个国家的20,000个用户。SSH 1 协议也变成 IETF 的标准文档。&lt;/p>
&lt;p>1995年12月，由于客服需求越来越大，Tatu Ylönen 就成立了一家公司 SCS，专门销售和开发 SSH。这个软件的后续版本，逐渐从免费软件变成了专有的商业软件。&lt;/p>
&lt;p>SSH 1 协议存在一些安全漏洞，所以1996年又提出了 SSH 2 协议（或者称为 SSH 2.0）。这个协议与1.0版不兼容，在1997年进行了标准化，1998年推出了软件实现 SSH2。但是，官方的 SSH2 软件是一个专有软件，不能免费使用，而且 SSH1 的有些功能也没有提供。&lt;/p>
&lt;p>1999年，OpenBSD 的开发人员决定写一个 SSH 2 协议的开源实现，这就是 OpenSSH 项目。该项目最初是基于 SSH 1.2.12 版本，那是当时 SSH1 最后一个开源版本。但是，OpenSSH 很快就完全摆脱了原始的官方代码，在许多开发者的参与下，按照自己的路线发展。OpenSSH 随 OpenBSD 2.6 版本一起提供，以后又移植到其他操作系统，成为最流行的 SSH 实现。目前，Linux 的所有发行版几乎都自带 OpenSSH。&lt;/p>
&lt;p>现在，SSH-2 有多种实现，既有免费的，也有收费的。本书的内容主要是针对 OpenSSH。&lt;/p>
&lt;h3 id="ssh-架构">SSH 架构
&lt;/h3>&lt;p>SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 &lt;strong>ssh&lt;/strong>；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 &lt;strong>sshd&lt;/strong>。&lt;/p>
&lt;p>本教程约定，大写的 SSH 表示协议，小写的 ssh 表示客户端软件。&lt;/p>
&lt;p>另外，OpenSSH 还提供一些辅助工具软件（比如 ssh-keygen 、ssh-agent）和专门的客户端工具（比如 scp 和 sftp），这个教程也会予以介绍。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-客户端">SSH 客户端
&lt;/h2>&lt;h3 id="简介">简介
&lt;/h3>&lt;p>OpenSSH 的&lt;strong>客户端&lt;/strong>是&lt;strong>二进制程序 ssh&lt;/strong>。它在 Linux/Unix 系统的位置是&lt;code>/usr/local/bin/ssh&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在Linux上安装SSH客户端:&lt;/p>
&lt;p>在大多数Linux发行版中，OpenSSH客户端通常&lt;strong>默认已安装&lt;/strong>。如果没有安装，可以通过包管理器来安装。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ubuntu 和 Debian&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install openssh-client
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS 和 RHEL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo yum install openssh-clients
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install openssh-clients
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在macOS上安装SSH客户端:&lt;/p>
&lt;p>macOS预装了OpenSSH客户端，因此不需要额外安装。可以直接在终端使用&lt;code>ssh&lt;/code>命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在Windows上安装SSH客户端:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>从Windows 10版本1709开始，系统已经内置了OpenSSH客户端。可以通过以下步骤启用：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>打开设置&lt;/strong> &amp;gt; &lt;strong>应用&lt;/strong> &amp;gt; &lt;strong>可选功能&lt;/strong>(没有：搜索添加可选可能）。&lt;/li>
&lt;li>向下滚动并找到“OpenSSH Client”，如果未安装，点击&lt;strong>添加功能&lt;/strong>按钮。&lt;/li>
&lt;li>在列表中找到“OpenSSH Client”，然后点击&lt;strong>安装&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;p>之后，可以在命令提示符（cmd）或PowerShell中使用&lt;code>ssh&lt;/code>命令。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>或者使用封装了ssh客户端的工具：&lt;/p>
&lt;ul>
&lt;li>如Termius、FinalShell、WindTerm等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>安装以后，可以使用&lt;code>-V&lt;/code>参数输出版本号，查看一下是否安装成功。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -V
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="基本用法">基本用法
&lt;/h3>&lt;p>ssh 最常见的用途就是&lt;strong>登录服务器&lt;/strong>，这要求服务器安装并&lt;strong>正在运行 SSH 服务器软件&lt;/strong>(sshd)。&lt;/p>
&lt;p>ssh 登录服务器的命令如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>hostname&lt;/code>是主机名，它可以是域名，也可能是 IP 地址或局域网内部的主机名。不指定用户名的情况下，将使用客户端的当前用户名，作为远程服务器的登录用户名。如果要指定用户名，可以采用下面的语法:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh username@hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令中，用户名和主机名写在一起了，之间使用&lt;code>@&lt;/code>分隔。&lt;/p>
&lt;p>用户名也可以使用&lt;code>ssh&lt;/code>的&lt;code>-l&lt;/code>参数指定，这样的话，用户名和主机名就不用写在一起了:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -l username hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ssh 默认连接服务器的22端口，&lt;code>-p&lt;/code>参数可以指定其他端口:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -p &lt;span class="m">8821&lt;/span> foo.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令连接服务器&lt;code>foo.com&lt;/code>的8821端口，用户名为当前客户端主机登录的用户名。&lt;/p>
&lt;h3 id="连接流程">连接流程
&lt;/h3>&lt;p>ssh 连接远程服务器后，首先有一个&lt;strong>验证过程&lt;/strong>，&lt;strong>验证远程服务器是否为陌生地址&lt;/strong>。&lt;/p>
&lt;p>如果是第一次连接某一台服务器，命令行会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">The authenticity of host &lt;span class="s1">&amp;#39;foo.com (192.168.121.111)&amp;#39;&lt;/span> can&lt;span class="err">&amp;#39;&lt;/span>t be established.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Are you sure you want to &lt;span class="k">continue&lt;/span> connecting &lt;span class="o">(&lt;/span>yes/no&lt;span class="o">)&lt;/span>?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面这段文字告诉用户，&lt;code>foo.com&lt;/code>这台服务器的指纹是陌生的，让用户选择是否要继续连接（输入 yes 或 no）。&lt;/p>
&lt;p>所谓“服务器指纹”，指的是 SSH 服务器公钥的哈希值。每台 SSH 服务器都有唯一一对密钥，用于跟客户端通信，其中公钥的哈希值就可以用来识别服务器。&lt;/p>
&lt;p>在上面这段文字后面，输入&lt;code>yes&lt;/code>，就可以将当前服务器的指纹也储存在本机&lt;code>~/.ssh/known_hosts&lt;/code>文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Warning: Permanently added &lt;span class="s1">&amp;#39;foo.com (192.168.121.111)&amp;#39;&lt;/span> &lt;span class="o">(&lt;/span>RSA&lt;span class="o">)&lt;/span> to the list of known hosts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，客户端就会跟服务器建立连接。接着，ssh 就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。&lt;/p>
&lt;p>下面的命令可以查看某个公钥的指纹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">256&lt;/span> da:24:43:0b:2e:c1:3f:a1:84:13:92:01:52:b4:84:ff &lt;span class="o">(&lt;/span>ECDSA&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中，&lt;code>ssh-keygen -l -f&lt;/code>命令会输出公钥&lt;code>/etc/ssh/ssh_host_ecdsa_key.pub&lt;/code>的指纹。&lt;/p>
&lt;p>ssh 会将本机连接过的所有服务器公钥的指纹，都储存在本机的&lt;code>~/.ssh/known_hosts&lt;/code>文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。&lt;/p>
&lt;h3 id="加密参数">加密参数
&lt;/h3>&lt;p>SSH 连接的握手阶段，客户端必须跟服务端约定加密参数集（cipher suite）。&lt;/p>
&lt;p>加密参数集包含了若干不同的加密参数，它们之间使用下划线连接在一起，下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">TLS_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>它的含义如下：&lt;/p>
&lt;ul>
&lt;li>TLS：加密通信协议&lt;/li>
&lt;li>RSA：密钥交换算法&lt;/li>
&lt;li>AES：加密算法&lt;/li>
&lt;li>128：加密算法的强度&lt;/li>
&lt;li>CBC：加密算法的模式&lt;/li>
&lt;li>SHA：数字签名的 Hash 函数&lt;/li>
&lt;/ul>
&lt;p>下面是一个例子，客户端向服务器发出的握手信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">Handshake protocol: ClientHello
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Version: TLS 1.2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Client time: May 22, 2030 02:43:46 GMT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random bytes: b76b0e61829557eb4c611adfd2d36eb232dc1332fe29802e321ee871
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Session ID: (empty)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Cipher Suites
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_AES_128_GCM_SHA256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_RC4_128_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Compression methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Method: null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extensions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: server_name
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Hostname: www.feistyduck.com
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: renegotiation_info
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: elliptic_curves
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Named curve: secp256r1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Named curve: secp384r1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: signature_algorithms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha1/rsa
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha256/rsa
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha1/ecdsa
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha256/ecdsa”
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的握手信息（ClientHello）之中，&lt;code>Cipher Suites&lt;/code>字段就是客户端列出可选的加密参数集，服务器在其中选择一个自己支持的&lt;strong>参数集&lt;/strong>。&lt;/p>
&lt;p>服务器选择完毕之后，向客户端发出回应：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">Handshake protocol: ServerHello
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Version: TLS 1.2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Server time: Mar 10, 2059 02:35:57 GMT”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random bytes: 8469b09b480c1978182ce1b59290487609f41132312ca22aacaf5012
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Session ID: 4cae75c91cf5adf55f93c9fb5dd36d19903b1182029af3d527b7a42ef1c32c80
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Compression method: null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extensions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: server_name
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: renegotiation_info”
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的回应信息（ServerHello）中，&lt;code>Cipher Suite&lt;/code>字段就是服务器最终选定的加密参数。&lt;/p>
&lt;h3 id="服务器密钥变更">服务器密钥变更
&lt;/h3>&lt;p>服务器指纹可以防止有人恶意冒充远程主机。如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时，客户端就会中断连接，并显示一段警告信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Someone could be eavesdropping on you right now &lt;span class="o">(&lt;/span>man-in-the-middle attack&lt;span class="o">)&lt;/span>!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">It is also possible that the RSA host key has just been changed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The fingerprint &lt;span class="k">for&lt;/span> the RSA key sent by the remote host is
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">77:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Please contact your system administrator.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Add correct host key in /home/me/.ssh/known_hosts to get rid of this message.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Offending key in /home/me/.ssh/known_hosts:36
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面这段文字的意思是，该主机的公钥指纹跟&lt;code>~/.ssh/known_hosts&lt;/code>文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因，使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。&lt;/p>
&lt;p>如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从&lt;code>~/.ssh/known_hosts&lt;/code>文件删除。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -R hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>hostname&lt;/code>是发生公钥变更的主机名。&lt;/p>
&lt;p>除了使用上面的命令，你也可以手工修改&lt;code>known_hosts&lt;/code>文件，将公钥指纹删除。&lt;/p>
&lt;p>删除了原来的公钥指纹以后，重新执行 ssh 命令连接远程服务器，将新的指纹加入&lt;code>known_hosts&lt;/code>文件，就可以顺利连接了。&lt;/p>
&lt;h3 id="ssh-命令行配置项">ssh 命令行配置项
&lt;/h3>&lt;p>&lt;strong>-c&lt;/strong>&lt;/p>
&lt;p>&lt;code>-c&lt;/code>参数指定加密算法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -c blowfish,3des server.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -c blowfish -c 3des server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定使用加密算法&lt;code>blowfish&lt;/code>或&lt;code>3des&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-C&lt;/strong>&lt;/p>
&lt;p>&lt;code>-C&lt;/code>参数表示压缩数据传输。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -C server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-D&lt;/strong>&lt;/p>
&lt;p>&lt;code>-D&lt;/code>参数指定本机的 Socks 监听端口，该端口收到的请求，都将转发到远程的 SSH 主机，又称动态端口转发，详见《端口转发》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -D &lt;span class="m">1080&lt;/span> server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将本机 1080 端口收到的请求，都转发到服务器&lt;code>server&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-f&lt;/strong>&lt;/p>
&lt;p>&lt;code>-f&lt;/code>参数表示 SSH 连接在后台运行。&lt;/p>
&lt;p>&lt;strong>-F&lt;/strong>&lt;/p>
&lt;p>&lt;code>-F&lt;/code>参数指定配置文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -F /usr/local/ssh/other_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定使用配置文件&lt;code>other_config&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-i&lt;/strong>&lt;/p>
&lt;p>&lt;code>-i&lt;/code>参数用于指定私钥，意为“identity_file”，默认值为&lt;code>~/.ssh/id_dsa&lt;/code>（DSA 算法）和&lt;code>~/.ssh/id_rsa&lt;/code>（RSA 算法）。注意，对应的公钥必须存放到服务器，详见《密钥登录》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -i my-key server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-l&lt;/strong>&lt;/p>
&lt;p>&lt;code>-l&lt;/code>参数指定远程登录的账户名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -l sally server.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh sally@server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-L&lt;/strong>&lt;/p>
&lt;p>&lt;code>-L&lt;/code>参数设置本地端口转发，详见《端口转发》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 9999:targetServer:80 user@remoteserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，所有发向本地&lt;code>9999&lt;/code>端口的请求，都会经过&lt;code>remoteserver&lt;/code>发往 targetServer 的 80 端口，这就相当于直接连上了 targetServer 的 80 端口。&lt;/p>
&lt;p>&lt;strong>-m&lt;/strong>&lt;/p>
&lt;p>&lt;code>-m&lt;/code>参数指定校验数据完整性的算法（message authentication code，简称 MAC）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -m hmac-sha1,hmac-md5 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定数据校验算法为&lt;code>hmac-sha1&lt;/code>或&lt;code>hmac-md5&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-N&lt;/strong>&lt;/p>
&lt;p>&lt;code>-N&lt;/code>参数用于端口转发，表示建立的 SSH 只用于端口转发，不能执行远程命令，这样可以提供安全性，详见《端口转发》一章。&lt;/p>
&lt;p>&lt;strong>-o&lt;/strong>&lt;/p>
&lt;p>&lt;code>-o&lt;/code>参数用来指定一个配置命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -o &lt;span class="s2">&amp;#34;Keyword Value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>举例来说，配置文件里面有如下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">User sally
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">220&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>-o&lt;/code>参数，可以把上面两个配置命令从命令行传入。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -o &lt;span class="s2">&amp;#34;User sally&amp;#34;&lt;/span> -o &lt;span class="s2">&amp;#34;Port 220&amp;#34;&lt;/span> server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用等号时，配置命令可以不用写在引号里面，但是等号前后不能有空格。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -o &lt;span class="nv">User&lt;/span>&lt;span class="o">=&lt;/span>sally -o &lt;span class="nv">Port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">220&lt;/span> server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-p&lt;/strong>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数指定 SSH 客户端连接的服务器端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -p &lt;span class="m">2035&lt;/span> server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令连接服务器的2035端口。&lt;/p>
&lt;p>&lt;strong>-q&lt;/strong>&lt;/p>
&lt;p>&lt;code>-q&lt;/code>参数表示安静模式（quiet），不向用户输出任何警告信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh –q foo.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root’s password:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令使用&lt;code>-q&lt;/code>参数，只输出要求用户输入密码的提示。&lt;/p>
&lt;p>&lt;strong>-R&lt;/strong>&lt;/p>
&lt;p>&lt;code>-R&lt;/code>参数指定远程端口转发，详见《端口转发》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R 9999:targetServer:902 &lt;span class="nb">local&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令需在跳板服务器执行，指定本地计算机&lt;code>local&lt;/code>监听自己的 9999 端口，所有发向这个端口的请求，都会转向 targetServer 的 902 端口。&lt;/p>
&lt;p>&lt;strong>-t&lt;/strong>&lt;/p>
&lt;p>&lt;code>-t&lt;/code>参数在 ssh 直接运行远端命令时，提供一个互动式 Shell。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -t server.example.com emacs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-v&lt;/strong>&lt;/p>
&lt;p>&lt;code>-v&lt;/code>参数显示详细信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -v server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-v&lt;/code>可以重复多次，表示信息的详细程度，比如&lt;code>-vv&lt;/code>和&lt;code>-vvv&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -vvv server.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -v -v -v server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会输出最详细的连接信息。&lt;/p>
&lt;p>&lt;strong>-V&lt;/strong>&lt;/p>
&lt;p>&lt;code>-V&lt;/code>参数输出 ssh 客户端的版本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh –V
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh: SSH Secure Shell 3.2.3 &lt;span class="o">(&lt;/span>non-commercial version&lt;span class="o">)&lt;/span> on i686-pc-linux-gnu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令输出本机 ssh 客户端版本是&lt;code>SSH Secure Shell 3.2.3&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-X&lt;/strong>&lt;/p>
&lt;p>&lt;code>-X&lt;/code>参数表示打开 X 窗口转发。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -X server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-1，-2&lt;/strong>&lt;/p>
&lt;p>&lt;code>-1&lt;/code>参数指定使用 SSH 1 协议。&lt;/p>
&lt;p>&lt;code>-2&lt;/code>参数指定使用 SSH 2 协议。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ssh -2 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-4，-6&lt;/strong>&lt;/p>
&lt;p>&lt;code>-4&lt;/code>指定使用 IPv4 协议，这是默认值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -4 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-6&lt;/code>指定使用 IPv6 协议。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -6 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="执行远程命令">执行远程命令
&lt;/h3>&lt;p>SSH 登录成功后，用户就进入了远程主机的命令行环境，所看到的提示符，就是远程主机的提示符。这时，你就可以输入想要在远程主机执行的命令。&lt;/p>
&lt;p>另一种&lt;strong>执行远程命令的方法&lt;/strong>，是将命令直接写在&lt;code>ssh&lt;/code>命令的后面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh username@hostname &lt;span class="nb">command&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会使得 SSH 在&lt;strong>登录成功后&lt;/strong>，立刻在远程主机上执行命令&lt;code>command&lt;/code>。命令执行完成之后会自动退出连接。&lt;/p>
&lt;p>&lt;strong>多行命令用引号或双引号括起来&lt;/strong>。&lt;/p>
&lt;p>下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh foo@server.example.com cat /etc/hosts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会在登录成功后，立即远程执行命令&lt;code>cat /etc/hosts&lt;/code>。&lt;/p>
&lt;p>采用这种语法执行命令时，ssh 客户端不会提供互动式的 Shell 环境，而是直接将远程命令的执行结果输出在命令行。但是，有些命令需要互动式的 Shell 环境，这时就要使用&lt;code>-t&lt;/code>参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 报错&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh remote.server.com emacs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">emacs: standard input is not a tty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 不报错&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -t server.example.com emacs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>emacs&lt;/code>命令需要一个互动式 Shell，所以报错。只有加上&lt;code>-t&lt;/code>参数，ssh 才会分配一个互动式 Shell。&lt;/p>
&lt;p>不是交互式命令，使用&lt;code>-t&lt;/code>参数之后，&lt;strong>也会立即退出连接&lt;/strong>。交互命令需要主动退出。&lt;/p>
&lt;h3 id="客户端配置文件">客户端配置文件
&lt;/h3>&lt;h4 id="位置">位置
&lt;/h4>&lt;p>SSH 客户端的全局配置文件是&lt;code>/etc/ssh/ssh_config&lt;/code>，用户个人的配置文件在&lt;code>~/.ssh/config&lt;/code>，优先级高于全局配置文件。&lt;/p>
&lt;p>除了配置文件，&lt;code>~/.ssh&lt;/code>目录还有一些用户个人的密钥文件和其他文件。下面是其中一些常见的文件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/.ssh/id_ecdsa&lt;/code>：用户的 ECDSA 私钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/id_ecdsa.pub&lt;/code>：用户的 ECDSA 公钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/id_rsa&lt;/code>：用于 SSH 协议版本2 的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/id_rsa.pub&lt;/code>：用于SSH 协议版本2 的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/identity&lt;/code>：用于 SSH 协议版本1 的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/identity.pub&lt;/code>：用于 SSH 协议版本1 的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/known_hosts&lt;/code>：包含 SSH 服务器的公钥指纹。&lt;/li>
&lt;/ul>
&lt;h4 id="主机设置">主机设置
&lt;/h4>&lt;p>用户个人的配置文件&lt;code>~/.ssh/config&lt;/code>，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。&lt;/p>
&lt;p>下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Host *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">2222&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host remoteserver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName remote.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User neo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">2112&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>Host *&lt;/code>表示对所有主机生效，后面的&lt;code>Port 2222&lt;/code>表示所有主机的默认连接端口都是2222，这样就不用在登录时特别指定端口了。这里的缩进并不是必需的，只是为了视觉上，易于识别针对不同主机的设置。&lt;/p>
&lt;p>后面的&lt;code>Host remoteserver&lt;/code>表示，下面的设置只对主机&lt;code>remoteserver&lt;/code>生效。&lt;code>remoteserver&lt;/code>只是一个别名，具体的主机由&lt;code>HostName&lt;/code>命令指定，&lt;code>User&lt;/code>和&lt;code>Port&lt;/code>这两项分别表示用户名和端口。这里的&lt;code>Port&lt;/code>会覆盖上面&lt;code>Host *&lt;/code>部分的&lt;code>Port&lt;/code>设置。&lt;/p>
&lt;p>以后，登录&lt;code>remote.example.com&lt;/code>时，只要执行&lt;code>ssh remoteserver&lt;/code>命令，就会自动套用 config 文件里面指定的参数。
单个主机的配置格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh remoteserver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -p &lt;span class="m">2112&lt;/span> neo@remote.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Host&lt;/code>命令的值可以使用通配符，比如&lt;code>Host *&lt;/code>表示对所有主机都有效的设置，&lt;code>Host *.edu&lt;/code>表示只对一级域名为&lt;code>.edu&lt;/code>的主机有效的设置。它们的设置都可以被单个主机的设置覆盖。&lt;/p>
&lt;h4 id="配置命令的语法">配置命令的语法
&lt;/h4>&lt;p>ssh 客户端配置文件的每一行，就是一个配置命令。配置命令与对应的值之间，可以使用空格，也可以使用等号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Compression yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Compression&lt;/span> &lt;span class="o">=&lt;/span> yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>#&lt;/code>开头的行表示注释，会被忽略。空行等同于注释。&lt;/p>
&lt;h4 id="主要配置命令">主要配置命令
&lt;/h4>&lt;p>下面是 ssh 客户端的一些主要配置命令，以及它们的范例值。&lt;/p>
&lt;ul>
&lt;li>&lt;code>AddressFamily inet&lt;/code>：表示只使用 IPv4 协议。如果设为&lt;code>inet6&lt;/code>，表示只使用 IPv6 协议。&lt;/li>
&lt;li>&lt;code>BindAddress 192.168.10.235&lt;/code>：指定本机的 IP 地址（如果本机有多个 IP 地址）。&lt;/li>
&lt;li>&lt;code>CheckHostIP yes&lt;/code>：检查 SSH 服务器的 IP 地址是否跟公钥数据库吻合。&lt;/li>
&lt;li>&lt;code>Ciphers blowfish,3des&lt;/code>：指定加密算法。&lt;/li>
&lt;li>&lt;code>Compression yes&lt;/code>：是否压缩传输信号。&lt;/li>
&lt;li>&lt;code>ConnectionAttempts 10&lt;/code>：客户端进行连接时，最大的尝试次数。&lt;/li>
&lt;li>&lt;code>ConnectTimeout 60&lt;/code>：客户端进行连接时，服务器在指定秒数内没有回复，则中断连接尝试。&lt;/li>
&lt;li>&lt;code>DynamicForward 1080&lt;/code>：指定动态转发端口。&lt;/li>
&lt;li>&lt;code>GlobalKnownHostsFile /users/smith/.ssh/my_global_hosts_file&lt;/code>：指定全局的公钥数据库文件的位置。&lt;/li>
&lt;li>&lt;code>Host server.example.com&lt;/code>：指定连接的域名或 IP 地址，也可以是别名，支持通配符。&lt;code>Host&lt;/code>命令后面的所有配置，都是针对该主机的，直到下一个&lt;code>Host&lt;/code>命令为止。&lt;/li>
&lt;li>&lt;code>HostKeyAlgorithms ssh-dss,ssh-rsa&lt;/code>：指定密钥算法，优先级从高到低排列。&lt;/li>
&lt;li>&lt;code>HostName myserver.example.com&lt;/code>：在&lt;code>Host&lt;/code>命令使用别名的情况下，&lt;code>HostName&lt;/code>指定域名或 IP 地址。&lt;/li>
&lt;li>&lt;code>IdentityFile keyfile&lt;/code>：指定私钥文件。&lt;/li>
&lt;li>&lt;code>LocalForward 2001 localhost:143&lt;/code>：指定本地端口转发。&lt;/li>
&lt;li>&lt;code>LogLevel QUIET&lt;/code>：指定日志详细程度。如果设为&lt;code>QUIET&lt;/code>，将不输出大部分的警告和提示。&lt;/li>
&lt;li>&lt;code>MACs hmac-sha1,hmac-md5&lt;/code>：指定数据校验算法。&lt;/li>
&lt;li>&lt;code>NumberOfPasswordPrompts 2&lt;/code>：密码登录时，用户输错密码的最大尝试次数。&lt;/li>
&lt;li>&lt;code>PasswordAuthentication no&lt;/code>：指定是否支持密码登录。不过，这里只是客户端禁止，真正的禁止需要在 SSH 服务器设置。&lt;/li>
&lt;li>&lt;code>Port 2035&lt;/code>：指定客户端连接的 SSH 服务器端口。&lt;/li>
&lt;li>&lt;code>PreferredAuthentications publickey,hostbased,password&lt;/code>：指定各种登录方法的优先级。&lt;/li>
&lt;li>&lt;code>Protocol 2&lt;/code>：支持的 SSH 协议版本，多个版本之间使用逗号分隔。&lt;/li>
&lt;li>&lt;code>PubKeyAuthentication yes&lt;/code>：是否支持密钥登录。这里只是客户端设置，还需要在 SSH 服务器进行相应设置。&lt;/li>
&lt;li>&lt;code>RemoteForward 2001 server:143&lt;/code>：指定远程端口转发。&lt;/li>
&lt;li>&lt;code>SendEnv COLOR&lt;/code>：SSH 客户端向服务器发送的环境变量名，多个环境变量之间使用空格分隔。环境变量的值从客户端当前环境中拷贝。&lt;/li>
&lt;li>&lt;code>ServerAliveCountMax 3&lt;/code>：如果没有收到服务器的回应，客户端连续发送多少次&lt;code>keepalive&lt;/code>信号，才断开连接。该项默认值为3。&lt;/li>
&lt;li>&lt;code>ServerAliveInterval 300&lt;/code>：客户端建立连接后，如果在给定秒数内，没有收到服务器发来的消息，客户端向服务器发送&lt;code>keepalive&lt;/code>消息。如果不希望客户端发送，这一项设为&lt;code>0&lt;/code>。&lt;/li>
&lt;li>&lt;code>StrictHostKeyChecking yes&lt;/code>：&lt;code>yes&lt;/code>表示严格检查，服务器公钥为未知或发生变化，则拒绝连接。&lt;code>no&lt;/code>表示如果服务器公钥未知，则加入客户端公钥数据库，如果公钥发生变化，不改变客户端公钥数据库，输出一条警告，依然允许连接继续进行。&lt;code>ask&lt;/code>（默认值）表示询问用户是否继续进行。&lt;/li>
&lt;li>&lt;code>TCPKeepAlive yes&lt;/code>：客户端是否定期向服务器发送&lt;code>keepalive&lt;/code>信息。&lt;/li>
&lt;li>&lt;code>User userName&lt;/code>：指定远程登录的账户名。&lt;/li>
&lt;li>&lt;code>UserKnownHostsFile /users/smith/.ssh/my_local_hosts_file&lt;/code>：指定当前用户的&lt;code>known_hosts&lt;/code>文件（服务器公钥指纹列表）的位置。&lt;/li>
&lt;li>&lt;code>VerifyHostKeyDNS yes&lt;/code>：是否通过检查 SSH 服务器的 DNS 记录，确认公钥指纹是否与&lt;code>known_hosts&lt;/code>文件保存的一致。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="ssh-密钥登录">SSH 密钥登录
&lt;/h2>&lt;p>SSH 默认采用密码登录，这种方法有很多缺点，简单的密码不安全，复杂的密码不容易记忆，每次手动输入也很麻烦。&lt;strong>密钥登录是比密码登录更好的解决方案&lt;/strong>。&lt;/p>
&lt;h3 id="密钥是什么">密钥是什么
&lt;/h3>&lt;p>密钥（key）是一个非常大的数字，通过加密算法得到。对称加密只需要一个密钥，非对称加密需要两个密钥成对使用，分为公钥（public key）和私钥（private key）。&lt;/p>
&lt;p>&lt;strong>SSH 密钥登录采用的是非对称加密&lt;/strong>，每个用户通过自己的密钥登录。其中，&lt;strong>私钥必须私密保存，不能泄漏&lt;/strong>；&lt;strong>公钥则是公开的，可以对外发送&lt;/strong>。它们的关系是，&lt;strong>公钥和私钥是一一对应的&lt;/strong>，&lt;strong>每一个私钥都有且仅有一个对应的公钥&lt;/strong>，&lt;strong>反之亦然&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>如果数据使用公钥加密，那么只有使用对应的私钥才能解密，其他密钥都不行&lt;/strong>；&lt;strong>反过来，如果使用私钥加密（这个过程一般称为“签名”），也只有使用对应的公钥解密。&lt;/strong>&lt;/p>
&lt;h3 id="密钥登录的过程">密钥登录的过程
&lt;/h3>&lt;p>SSH 密钥登录分为以下的步骤:&lt;/p>
&lt;p>预备步骤，客户端通过&lt;code>ssh-keygen&lt;/code>生成自己的公钥和私钥。&lt;/p>
&lt;p>第一步，手动将客户端的公钥放入远程服务器的指定位置。&lt;/p>
&lt;p>第二步，客户端向服务器发起 SSH 登录的请求。&lt;/p>
&lt;p>第三步，服务器收到用户 SSH 登录的请求，发送一些随机数据给用户，要求用户证明自己的身份。&lt;/p>
&lt;p>第四步，客户端收到服务器发来的数据，使用私钥对数据进行签名，然后再发还给服务器。&lt;/p>
&lt;p>第五步，服务器收到客户端发来的加密签名后，使用对应的公钥解密，然后跟原始数据比较。如果一致，就允许用户登录。&lt;/p>
&lt;h3 id="ssh-keygen命令生成密钥">&lt;code>ssh-keygen&lt;/code>命令：生成密钥
&lt;/h3>&lt;h4 id="基本用法-1">基本用法
&lt;/h4>&lt;p>密钥登录时，首先需要生成公钥和私钥。OpenSSH 提供了一个工具程序&lt;code>ssh-keygen&lt;/code>命令，&lt;strong>用来生成密钥&lt;/strong>。&lt;/p>
&lt;p>直接输入&lt;code>ssh-keygen&lt;/code>，程序会询问一系列问题，然后生成密钥:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常做法是使用&lt;code>-t&lt;/code>参数，指定密钥的加密算法:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，&lt;code>-t&lt;/code>参数用来指定密钥的加密算法，一般会选择 DSA 算法或 RSA 算法。如果省略该参数，默认使用 RSA 算法。&lt;/p>
&lt;p>一般都加&lt;code>-t&lt;/code>选项，有的ssh版本默认的加密算法不同。&lt;/p>
&lt;p>输入上面的命令以后，&lt;code>ssh-keygen&lt;/code>会要求用户回答一些问题:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Generating public/private dsa key pair.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter file in which to save the key &lt;span class="o">(&lt;/span>/home/username/.ssh/id_dsa&lt;span class="o">)&lt;/span>: press ENTER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter passphrase &lt;span class="o">(&lt;/span>empty &lt;span class="k">for&lt;/span> no passphrase&lt;span class="o">)&lt;/span>: ********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter same passphrase again: ********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your identification has been saved in /home/username/.ssh/id_dsa.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your public key has been saved in /home/username/.ssh/id_dsa.pub.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The key fingerprint is:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14:ba:06:98:a8:98:ad:27:b5:ce:55:85:ec:64:37:19 username@shell.isp.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，执行&lt;code>ssh-keygen&lt;/code>命令以后，会出现第一个问题，&lt;strong>询问密钥保存的文件名&lt;/strong>，默认是&lt;code>~/.ssh/id_dsa&lt;/code>文件，这个是私钥的文件名，对应的公钥文件&lt;code>~/.ssh/id_dsa.pub&lt;/code>是自动生成的。用户的密钥一般都放在主目录的&lt;code>.ssh&lt;/code>目录里面。&lt;/p>
&lt;p>如果选择&lt;code>rsa&lt;/code>算法，生成的密钥文件默认就会是&lt;code>~/.ssh/id_rsa&lt;/code>（私钥）和&lt;code>~/.ssh/id_rsa.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>接着，就会是第二个问题**，询问是否要为私钥文件设定密码保护（passphrase）&lt;strong>。这样的话，即使入侵者&lt;/strong>拿到私钥，还是需要破解密码**。如果为了方便，不想设定密码保护，可以直接按回车键，密码就会为空。后面还会让你再输入一次密码，两次输入必须一致。注意，这里“密码”的英文单词是 passphrase，这是为了避免与 Linux 账户的密码单词 password 混淆，表示这不是用户系统账户的密码。&lt;/p>
&lt;p>秘钥密码如果不为空，那么每次连接都需要输入密码。&lt;/p>
&lt;p>最后，就会生成私钥和公钥，屏幕上还会给出公钥的指纹，以及当前的用户名和主机名作为注释，&lt;strong>用来识别密钥的来源&lt;/strong>。&lt;/p>
&lt;p>公钥文件和私钥文件都是文本文件，可以用文本编辑器看一下它们的内容。公钥文件的内容类似下面这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">ssh-dss AAAAB3NzaC1yc2EAAAABIwAAAIEAvpB4lUbAaEbh9u6HLig7amsfywD4fqSZq2ikACIUBn3GyRPfeF93l/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">weQh702ofXbDydZAKMcDvBJqRhUotQUwqV6HJxqoqPDlPGUUyo8RDIkLUIPRyq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ypZxmK9aCXokFiHoGCXfQ9imUP/w/jfqb9ByDtG97tUJF6nFMP5WzhM= username@shell.isp.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，末尾的&lt;code>username@shell.isp.com&lt;/code>是公钥的注释，用来识别不同的公钥，表示这是哪台主机（&lt;code>shell.isp.com&lt;/code>）的哪个用户（&lt;code>username&lt;/code>）的公钥，&lt;strong>不是必需项&lt;/strong>。&lt;/p>
&lt;p>注意，公钥只有一行。因为它太长了，所以上面分成三行显示。&lt;/p>
&lt;p>下面的命令可以列出用户所有的公钥:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ls -l ~/.ssh/id_*.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>生成密钥以后，建议修改它们的权限，防止其他人读取:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> ~/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> ~/.ssh/id_rsa.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="配置项">配置项
&lt;/h4>&lt;p>&lt;code>ssh-keygen&lt;/code>的命令行配置项，主要有下面这些:&lt;/p>
&lt;p>&lt;strong>（1）&lt;code>-b&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-b&lt;/code>参数指定密钥的二进制位数。这个参数值越大，密钥就越不容易破解，但是加密解密的计算开销也会加大。&lt;/p>
&lt;p>一般来说，&lt;code>-b&lt;/code>至少应该是&lt;code>1024&lt;/code>，更安全一些可以设为&lt;code>2048&lt;/code>或者更高。&lt;/p>
&lt;p>&lt;strong>（2）&lt;code>-C&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-C&lt;/code>参数可以为密钥文件指定新的注释，格式为&lt;code>username@host&lt;/code>。&lt;/p>
&lt;p>下面命令生成一个4096位 RSA 加密算法的密钥对，并且给出了用户名和主机名。一般默认即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -C &lt;span class="s2">&amp;#34;your_email@domain.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）&lt;code>-f&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-f&lt;/code>参数指定生成的私钥文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa -f mykey
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会在当前目录生成私钥文件&lt;code>mykey&lt;/code>和公钥文件&lt;code>mykey.pub&lt;/code>。&lt;/p>
&lt;p>&lt;strong>（4）&lt;code>-F&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-F&lt;/code>参数检查某个主机名是否在&lt;code>known_hosts&lt;/code>文件里面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -F example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（5）&lt;code>-N&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-N&lt;/code>参数用于指定私钥的密码（passphrase）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa -N secretword
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（6）&lt;code>-p&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数用于重新指定私钥的密码（passphrase）。它与&lt;code>-N&lt;/code>的不同之处在于，新密码不在命令中指定，而是执行后再输入。ssh 先要求输入旧密码，然后要求输入两遍新密码。&lt;/p>
&lt;p>&lt;strong>（7）&lt;code>-R&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-R&lt;/code>参数将指定的主机公钥指纹移出&lt;code>known_hosts&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -R example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（8）&lt;code>-t&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-t&lt;/code>参数用于指定生成密钥的加密算法，一般为&lt;code>dsa&lt;/code>或&lt;code>rsa&lt;/code>&lt;/p>
&lt;h3 id="手动上传公钥">手动上传公钥
&lt;/h3>&lt;p>&lt;strong>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>OpenSSH 规定，用户公钥保存在服务器的&lt;code>~/.ssh/authorized_keys&lt;/code>文件&lt;/strong>。你要以哪个用户的身份登录到服务器，密钥就必须保存在&lt;strong>该用户主目录&lt;/strong>的&lt;code>~/.ssh/authorized_keys&lt;/code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。&lt;strong>每个公钥占据一行&lt;/strong>。如果该文件不存在，可以手动创建。&lt;/p>
&lt;p>用户可以手动编辑该文件，把公钥粘贴进去，也可以在本机计算机上，执行下面的命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ cat ~/.ssh/id_rsa.pub &lt;span class="p">|&lt;/span> ssh user@host &lt;span class="s2">&amp;#34;mkdir -p ~/.ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，&lt;code>user@host&lt;/code>要替换成你所要登录的用户名和主机名。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>，&lt;code>authorized_keys&lt;/code>文件的权限要设为&lt;code>644&lt;/code>，即只有文件所有者才能写。如果权限设置不对，SSH 服务器可能会拒绝读取该文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">644&lt;/span> ~/.ssh/authorized_keys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只要公钥上传到服务器，下次登录时，&lt;strong>OpenSSH 就会自动采用密钥登录&lt;/strong>，不再提示输入密码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -l username shell.isp.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter passphrase &lt;span class="k">for&lt;/span> key &lt;span class="s1">&amp;#39;/home/you/.ssh/id_dsa&amp;#39;&lt;/span>: ************
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Last login: Mon Mar &lt;span class="m">24&lt;/span> 02:17:27 &lt;span class="m">2014&lt;/span> from ex.ample.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shell.isp.com&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面例子中，SSH 客户端使用私钥之前，会要求用户输入密码（passphrase），用来解开私钥。如果秘钥有密码，那么每次都需要输入密码。&lt;/p>
&lt;h3 id="ssh-copy-id-命令自动上传公钥">ssh-copy-id 命令：自动上传公钥
&lt;/h3>&lt;p>OpenSSH 自带一个&lt;code>ssh-copy-id&lt;/code>命令，可以自动将公钥拷贝到远程服务器的&lt;code>~/.ssh/authorized_keys&lt;/code>文件。如果&lt;code>~/.ssh/authorized_keys&lt;/code>文件不存在，&lt;code>ssh-copy-id&lt;/code>命令会自动创建该文件。&lt;/p>
&lt;p>用户在本地计算机执行下面的命令，就可以把本地的公钥拷贝到服务器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-copy-id -i key_file user@host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-i&lt;/code>参数用来指定公钥文件，&lt;code>user&lt;/code>是所要登录的账户名，&lt;code>host&lt;/code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。&lt;/p>
&lt;p>注意，公钥文件可以&lt;strong>不指定&lt;code>.pub&lt;/code>后缀名&lt;/strong>，&lt;code>ssh-copy-id&lt;/code>会自动在当前目录里面寻找。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ~/.ssh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh-copy-id -i id_rsa user@host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，公钥文件会自动匹配到&lt;code>~/.ssh/id_rsa.pub&lt;/code>。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>，&lt;code>ssh-copy-id&lt;/code>是直接将公钥添加到&lt;code>authorized_keys&lt;/code>文件的末尾。如果&lt;code>authorized_keys&lt;/code>文件的末尾不是一个换行符，会导致新的公钥添加到前一个公钥的末尾，两个公钥连在一起，使得它们都无法生效。所以，如果&lt;code>authorized_keys&lt;/code>文件已经存在，使用&lt;code>ssh-copy-id&lt;/code>命令之前，务必保证&lt;code>authorized_keys&lt;/code>文件的末尾是换行符（假设该文件已经存在）。&lt;/p>
&lt;h3 id="ssh-agent-命令ssh-add-命令">ssh-agent 命令，ssh-add 命令
&lt;/h3>&lt;h4 id="基本用法-2">基本用法
&lt;/h4>&lt;p>私钥设置了密码以后，每次使用都必须输入密码，有时让人感觉非常麻烦。比如，连续使用&lt;code>scp&lt;/code>命令远程拷贝文件时，每次都要求输入密码。&lt;/p>
&lt;p>&lt;code>ssh-agent&lt;/code>命令就是为了解决这个问题而设计的，它让用户在整个 Bash 对话（session）之中，&lt;strong>只在第一次使用 SSH 命令时输入密码，然后将私钥保存在内存中，后面都不需要再输入私钥的密码了&lt;/strong>。&lt;/p>
&lt;p>第一步，使用下面的命令新建一次命令行对话:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-agent bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，如果你使用的命令行环境不是 Bash，可以用其他的 Shell 命令代替。比如&lt;code>zsh&lt;/code>和&lt;code>fish&lt;/code>。&lt;/p>
&lt;p>如果想在当前对话启用&lt;code>ssh-agent&lt;/code>，可以使用下面的命令:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">eval&lt;/span> &lt;span class="sb">`&lt;/span>ssh-agent&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>ssh-agent&lt;/code>会先自动在后台运行，并将需要设置的环境变量输出在屏幕上，类似下面这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SSH_AUTH_SOCK&lt;/span>&lt;span class="o">=&lt;/span>/tmp/ssh-barrett/ssh-22841-agent&lt;span class="p">;&lt;/span> &lt;span class="nb">export&lt;/span> SSH_AUTH_SOCK&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SSH_AGENT_PID&lt;/span>&lt;span class="o">=&lt;/span>22842&lt;span class="p">;&lt;/span> &lt;span class="nb">export&lt;/span> SSH_AGENT_PID&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> Agent pid 22842&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>eval&lt;/code>命令的作用，就是运行上面的&lt;code>ssh-agent&lt;/code>命令的输出，设置环境变量。&lt;/p>
&lt;p>第二步，在新建的 Shell 对话里面，使用&lt;code>ssh-add&lt;/code>命令添加默认的私钥（比如&lt;code>~/.ssh/id_rsa&lt;/code>，或&lt;code>~/.ssh/id_dsa&lt;/code>，或&lt;code>~/.ssh/id_ecdsa&lt;/code>，或&lt;code>~/.ssh/id_ed25519&lt;/code>）:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-add
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter passphrase &lt;span class="k">for&lt;/span> /home/you/.ssh/id_dsa: ********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Identity added: /home/you/.ssh/id_dsa &lt;span class="o">(&lt;/span>/home/you/.ssh/id_dsa&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面例子中，添加私钥时，会要求输入密码。以后，在这个对话里面再使用密钥时，就不需要输入私钥的密码了，因为私钥已经加载到内存里面了。&lt;/p>
&lt;p>如果添加的不是默认私钥，&lt;code>ssh-add&lt;/code>命令需要显式指定私钥文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-add my-other-key-file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令中，&lt;code>my-other-key-file&lt;/code>就是用户指定的私钥文件。&lt;/p>
&lt;p>第三步，使用 ssh 命令正常登录远程服务器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh remoteHost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>remoteHost&lt;/code>是远程服务器的地址，ssh 使用的是默认的私钥。这时如果私钥设有密码，ssh 将不再询问密码，而是直接取出内存里面的私钥。&lt;/p>
&lt;p>如果要使用其他私钥登录服务器，需要使用 ssh 命令的&lt;code>-i&lt;/code>参数指定私钥文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh –i OpenSSHPrivateKey remoteHost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，如果要退出&lt;code>ssh-agent&lt;/code>，可以直接退出子 Shell（按下 Ctrl + d），也可以使用下面的命令:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-agent -k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ssh-add命令">&lt;code>ssh-add&lt;/code>命令
&lt;/h3>&lt;p>&lt;code>ssh-add&lt;/code>命令用来将私钥加入&lt;code>ssh-agent&lt;/code>，它有如下的参数:&lt;/p>
&lt;p>&lt;strong>（1）&lt;code>-d&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-d&lt;/code>参数从内存中删除指定的私钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-add -d name-of-key-file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（2）&lt;code>-D&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-D&lt;/code>参数从内存中删除所有已经添加的私钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-add -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）&lt;code>-l&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-l&lt;/code>参数列出所有已经添加的私钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-add -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="关闭密码登录">关闭密码登录
&lt;/h3>&lt;p>&lt;strong>为了安全性，启用密钥登录之后，最好关闭服务器的密码登录&lt;/strong>。&lt;/p>
&lt;p>对于 OpenSSH，具体方法就是打开服务器 sshd 的配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>，将&lt;code>PasswordAuthentication&lt;/code>这一项设为&lt;code>no&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">PasswordAuthentication no
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改配置文件以后，不要忘了重新启动 sshd，否则不会生效。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-证书登录">SSH 证书登录
&lt;/h2>&lt;p>SSH 是服务器登录工具，一般情况下都采用密码登录或密钥登录。&lt;/p>
&lt;p>但是，SSH 还有第三种登录方法，那就是证书登录。某些情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。&lt;/p>
&lt;h3 id="非证书登录的缺点">非证书登录的缺点
&lt;/h3>&lt;p>密码登录和密钥登录，都有各自的缺点。&lt;/p>
&lt;p>密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。&lt;/p>
&lt;p>密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。&lt;/p>
&lt;h3 id="证书登录是什么">证书登录是什么？
&lt;/h3>&lt;p>证书登录就是为了解决上面的缺点而设计的。它引入了一个&lt;strong>证书颁发机构&lt;/strong>（Certificate Authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。&lt;/p>
&lt;p>登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。&lt;/p>
&lt;p>证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。&lt;/p>
&lt;h3 id="证书登录的流程">证书登录的流程
&lt;/h3>&lt;p>SSH 证书登录之前，如果还没有证书，需要生成证书。具体方法是：（1）用户和服务器都将自己的公钥，发给 CA；（2）CA 使用服务器公钥，生成服务器证书，发给服务器；（3）CA 使用用户的公钥，生成用户证书，发给用户。&lt;/p>
&lt;p>有了证书以后，用户就可以登录服务器了。整个过程都是 SSH 自动处理，用户无感知。&lt;/p>
&lt;p>第一步，用户登录服务器时，SSH 自动将用户证书发给服务器。&lt;/p>
&lt;p>第二步，服务器检查用户证书是否有效，以及是否由可信的 CA 颁发。证实以后，就可以信任用户。&lt;/p>
&lt;p>第三步，SSH 自动将服务器证书发给用户。&lt;/p>
&lt;p>第四步，用户检查服务器证书是否有效，以及是否由信任的 CA 颁发。证实以后，就可以信任服务器。&lt;/p>
&lt;p>第五步，双方建立连接，服务器允许用户登录。&lt;/p>
&lt;h3 id="生成-ca-的密钥">生成 CA 的密钥
&lt;/h3>&lt;p>证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。&lt;/p>
&lt;p>虽然 CA 可以用同一对密钥签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做&lt;code>user_ca&lt;/code>，另一对是签发服务器证书的密钥，假设叫做&lt;code>host_ca&lt;/code>。&lt;/p>
&lt;p>使用下面的命令，生成&lt;code>user_ca&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生成 CA 签发用户证书的密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -f ~/.ssh/user_ca -C user_ca
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会在&lt;code>~/.ssh&lt;/code>目录生成一对密钥：&lt;code>user_ca&lt;/code>（私钥）和&lt;code>user_ca.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>这个命令的各个参数含义如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-t rsa&lt;/code>：指定密钥算法 RSA。&lt;/li>
&lt;li>&lt;code>-b 4096&lt;/code>：指定密钥的位数是4096位。安全性要求不高的场合，这个值可以小一点，但是不应小于1024。&lt;/li>
&lt;li>&lt;code>-f ~/.ssh/user_ca&lt;/code>：指定生成密钥的位置和文件名。&lt;/li>
&lt;li>&lt;code>-C user_ca&lt;/code>：指定密钥的识别字符串，相当于注释，可以随意设置。&lt;/li>
&lt;/ul>
&lt;p>使用下面的命令，生成&lt;code>host_ca&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生成 CA 签发服务器证书的密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -f host_ca -C host_ca
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会在&lt;code>~/.ssh&lt;/code>目录生成一对密钥：&lt;code>host_ca&lt;/code>（私钥）和&lt;code>host_ca.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>现在，&lt;code>~/.ssh&lt;/code>目录应该至少有四把密钥。&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/.ssh/user_ca&lt;/code>&lt;/li>
&lt;li>&lt;code>~/.ssh/user_ca.pub&lt;/code>&lt;/li>
&lt;li>&lt;code>~/.ssh/host_ca&lt;/code>&lt;/li>
&lt;li>&lt;code>~/.ssh/host_ca.pub&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="ca-签发服务器证书">CA 签发服务器证书
&lt;/h3>&lt;p>有了秘钥以后，就可以签发服务器证书CA了。&lt;/p>
&lt;p>签发证书，除了 CA 的密钥以外，还需要&lt;strong>服务器的公钥&lt;/strong>。一般来说，SSH 服务器（通常是&lt;code>sshd&lt;/code>）安装时，已经生成密钥&lt;code>/etc/ssh/ssh_host_rsa_key&lt;/code>了。如果没有的话，可以用下面的命令生成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo ssh-keygen -f /etc/ssh/ssh_host_rsa_key -b &lt;span class="m">4096&lt;/span> -t rsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会在&lt;code>/etc/ssh&lt;/code>目录，生成&lt;code>ssh_host_rsa_key&lt;/code>（私钥）和&lt;code>ssh_host_rsa_key.pub&lt;/code>（公钥）。然后，需要把服务器公钥&lt;code>ssh_host_rsa_key.pub&lt;/code>，&lt;strong>复制或上传到 CA 所在的服务器&lt;/strong>。&lt;/p>
&lt;p>上传以后，CA 就可以使用密钥&lt;code>host_ca&lt;/code>为服务器的公钥&lt;code>ssh_host_rsa_key.pub&lt;/code>签发服务器证书：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -s host_ca -I host.example.com -h -n host.example.com -V +52w ssh_host_rsa_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会生成服务器证书&lt;code>ssh_host_rsa_key-cert.pub&lt;/code>（服务器公钥名字加后缀&lt;code>-cert&lt;/code>）。这个命令各个参数的含义如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：指定 CA 签发证书的密钥。&lt;/li>
&lt;li>&lt;code>-I&lt;/code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。&lt;/li>
&lt;li>&lt;code>-h&lt;/code>：指定该证书是服务器证书，而不是用户证书。&lt;/li>
&lt;li>&lt;code>-n host.example.com&lt;/code>：指定服务器的域名，表示证书仅对该域名有效。如果有多个域名，则使用逗号分隔。用户登录该域名服务器时，SSH 通过证书的这个值，分辨应该使用哪张证书发给用户，用来证明服务器的可信性。&lt;/li>
&lt;li>&lt;code>-V +52w&lt;/code>：指定证书的有效期，这里为52周（一年）。默认情况下，证书是永远有效的。建议使用该参数指定有效期，并且有效期最好短一点，最长不超过52周。&lt;/li>
&lt;li>&lt;code>ssh_host_rsa_key.pub&lt;/code>：服务器公钥。&lt;/li>
&lt;/ul>
&lt;p>生成证书以后，可以使用下面的命令，查看证书的细节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -L -f ssh_host_rsa_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，为证书设置权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> ssh_host_rsa_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ca-签发用户证书">CA 签发用户证书
&lt;/h3>&lt;p>下面，再用 CA 签发用户证书。这时需要用户的公钥，如果没有的话，客户端可以用下面的命令生成一对密钥：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -f ~/.ssh/user_key -b &lt;span class="m">4096&lt;/span> -t rsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会在&lt;code>~/.ssh&lt;/code>目录，生成&lt;code>user_key&lt;/code>（私钥）和&lt;code>user_key.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>然后，将用户公钥&lt;code>user_key.pub&lt;/code>，上传或复制到 CA 服务器。接下来，就可以使用 CA 的密钥&lt;code>user_ca&lt;/code>为用户公钥&lt;code>user_key.pub&lt;/code>签发用户证书：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -s user_ca -I user@example.com -n user -V +1d user_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会生成用户证书&lt;code>user_key-cert.pub&lt;/code>（用户公钥名字加后缀&lt;code>-cert&lt;/code>）。这个命令各个参数的含义如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：指定 CA 签发证书的密钥&lt;/li>
&lt;li>&lt;code>-I&lt;/code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。&lt;/li>
&lt;li>&lt;code>-n user&lt;/code>：指定用户名，表示证书仅对该用户名有效。如果有多个用户名，使用逗号分隔。用户以该用户名登录服务器时，SSH 通过这个值，分辨应该使用哪张证书，证明自己的身份，发给服务器。&lt;/li>
&lt;li>&lt;code>-V +1d&lt;/code>：指定证书的有效期，这里为1天，强制用户每天都申请一次证书，提高安全性。默认情况下，证书是永远有效的。&lt;/li>
&lt;li>&lt;code>user_key.pub&lt;/code>：用户公钥。&lt;/li>
&lt;/ul>
&lt;p>生成证书以后，可以使用下面的命令，查看证书的细节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -L -f user_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，为证书设置权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> user_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="服务器安装证书">服务器安装证书
&lt;/h3>&lt;p>CA 生成服务器证书&lt;code>ssh_host_rsa_key-cert.pub&lt;/code>以后，需要将该证书发回服务器，可以使用下面的&lt;code>scp&lt;/code>命令，将证书拷贝过去：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp ~/.ssh/ssh_host_rsa_key-cert.pub root@host.example.com:/etc/ssh/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，将下面一行添加到服务器配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码告诉 sshd，服务器证书是哪一个文件。&lt;/p>
&lt;p>重新启动 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo service sshd restart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="服务器安装-ca-公钥">服务器安装 CA 公钥
&lt;/h3>&lt;p>为了让服务器信任用户证书，必须将 CA 签发用户证书的公钥&lt;code>user_ca.pub&lt;/code>，拷贝到服务器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp ~/.ssh/user_ca.pub root@host.example.com:/etc/ssh/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令，将 CA 签发用户证书的公钥&lt;code>user_ca.pub&lt;/code>，拷贝到 SSH 服务器的&lt;code>/etc/ssh&lt;/code>目录。&lt;/p>
&lt;p>然后，将下面一行添加到服务器配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">TrustedUserCAKeys /etc/ssh/user_ca.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的做法是将&lt;code>user_ca.pub&lt;/code>加到&lt;code>/etc/ssh/sshd_config&lt;/code>，这会产生全局效果，即服务器的所有账户都会信任&lt;code>user_ca&lt;/code>签发的所有用户证书。&lt;/p>
&lt;p>另一种做法是将&lt;code>user_ca.pub&lt;/code>加到服务器某个账户的&lt;code>~/.ssh/authorized_keys&lt;/code>文件，只让该账户信任&lt;code>user_ca&lt;/code>签发的用户证书。具体方法是打开&lt;code>~/.ssh/authorized_keys&lt;/code>，追加一行，开头是&lt;code>@cert-authority principals=&amp;quot;...&amp;quot;&lt;/code>，然后后面加上&lt;code>user_ca.pub&lt;/code>的内容，大概是下面这个样子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">@cert-authority &lt;span class="nv">principals&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span> ssh-rsa AAAAB3Nz...XNRM1EX2gQ&lt;span class="o">==&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>principals=&amp;quot;user&amp;quot;&lt;/code>指定用户登录的服务器账户名，一般就是&lt;code>authorized_keys&lt;/code>文件所在的账户。&lt;/p>
&lt;p>重新启动 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo service sshd restart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>至此，SSH 服务器已配置为信任&lt;code>user_ca&lt;/code>签发的证书。&lt;/p>
&lt;h3 id="客户端安装证书">客户端安装证书
&lt;/h3>&lt;p>客户端安装用户证书很简单，就是从 CA 将用户证书&lt;code>user_key-cert.pub&lt;/code>复制到客户端，与用户的密钥&lt;code>user_key&lt;/code>保存在同一个目录即可。&lt;/p>
&lt;h3 id="客户端安装-ca-公钥">客户端安装 CA 公钥
&lt;/h3>&lt;p>为了让客户端信任服务器证书，必须将 CA 签发服务器证书的公钥&lt;code>host_ca.pub&lt;/code>，加到客户端的&lt;code>/etc/ssh/ssh_known_hosts&lt;/code>文件（全局级别）或者&lt;code>~/.ssh/known_hosts&lt;/code>文件（用户级别）。&lt;/p>
&lt;p>具体做法是打开&lt;code>ssh_known_hosts&lt;/code>或&lt;code>known_hosts&lt;/code>文件，追加一行，开头为&lt;code>@cert-authority *.example.com&lt;/code>，然后将&lt;code>host_ca.pub&lt;/code>文件的内容（即公钥）粘贴在后面，大概是下面这个样子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">@cert-authority *.example.com ssh-rsa AAAAB3Nz...XNRM1EX2gQ&lt;span class="o">==&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>*.example.com&lt;/code>是域名的模式匹配，表示只要服务器符合该模式的域名，且签发服务器证书的 CA 匹配后面给出的公钥，就都可以信任。如果没有域名限制，这里可以写成&lt;code>*&lt;/code>。如果有多个域名模式，可以使用逗号分隔；如果服务器没有域名，可以用主机名（比如&lt;code>host1,host2,host3&lt;/code>）或者 IP 地址（比如&lt;code>11.12.13.14,21.22.23.24&lt;/code>）。&lt;/p>
&lt;p>然后，就可以使用证书，登录远程服务器了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -i ~/.ssh/user_key user@host.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令的&lt;code>-i&lt;/code>参数用来指定用户的密钥。如果证书与密钥在同一个目录，则连接服务器时将自动使用该证书。&lt;/p>
&lt;h3 id="废除证书">废除证书
&lt;/h3>&lt;p>废除证书的操作，分成用户证书的废除和服务器证书的废除两种。&lt;/p>
&lt;p>服务器证书的废除，用户需要在&lt;code>known_hosts&lt;/code>文件里面，修改或删除对应的&lt;code>@cert-authority&lt;/code>命令的那一行。&lt;/p>
&lt;p>用户证书的废除，需要在服务器新建一个&lt;code>/etc/ssh/revoked_keys&lt;/code>文件，然后在配置文件&lt;code>sshd_config&lt;/code>添加一行，内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">RevokedKeys /etc/ssh/revoked_keys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>revoked_keys&lt;/code>文件保存不再信任的用户公钥，由下面的命令生成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -kf /etc/ssh/revoked_keys -z &lt;span class="m">1&lt;/span> ~/.ssh/user1_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-z&lt;/code>参数用来指定用户公钥保存在&lt;code>revoked_keys&lt;/code>文件的哪一行，这个例子是保存在第1行。&lt;/p>
&lt;p>如果以后需要废除其他的用户公钥，可以用下面的命令保存在第2行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -ukf /etc/ssh/revoked_keys -z &lt;span class="m">2&lt;/span> ~/.ssh/user2_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="参考链接">参考链接
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://smallstep.com/blog/ssh-emergency-access/" target="_blank" rel="noopener"
>SSH Emergency Access&lt;/a>, Carl Tashian&lt;/li>
&lt;li>&lt;a class="link" href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-using_openssh_certificate_authentication" target="_blank" rel="noopener"
>Using OpenSSH Certificate Authentication&lt;/a>, Red Hat Enterprise Linux Deployment Guide&lt;/li>
&lt;li>&lt;a class="link" href="https://gravitational.com/blog/how-to-ssh-properly/" target="_blank" rel="noopener"
>How to SSH Properly&lt;/a>, Gus Luxton&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="scp-命令">scp 命令
&lt;/h2>&lt;p>&lt;code>scp&lt;/code>是 SSH 提供的一个&lt;strong>客户端程序&lt;/strong>，用来在两台主机之间加密传送文件（即复制文件）。&lt;/p>
&lt;h3 id="简介-1">简介
&lt;/h3>&lt;p>&lt;code>scp&lt;/code>是 secure copy 的缩写，相当于&lt;code>cp&lt;/code>命令 + SSH。它的底层是 SSH 协议，默认端口是22，相当于先使用&lt;code>ssh&lt;/code>命令登录远程主机，然后再执行拷贝操作。&lt;/p>
&lt;p>&lt;code>scp&lt;/code>主要用于以下三种复制操作：&lt;/p>
&lt;ul>
&lt;li>本地复制到远程。&lt;/li>
&lt;li>远程复制到本地。&lt;/li>
&lt;li>两个远程系统之间的复制。&lt;/li>
&lt;/ul>
&lt;p>使用&lt;code>scp&lt;/code>传输数据时，文件和密码都是加密的，不会泄漏敏感信息。&lt;/p>
&lt;h3 id="基本语法">基本语法
&lt;/h3>&lt;p>&lt;code>scp&lt;/code>的语法类似&lt;code>cp&lt;/code>的语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>source&lt;/code>是文件当前的位置，&lt;code>destination&lt;/code>是文件所要复制到的位置。它们都可以包含用户名和主机名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp user@host:foo.txt bar.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将远程主机（&lt;code>user@host&lt;/code>）用户主目录下的&lt;code>foo.txt&lt;/code>，复制为本机当前目录的&lt;code>bar.txt&lt;/code>。可以看到，主机与文件之间要使用冒号（&lt;code>:&lt;/code>）分隔。&lt;/p>
&lt;p>&lt;code>scp&lt;/code>会先用 SSH 登录到远程主机，然后在加密连接之中复制文件。客户端发起连接后，会提示用户输入密码，这部分是跟 SSH 的用法一致的。&lt;/p>
&lt;p>用户名和主机名都是可以省略的。用户名的默认值是本机的当前用户名，主机名默认为当前主机。注意，&lt;code>scp&lt;/code>会使用 SSH 客户端的配置文件&lt;code>.ssh/config&lt;/code>，如果配置文件里面定义了主机的别名，这里也可以使用别名连接。&lt;/p>
&lt;p>&lt;code>scp&lt;/code>支持一次复制多个文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp source1 source2 destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会将&lt;code>source1&lt;/code>和&lt;code>source2&lt;/code>两个文件，复制到&lt;code>destination&lt;/code>。&lt;/p>
&lt;p>注意，如果所要复制的文件，在目标位置已经存在同名文件，&lt;code>scp&lt;/code>会在没有警告的情况下覆盖同名文件。&lt;/p>
&lt;h3 id="用法示例">用法示例
&lt;/h3>&lt;p>&lt;strong>（1）本地文件复制到远程&lt;/strong>&lt;/p>
&lt;p>复制本机文件到远程系统的用法如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 语法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp SourceFile user@host:directory/TargetFile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 示例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp file.txt remote_username@10.10.0.2:/remote/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是复制整个目录的例子:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将本机的 documents 目录拷贝到远程主机，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 会在远程主机创建 documents 目录: 远程目录存在，则复制，不存在则改名。注意只能一级目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r documents username@server_ip:/path_to_remote_directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将本机整个目录拷贝到远程目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r localmachine/path_to_the_directory username@server_ip:/path_to_remote_directory/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将本机目录下的所有内容拷贝到远程目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r localmachine/path_to_the_directory/* username@server_ip:/path_to_remote_directory/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（2）远程文件复制到本地&lt;/strong>&lt;/p>
&lt;p>从远程主机复制文件到本地的用法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 语法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp user@host:directory/SourceFile TargetFile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 示例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp remote_username@10.10.0.2:/remote/file.txt /local/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是复制整个目录的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 拷贝一个远程目录到本机目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r username@server_ip:/path_to_remote_directory local-machine/path_to_the_directory/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 拷贝远程目录下的所有内容，到本机目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r username@server_ip:/path_to_remote_directory/* local-machine/path_to_the_directory/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r user@host:directory/SourceFolder TargetFolder
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）两个远程系统之间的复制&lt;/strong>&lt;/p>
&lt;p>本机发出指令，从远程主机 A 拷贝到远程主机 B 的用法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 语法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp user@host1:directory/SourceFile user@host2:directory/SourceFile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 示例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp user1@host1.com:/files/file.txt user2@host2.com:/files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>系统将提示你输入两个远程帐户的密码。数据将直接从一个远程主机传输到另一个远程主机。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：远程目录存在，则复制，不存在则改名。&lt;strong>注意只能改一级目录&lt;/strong>。&lt;/p>
&lt;h3 id="配置项-1">配置项
&lt;/h3>&lt;p>&lt;strong>（1）&lt;code>-c&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-c&lt;/code>参数用来指定文件拷贝数据传输的加密算法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -c blowfish some_file your_username@remotehost.edu:~
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码指定加密算法为&lt;code>blowfish&lt;/code>。&lt;/p>
&lt;p>&lt;strong>（2）&lt;code>-C&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-C&lt;/code>参数表示是否在传输时压缩文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -c blowfish -C local_file your_username@remotehost.edu:~
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）&lt;code>-F&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-F&lt;/code>参数用来指定 ssh_config 文件，供 ssh 使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -F /home/pungki/proxy_ssh_config Label.pdf root@172.20.10.8:/root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（4）&lt;code>-i&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-i&lt;/code>参数用来指定密钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -vCq -i private_key.pem ~/test.txt root@192.168.1.3:/some/path/test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（5）&lt;code>-l&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-l&lt;/code>参数用来限制传输数据的带宽速率，单位是 Kbit/sec。对于多人分享的带宽，这个参数可以留出一部分带宽供其他人使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -l &lt;span class="m">80&lt;/span> yourusername@yourserver:/home/yourusername/* .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>scp&lt;/code>命令占用的带宽限制为每秒 80K 比特位，即每秒 10K 字节。&lt;/p>
&lt;p>&lt;strong>（6）&lt;code>-p&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数用来保留修改时间（modification time）、访问时间（access time）、文件状态（mode）等原始文件的信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -p ~/test.txt root@192.168.1.3:/some/path/test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（7）&lt;code>-P&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-P&lt;/code>参数用来指定远程主机的 SSH 端口。如果远程主机使用默认端口22，可以不用指定，否则需要用&lt;code>-P&lt;/code>参数在命令中指定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -P &lt;span class="m">2222&lt;/span> user@host:directory/SourceFile TargetFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（8）&lt;code>-q&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-q&lt;/code>参数用来关闭显示拷贝的进度条。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -q Label.pdf mrarianto@202.x.x.x:.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（9）&lt;code>-r&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-r&lt;/code>参数表示是否以递归方式复制目录。&lt;/p>
&lt;p>&lt;strong>（10）&lt;code>-v&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-v&lt;/code>参数用来显示详细的输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -v ~/test.txt root@192.168.1.3:/root/help2356.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="sftp-命令">sftp 命令
&lt;/h2>&lt;p>FTP（File Transfer Protocol，文件传输协议），提供文件的上传和下载功能。&lt;code>sftp&lt;/code>是基于SSH协议的文件传输协议，提供了加密和认证功能。&lt;/p>
&lt;p>&lt;code>sftp&lt;/code>是 SSH 提供的一个客户端应用程序（&lt;strong>意味着认证方式通用&lt;/strong>），主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，&lt;code>sftp&lt;/code>就相当于将 FTP 放入了 SSH。&lt;/p>
&lt;p>下面的命令连接 FTP 主机：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sftp username@hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行上面的命令，会要求输入 FTP 的密码。密码验证成功以后，就会出现 FTP 的提示符&lt;code>sftp&amp;gt; &lt;/code>，下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sftp USER@penguin.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER@penguin.example.com&lt;span class="err">&amp;#39;&lt;/span>s password:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connected to penguin.example.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sftp&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>FTP 的提示符下面，就可以输入各种 FTP 命令了，这部分完全跟传统的 FTP 用法完全一样：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ls [directory]&lt;/code>：列出一个远程目录的内容。如果没有指定目标目录，则默认列出当前目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cd directory&lt;/code>：从当前目录改到指定目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mkdir directory&lt;/code>：创建一个远程目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>rmdir path&lt;/code>：删除一个远程目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>put localfile [remotefile]&lt;/code>：本地文件传输到远程主机。&lt;/p>
&lt;ul>
&lt;li>需要注意的是远程主机的工作目录是当前用户的主目录。本地主机是当前目录。
&lt;ul>
&lt;li>所以可以相互省略工作目录&lt;/li>
&lt;li>&lt;code>put [filename]&lt;/code>：上传文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>get remotefile [localfile]&lt;/code>：远程文件传输到本地。&lt;/p>
&lt;ul>
&lt;li>这里可以省略本地主机当前目录，默认为本地主机当前目录。&lt;/li>
&lt;li>目录加&lt;code>-r&lt;/code>选项。&lt;/li>
&lt;li>&lt;code>get [filename]&lt;/code>：下载文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bye&lt;/code>：退出 sftp。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>quit&lt;/code>：退出 sftp。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>exit&lt;/code>：退出 sftp。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>help&lt;/code>：显示帮助信息。&lt;/p>
&lt;ul>
&lt;li>更多命令基本与Linux通用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="rsync-命令">rsync 命令
&lt;/h2>&lt;h3 id="简介-2">简介
&lt;/h3>&lt;p>rsync 是一个常用的 Linux 应用程序，&lt;strong>用于文件同步&lt;/strong>。&lt;/p>
&lt;p>它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代&lt;code>cp&lt;/code>和&lt;code>mv&lt;/code>命令。与&lt;code>scp&lt;/code>类似。&lt;/p>
&lt;p>它名称里面的&lt;code>r&lt;/code>指的是 remote，rsync 其实就是“远程同步”（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，rsync 的最大特点是会检查发送方和接收方已有的文件，&lt;strong>仅传输有变动的部分&lt;/strong>（默认规则是文件大小或修改时间有变动）。&lt;/p>
&lt;p>虽然 rsync 不是 SSH 工具集的一部分，但因为也涉及到远程操作，所以放在这里一起介绍。&lt;/p>
&lt;p>&lt;code>rsync&lt;/code>具有以下主要特性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>增量传输&lt;/strong>：只传输源和目标之间的差异，而不是整个文件或目录。&lt;/li>
&lt;li>&lt;strong>快速&lt;/strong>：通过采用一种叫做“快速检查算法”（rolling checksum）的方法，它可以快速找到文件的差异。&lt;/li>
&lt;li>&lt;strong>灵活&lt;/strong>：支持各种不同的传输模式，包括本地到本地、本地到远程、远程到本地。&lt;/li>
&lt;li>&lt;strong>安全&lt;/strong>：可以通过SSH协议传输数据，保证数据的安全性。&lt;/li>
&lt;li>&lt;strong>支持软链接、硬链接和设备文件&lt;/strong>：在同步过程中，能够保留这些文件的属性。&lt;/li>
&lt;li>&lt;strong>可断点续传&lt;/strong>：在传输中断后，能够从中断点继续。&lt;/li>
&lt;li>&lt;strong>文件权限和所有权保留&lt;/strong>：能够保留文件的权限、所有者和时间戳信息。&lt;/li>
&lt;li>&lt;strong>广泛的选项和参数&lt;/strong>：提供了丰富的选项和参数来满足各种需求。&lt;/li>
&lt;/ul>
&lt;h3 id="安装">安装
&lt;/h3>&lt;p>如果本机或者远程计算机没有安装 rsync，可以用下面的命令安装:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo yum install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS 8及之后的版本(包括RHEL 8)/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Arch Linux/Windows msys2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo pacman -S rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># macOS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ brew install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># FreeBSD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo pkg install rsync
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>，传输的双方都必须安装 rsync。&lt;/p>
&lt;h3 id="基本用法-3">基本用法
&lt;/h3>&lt;p>&lt;code>rsync&lt;/code>的基本语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">rsync &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span> &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>source&lt;/strong>：源文件或目录的路径。&lt;/p>
&lt;p>&lt;strong>destination&lt;/strong>：目标文件或目录的路径。&lt;/p>
&lt;p>远程主机在路径前加&lt;code>usname@hostname:&lt;/code>，与&lt;code>scp&lt;/code>一样。&lt;/p>
&lt;p>rsync 可以用于本地计算机的两个目录之间的同步。下面就用&lt;strong>本地同步举例&lt;/strong>，顺便讲解 rsync 几个主要参数的用法:&lt;/p>
&lt;p>&lt;code>-v&lt;/code>：显示详细的输出信息。&lt;/p>
&lt;p>&lt;code>-r&lt;/code>参数&lt;/p>
&lt;p>本机使用 rsync 命令时，可以作为&lt;code>cp&lt;/code>和&lt;code>mv&lt;/code>命令的替代方法，将源目录拷贝到目标目录:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -r &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-r&lt;/code>表示递归，即包含子目录。注意，&lt;code>-r&lt;/code>是必须的，否则 rsync 运行不会成功。&lt;code>source&lt;/code>目录表示源目录，&lt;code>destination&lt;/code>表示目标目录。上面命令执行以后，目标目录下就会出现&lt;code>destination/source&lt;/code>这个子目录。&lt;/p>
&lt;p>如果有多个文件或目录需要同步，可以写成下面这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -r source1 source2 destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>source1&lt;/code>、&lt;code>source2&lt;/code>都会被同步到&lt;code>destination&lt;/code>目录。&lt;/p>
&lt;p>&lt;code>-a&lt;/code>参数&lt;/p>
&lt;p>&lt;code>-a&lt;/code>参数可以替代&lt;code>-r&lt;/code>，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以&lt;code>-a&lt;/code>比&lt;code>-r&lt;/code>更有用。下面的用法才是常见的写法:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -a &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目标目录&lt;code>destination&lt;/code>如果不存在，rsync 会自动创建。执行上面的命令后，源目录&lt;code>source&lt;/code>被完整地复制到了目标目录&lt;code>destination&lt;/code>下面，即形成了&lt;code>destination/source&lt;/code>的目录结构。&lt;/p>
&lt;p>如果只想同步源目录&lt;code>source&lt;/code>里面的内容到目标目录&lt;code>destination&lt;/code>，则需要在源目录后面加上斜杠:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -a source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令执行后，&lt;code>source&lt;/code>目录里面的内容，就都被复制到了&lt;code>destination&lt;/code>目录里面，并不会在&lt;code>destination&lt;/code>下面创建一个&lt;code>source&lt;/code>子目录。&lt;/p>
&lt;p>&lt;code>-n&lt;/code>参数&lt;/p>
&lt;p>如果不确定 rsync 执行后会产生什么结果，可以先用&lt;code>-n&lt;/code>或&lt;code>--dry-run&lt;/code>参数模拟执行的结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -anv source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-n&lt;/code>参数模拟命令执行的结果，并不真的执行命令。&lt;code>-v&lt;/code>参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。&lt;/p>
&lt;p>&lt;code>--delete&lt;/code>参数&lt;/p>
&lt;p>默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用&lt;code>--delete&lt;/code>参数，这将删除只存在于目标目录、不存在于源目录的文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --delete source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>--delete&lt;/code>参数会使得&lt;code>destination&lt;/code>成为&lt;code>source&lt;/code>的一个镜像。&lt;/p>
&lt;h3 id="排除文件">排除文件
&lt;/h3>&lt;p>&lt;code>--exclude&lt;/code>参数&lt;/p>
&lt;p>有时，我们希望同步时排除某些文件或目录，这时可以用&lt;code>--exclude&lt;/code>参数指定排除模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;*.txt&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude &lt;span class="s1">&amp;#39;*.txt&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令排除了所有 TXT 文件。&lt;/p>
&lt;p>注意，rsync 会同步以“点”开头的隐藏文件，如果要排除隐藏文件，可以这样写&lt;code>--exclude=&amp;quot;.*&amp;quot;&lt;/code>。&lt;/p>
&lt;p>如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude &lt;span class="s1">&amp;#39;dir1/*&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>多个排除模式，可以用多个&lt;code>--exclude&lt;/code>参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude &lt;span class="s1">&amp;#39;file1.txt&amp;#39;&lt;/span> --exclude &lt;span class="s1">&amp;#39;dir1/*&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个&lt;code>--exclude&lt;/code>参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude&lt;span class="o">={&lt;/span>&lt;span class="s1">&amp;#39;file1.txt&amp;#39;&lt;/span>,&lt;span class="s1">&amp;#39;dir1/*&amp;#39;&lt;/span>&lt;span class="o">}&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用&lt;code>--exclude-from&lt;/code>参数指定这个文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude-from&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;exclude-file.txt&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>--include&lt;/code>参数&lt;/p>
&lt;p>&lt;code>--include&lt;/code>参数用来指定必须同步的文件模式，往往与&lt;code>--exclude&lt;/code>结合使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --include&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*.txt&amp;#34;&lt;/span> --exclude&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定同步时，排除所有文件，但是会包括 TXT 文件。&lt;/p>
&lt;h3 id="远程同步">远程同步
&lt;/h3>&lt;h4 id="ssh-协议">SSH 协议
&lt;/h4>&lt;p>rsync 除了支持本地两个目录之间的同步，也支持远程同步。它可以将本地内容，同步到远程服务器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av source/ username@remote_host:destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以将远程内容同步到本地：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av username@remote_host:source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>rsync 默认使用 SSH 进行远程登录和数据传输。&lt;/p>
&lt;p>由于早期 rsync 不使用 SSH 协议，需要用&lt;code>-e&lt;/code>参数指定协议，后来才改的。所以，下面&lt;code>-e ssh&lt;/code>可以省略：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av -e ssh source/ user@remote_host:/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是，如果 ssh 命令有附加的参数，则必须使用&lt;code>-e&lt;/code>参数指定所要执行的 SSH 命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av -e &lt;span class="s1">&amp;#39;ssh -p 2234&amp;#39;&lt;/span> source/ user@remote_host:/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-e&lt;/code>参数指定 SSH 使用2234端口。&lt;/p>
&lt;h4 id="rsync-协议">rsync 协议
&lt;/h4>&lt;p>除了使用 SSH，如果另一台服务器安装并运行了 rsync 守护程序，则也可以用&lt;code>rsync://&lt;/code>协议（默认端口873）进行传输。具体写法是服务器与目标目录之间使用双冒号分隔&lt;code>::&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av source/ 192.168.122.32::module/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，上面地址中的&lt;code>module&lt;/code>并不是实际路径名，而是 rsync 守护程序指定的一个资源名，由管理员分配。&lt;/p>
&lt;p>如果想知道 rsync 守护程序分配的所有 module 列表，可以执行下面命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync rsync://192.168.122.32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>rsync 协议除了使用双冒号，也可以直接用&lt;code>rsync://&lt;/code>协议指定地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av source/ rsync://192.168.122.32/module/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="增量备份">增量备份
&lt;/h3>&lt;p>rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。&lt;/p>
&lt;p>除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。&lt;/p>
&lt;p>具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。&lt;/p>
&lt;p>&lt;code>--link-dest&lt;/code>参数用来指定同步时的基准目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -a --delete --link-dest /compare/path /source/path /target/path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>--link-dest&lt;/code>参数指定基准目录&lt;code>/compare/path&lt;/code>，然后源目录&lt;code>/source/path&lt;/code>跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录&lt;code>/target/path&lt;/code>。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。&lt;/p>
&lt;p>下面是一个脚本示例，备份用户的主目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A script to perform incremental backups using rsync&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o errexit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o nounset
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o pipefail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">SOURCE_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">HOME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/mnt/data/backups&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">DATETIME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>date &lt;span class="s1">&amp;#39;+%Y-%m-%d_%H:%M:%S&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">BACKUP_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">DATETIME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rsync -av --delete &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">SOURCE_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --link-dest &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --exclude&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;.cache&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -rf &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln -s &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面脚本中，每一次同步都会生成一个新目录&lt;code>${BACKUP_DIR}/${DATETIME}&lt;/code>，并将软链接&lt;code>${BACKUP_DIR}/latest&lt;/code>指向这个目录。下一次备份时，就将&lt;code>${BACKUP_DIR}/latest&lt;/code>作为基准目录，生成新的备份目录。最后，再将软链接&lt;code>${BACKUP_DIR}/latest&lt;/code>指向新的备份目录。&lt;/p>
&lt;h3 id="配置项-2">配置项
&lt;/h3>&lt;p>&lt;code>-a&lt;/code>、&lt;code>--archive&lt;/code>参数表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等，并且软链接也会同步过去。&lt;/p>
&lt;p>&lt;code>--append&lt;/code>参数指定文件接着上次中断的地方，继续传输。&lt;/p>
&lt;p>&lt;code>--append-verify&lt;/code>参数跟&lt;code>--append&lt;/code>参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。&lt;/p>
&lt;p>&lt;code>-b&lt;/code>、&lt;code>--backup&lt;/code>参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由&lt;code>--suffix&lt;/code>参数指定的文件后缀名，默认是&lt;code>~&lt;/code>。&lt;/p>
&lt;p>&lt;code>--backup-dir&lt;/code>参数指定文件备份时存放的目录，比如&lt;code>--backup-dir=/path/to/backups&lt;/code>。&lt;/p>
&lt;p>&lt;code>--bwlimit&lt;/code>参数指定带宽限制，默认单位是 KB/s，比如&lt;code>--bwlimit=100&lt;/code>。&lt;/p>
&lt;p>&lt;code>-c&lt;/code>、&lt;code>--checksum&lt;/code>参数改变&lt;code>rsync&lt;/code>的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。&lt;/p>
&lt;p>&lt;code>--delete&lt;/code>参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。&lt;/p>
&lt;p>&lt;code>-e&lt;/code>参数指定使用 SSH 协议传输数据。&lt;/p>
&lt;p>&lt;code>--exclude&lt;/code>参数指定排除不进行同步的文件，比如&lt;code>--exclude=&amp;quot;*.iso&amp;quot;&lt;/code>。&lt;/p>
&lt;p>&lt;code>--exclude-from&lt;/code>参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行。&lt;/p>
&lt;p>&lt;code>--existing&lt;/code>、&lt;code>--ignore-non-existing&lt;/code>参数表示不同步目标目录中不存在的文件和目录。&lt;/p>
&lt;p>&lt;code>-h&lt;/code>参数表示以人类可读的格式输出。&lt;/p>
&lt;p>&lt;code>-h&lt;/code>、&lt;code>--help&lt;/code>参数返回帮助信息。&lt;/p>
&lt;p>&lt;code>-i&lt;/code>参数表示输出源目录与目标目录之间文件差异的详细情况。&lt;/p>
&lt;p>&lt;code>--ignore-existing&lt;/code>参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。&lt;/p>
&lt;p>&lt;code>--include&lt;/code>参数指定同步时要包括的文件，一般与&lt;code>--exclude&lt;/code>结合使用。&lt;/p>
&lt;p>&lt;code>--link-dest&lt;/code>参数指定增量备份的基准目录。&lt;/p>
&lt;p>&lt;code>-m&lt;/code>参数指定不同步空目录。&lt;/p>
&lt;p>&lt;code>--max-size&lt;/code>参数设置传输的最大文件的大小限制，比如不超过200KB（&lt;code>--max-size='200k'&lt;/code>）。&lt;/p>
&lt;p>&lt;code>--min-size&lt;/code>参数设置传输的最小文件的大小限制，比如不小于10KB（&lt;code>--min-size=10k&lt;/code>）。&lt;/p>
&lt;p>&lt;code>-n&lt;/code>参数或&lt;code>--dry-run&lt;/code>参数模拟将要执行的操作，而并不真的执行。配合&lt;code>-v&lt;/code>参数使用，可以看到哪些内容会被同步过去。&lt;/p>
&lt;p>&lt;code>-P&lt;/code>参数是&lt;code>--progress&lt;/code>和&lt;code>--partial&lt;/code>这两个参数的结合。&lt;/p>
&lt;p>&lt;code>--partial&lt;/code>参数允许恢复中断的传输。不使用该参数时，&lt;code>rsync&lt;/code>会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与&lt;code>--append&lt;/code>或&lt;code>--append-verify&lt;/code>配合使用。&lt;/p>
&lt;p>&lt;code>--partial-dir&lt;/code>参数指定将传输到一半的文件保存到一个临时目录，比如&lt;code>--partial-dir=.rsync-partial&lt;/code>。一般需要与&lt;code>--append&lt;/code>或&lt;code>--append-verify&lt;/code>配合使用。&lt;/p>
&lt;p>&lt;code>--progress&lt;/code>参数表示显示进展。&lt;/p>
&lt;p>&lt;code>-r&lt;/code>参数表示递归，即包含子目录。&lt;/p>
&lt;p>&lt;code>--remove-source-files&lt;/code>参数表示传输成功后，删除发送方的文件。&lt;/p>
&lt;p>&lt;code>--size-only&lt;/code>参数表示只同步大小有变化的文件，不考虑文件修改时间的差异。&lt;/p>
&lt;p>&lt;code>--suffix&lt;/code>参数指定文件名备份时，对文件名添加的后缀，默认是&lt;code>~&lt;/code>。&lt;/p>
&lt;p>&lt;code>-u&lt;/code>、&lt;code>--update&lt;/code>参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件。&lt;/p>
&lt;p>&lt;code>-v&lt;/code>参数表示输出细节。&lt;code>-vv&lt;/code>表示输出更详细的信息，&lt;code>-vvv&lt;/code>表示输出最详细的信息。&lt;/p>
&lt;p>&lt;code>--version&lt;/code>参数返回 rsync 的版本。&lt;/p>
&lt;p>&lt;code>-z&lt;/code>参数指定同步时压缩数据。&lt;/p>
&lt;h3 id="参考链接-1">参考链接
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps" target="_blank" rel="noopener"
>How To Use Rsync to Sync Local and Remote Directories on a VPS&lt;/a>, Justin Ellingwood&lt;/li>
&lt;li>&lt;a class="link" href="https://www.howtoforge.com/mirroring_with_rsync" target="_blank" rel="noopener"
>Mirror Your Web Site With rsync&lt;/a>, Falko Timme&lt;/li>
&lt;li>&lt;a class="link" href="https://linuxconfig.org/examples-on-how-to-use-rsync-for-local-and-remote-data-backups-and-synchonization" target="_blank" rel="noopener"
>Examples on how to use Rsync&lt;/a>, Egidio Docile&lt;/li>
&lt;li>&lt;a class="link" href="https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux" target="_blank" rel="noopener"
>How to create incremental backups using rsync on Linux&lt;/a>, Egidio Docile&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="ssh-服务器">SSH 服务器
&lt;/h2>&lt;h3 id="简介-3">简介
&lt;/h3>&lt;p>SSH 的架构是服务器/客户端模式，两端运行的软件是不一样的。OpenSSH 的客户端软件是 ssh，服务器软件是 sshd。本章介绍 sshd 的各种知识。&lt;/p>
&lt;p>如果没有安装 sshd，可以用下面的命令安装:&lt;/p>
&lt;p>&lt;strong>在Linux上安装SSH服务端&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install openssh-server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo yum install openssh-server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install openssh-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>在macOS上安装SSH服务端&lt;/strong>&lt;/p>
&lt;p>macOS内置了OpenSSH服务端，但默认情况下它是关闭的。可以通过以下步骤启用：&lt;/p>
&lt;ol>
&lt;li>打开“系统偏好设置”。&lt;/li>
&lt;li>进入“共享”设置。&lt;/li>
&lt;li>勾选“远程登录”选项。&lt;/li>
&lt;li>选择允许哪些用户可以通过SSH登录。&lt;/li>
&lt;/ol>
&lt;p>之后，SSH服务端将开始运行，你可以使用SSH客户端连接到你的macOS机器。&lt;/p>
&lt;p>&lt;strong>在Windows上安装SSH服务端&lt;/strong>&lt;/p>
&lt;p>从Windows 10版本1809开始，Windows内置了OpenSSH Server。可以通过以下步骤启用：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开“设置” &amp;gt; “应用” &amp;gt; “可选功能”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向下滚动并点击“添加功能”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在列表中找到并安装“OpenSSH Server”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完成后，打开PowerShell并启动SSH服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Start-Service&lt;/span> &lt;span class="n">sshd&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使SSH服务在开机时自动启动：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-Service&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">sshd&lt;/span> &lt;span class="n">-StartupType&lt;/span> &lt;span class="s1">&amp;#39;Automatic&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果需要检查服务状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Get-Service&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">sshd&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>一般来说，sshd 安装后会跟着系统一起启动。如果当前 sshd 没有启动，可以用下面的命令启动。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令运行后，如果提示“sshd re-exec requires execution with an absolute path”，就需要使用绝对路径来启动。这是为了防止有人出于各种目的，放置同名软件在&lt;code>$PATH&lt;/code>变量指向的目录中，代替真正的 sshd:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Centos、Ubuntu、OS X&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ /usr/sbin/sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令运行以后，sshd 自动进入后台，所以命令后面不需要加上&lt;code>&amp;amp;&lt;/code>。&lt;/p>
&lt;p>除了直接运行可执行文件，也可以通过 Systemd 启动 sshd:&lt;/p>
&lt;p>启动SSH服务并使其在开机时自动启动：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>检查SSH服务的状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重启SSH服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-配置文件">sshd 配置文件
&lt;/h3>&lt;p>sshd 的配置文件在&lt;code>/etc/ssh&lt;/code>目录，主配置文件是&lt;code>sshd_config&lt;/code>，此外还有一些安装时生成的密钥：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/ssh/sshd_config&lt;/code>：配置文件&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_ecdsa_key&lt;/code>：ECDSA 私钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_ecdsa_key.pub&lt;/code>：ECDSA 公钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_key&lt;/code>：用于 SSH 1 协议版本的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_key.pub&lt;/code>：用于 SSH 1 协议版本的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_rsa_key&lt;/code>：用于 SSH 2 协议版本的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_rsa_key.pub&lt;/code>：用于 SSH 2 协议版本的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>/etc/pam.d/sshd&lt;/code>：PAM 配置文件。&lt;/li>
&lt;/ul>
&lt;p>注意，如果重装 sshd，上面这些密钥都会重新生成，导致客户端重新连接 ssh 服务器时，会跳出警告，拒绝连接。为了避免这种情况，可以在重装 sshd 时，先备份&lt;code>/etc/ssh&lt;/code>目录，重装后再恢复这个目录。&lt;/p>
&lt;p>配置文件&lt;code>sshd_config&lt;/code>的格式是，每个命令占据一行。每行都是配置项和对应的值，配置项的大小写不敏感，与值之间使用空格分隔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的配置命令指定，配置项&lt;code>Port&lt;/code>的值是&lt;code>2034&lt;/code>。&lt;code>Port&lt;/code>写成&lt;code>port&lt;/code>也可。&lt;/p>
&lt;p>配置文件还有另一种格式，就是配置项与值之间有一个等号，等号前后的空格可选。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置文件里面，&lt;code>#&lt;/code>开头的行表示注释。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 这是一行注释&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，注释只能放在一行的开头，不能放在一行的结尾。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">2034&lt;/span> &lt;span class="c1"># 此处不允许注释&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的写法是错误的。&lt;/p>
&lt;p>另外，空行等同于注释。&lt;/p>
&lt;p>sshd 启动时会自动读取默认的配置文件。如果希望使用其他的配置文件，可以用 sshd 命令的&lt;code>-f&lt;/code>参数指定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -f /usr/local/ssh/my_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令指定 sshd 使用另一个配置文件&lt;code>my_config&lt;/code>。&lt;/p>
&lt;p>修改配置文件以后，可以用 sshd 命令的&lt;code>-t&lt;/code>（test）检查有没有语法错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置文件修改以后，并不会自动生效，必须重新启动 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-密钥">sshd 密钥
&lt;/h3>&lt;p>sshd 有自己的一对或多对密钥。&lt;strong>它使用密钥向客户端证明自己的身份&lt;/strong>。所有密钥都是公钥和私钥成对出现，公钥的文件名一般是私钥文件名加上后缀&lt;code>.pub&lt;/code>。&lt;/p>
&lt;p>DSA 格式的密钥文件默认为&lt;code>/etc/ssh/ssh_host_dsa_key&lt;/code>（公钥为&lt;code>ssh_host_dsa_key.pub&lt;/code>），RSA 格式的密钥为&lt;code>/etc/ssh/ssh_host_rsa_key&lt;/code>（公钥为&lt;code>ssh_host_rsa_key.pub&lt;/code>）。如果需要支持 SSH 1 协议，则必须有密钥&lt;code>/etc/ssh/ssh_host_key&lt;/code>。&lt;/p>
&lt;p>如果密钥不是默认文件，那么可以通过配置文件&lt;code>sshd_config&lt;/code>的&lt;code>HostKey&lt;/code>配置项指定。默认密钥的&lt;code>HostKey&lt;/code>设置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey for protocol version 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey /etc/ssh/ssh_host_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKeys for protocol version 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey /etc/ssh/ssh_host_rsa_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey /etc/ssh/ssh_host_dsa_key&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令前面的&lt;code>#&lt;/code>表示这些行都是注释，因为这是默认值，有没有这几行都一样。&lt;/p>
&lt;p>如果要修改密钥，就要去掉行首的&lt;code>#&lt;/code>，指定其他密钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">HostKey /usr/local/ssh/my_dsa_key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HostKey /usr/local/ssh/my_rsa_key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HostKey /usr/local/ssh/my_old_ssh1_key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-配置项">sshd 配置项
&lt;/h3>&lt;p>以下是&lt;code>/etc/ssh/sshd_config&lt;/code>文件里面的配置项：&lt;/p>
&lt;p>&lt;strong>AcceptEnv&lt;/strong>&lt;/p>
&lt;p>&lt;code>AcceptEnv&lt;/code>指定允许接受客户端通过&lt;code>SendEnv&lt;/code>命令发来的哪些环境变量，即允许客户端设置服务器的环境变量清单，变量名之间使用空格分隔（&lt;code>AcceptEnv PATH TERM&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>AllowGroups&lt;/strong>&lt;/p>
&lt;p>&lt;code>AllowGroups&lt;/code>指定允许登录的用户组（&lt;code>AllowGroups groupName&lt;/code>，多个组之间用空格分隔。如果不使用该项，则允许所有用户组登录。&lt;/p>
&lt;p>&lt;strong>AllowUsers&lt;/strong>&lt;/p>
&lt;p>&lt;code>AllowUsers&lt;/code>指定允许登录的用户，用户名之间使用空格分隔（&lt;code>AllowUsers user1 user2&lt;/code>），也可以使用多行&lt;code>AllowUsers&lt;/code>命令指定，用户名支持使用通配符。如果不使用该项，则允许所有用户登录。该项也可以使用&lt;code>用户名@域名&lt;/code>的格式（比如&lt;code>AllowUsers jones@example.com&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>AllowTcpForwarding&lt;/strong>&lt;/p>
&lt;p>&lt;code>AllowTcpForwarding&lt;/code>指定是否允许端口转发，默认值为&lt;code>yes&lt;/code>（&lt;code>AllowTcpForwarding yes&lt;/code>），&lt;code>local&lt;/code>表示只允许本地端口转发，&lt;code>remote&lt;/code>表示只允许远程端口转发。&lt;/p>
&lt;p>&lt;strong>AuthorizedKeysFile&lt;/strong>&lt;/p>
&lt;p>&lt;code>AuthorizedKeysFile&lt;/code>指定储存用户公钥的目录，默认是用户主目录的&lt;code>ssh/authorized_keys&lt;/code>目录（&lt;code>AuthorizedKeysFile .ssh/authorized_keys&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>Banner&lt;/strong>&lt;/p>
&lt;p>&lt;code>Banner&lt;/code>指定用户登录后，sshd 向其展示的信息文件（&lt;code>Banner /usr/local/etc/warning.txt&lt;/code>），默认不展示任何内容。&lt;/p>
&lt;p>&lt;strong>ChallengeResponseAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>ChallengeResponseAuthentication&lt;/code>指定是否使用“键盘交互”身份验证方案，默认值为&lt;code>yes&lt;/code>（&lt;code>ChallengeResponseAuthentication yes&lt;/code>）。&lt;/p>
&lt;p>从理论上讲，“键盘交互”身份验证方案可以向用户询问多重问题，但是实践中，通常仅询问用户密码。如果要完全禁用基于密码的身份验证，请将&lt;code>PasswordAuthentication&lt;/code>和&lt;code>ChallengeResponseAuthentication&lt;/code>都设置为&lt;code>no&lt;/code>。&lt;/p>
&lt;p>&lt;strong>Ciphers&lt;/strong>&lt;/p>
&lt;p>&lt;code>Ciphers&lt;/code>指定 sshd 可以接受的加密算法（&lt;code>Ciphers 3des-cbc&lt;/code>），多个算法之间使用逗号分隔。&lt;/p>
&lt;p>&lt;strong>ClientAliveCountMax&lt;/strong>&lt;/p>
&lt;p>&lt;code>ClientAliveCountMax&lt;/code>指定建立连接后，客户端失去响应时，服务器尝试连接的次数（&lt;code>ClientAliveCountMax 8&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>ClientAliveInterval&lt;/strong>&lt;/p>
&lt;p>&lt;code>ClientAliveInterval&lt;/code>指定允许客户端发呆的时间，单位为秒（&lt;code>ClientAliveInterval 180&lt;/code>）。如果这段时间里面，客户端没有发送任何信号，SSH 连接将关闭。&lt;/p>
&lt;p>&lt;strong>Compression&lt;/strong>&lt;/p>
&lt;p>&lt;code>Compression&lt;/code>指定客户端与服务器之间的数据传输是否压缩。默认值为&lt;code>yes&lt;/code>（&lt;code>Compression yes&lt;/code>）&lt;/p>
&lt;p>&lt;strong>DenyGroups&lt;/strong>&lt;/p>
&lt;p>&lt;code>DenyGroups&lt;/code>指定不允许登录的用户组（&lt;code>DenyGroups groupName&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>DenyUsers&lt;/strong>&lt;/p>
&lt;p>&lt;code>DenyUsers&lt;/code>指定不允许登录的用户（&lt;code>DenyUsers user1&lt;/code>），用户名之间使用空格分隔，也可以使用多行&lt;code>DenyUsers&lt;/code>命令指定。&lt;/p>
&lt;p>&lt;strong>FascistLogging&lt;/strong>&lt;/p>
&lt;p>SSH 1 版本专用，指定日志输出全部 Debug 信息（&lt;code>FascistLogging yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>HostKey&lt;/strong>&lt;/p>
&lt;p>&lt;code>HostKey&lt;/code>指定 sshd 服务器的密钥，详见前文。&lt;/p>
&lt;p>&lt;strong>KeyRegenerationInterval&lt;/strong>&lt;/p>
&lt;p>&lt;code>KeyRegenerationInterval&lt;/code>指定 SSH 1 版本的密钥重新生成时间间隔，单位为秒，默认是3600秒（&lt;code>KeyRegenerationInterval 3600&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>ListenAddress&lt;/strong>&lt;/p>
&lt;p>&lt;code>ListenAddress&lt;/code>指定 sshd 监听的本机 IP 地址，即 sshd 启用的 IP 地址，默认是 0.0.0.0（&lt;code>ListenAddress 0.0.0.0&lt;/code>）表示在本机所有网络接口启用。可以改成只在某个网络接口启用（比如&lt;code>ListenAddress 192.168.10.23&lt;/code>），也可以指定某个域名启用（比如&lt;code>ListenAddress server.example.com&lt;/code>）。&lt;/p>
&lt;p>如果要监听多个指定的 IP 地址，可以使用多行&lt;code>ListenAddress&lt;/code>命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ListenAddress 172.16.1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ListenAddress 192.168.0.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>LoginGraceTime&lt;/strong>&lt;/p>
&lt;p>&lt;code>LoginGraceTime&lt;/code>指定允许客户端登录时发呆的最长时间，比如用户迟迟不输入密码，连接就会自动断开，单位为秒（&lt;code>LoginGraceTime 60&lt;/code>）。如果设为&lt;code>0&lt;/code>，就表示没有限制。&lt;/p>
&lt;p>&lt;strong>LogLevel&lt;/strong>&lt;/p>
&lt;p>&lt;code>LogLevel&lt;/code>指定日志的详细程度，可能的值依次为&lt;code>QUIET&lt;/code>、&lt;code>FATAL&lt;/code>、&lt;code>ERROR&lt;/code>、&lt;code>INFO&lt;/code>、&lt;code>VERBOSE&lt;/code>、&lt;code>DEBUG&lt;/code>、&lt;code>DEBUG1&lt;/code>、&lt;code>DEBUG2&lt;/code>、&lt;code>DEBUG3&lt;/code>，默认为&lt;code>INFO&lt;/code>（&lt;code>LogLevel INFO&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>MACs&lt;/strong>&lt;/p>
&lt;p>&lt;code>MACs&lt;/code>指定sshd 可以接受的数据校验算法（&lt;code>MACs hmac-sha1&lt;/code>），多个算法之间使用逗号分隔。&lt;/p>
&lt;p>&lt;strong>MaxAuthTries&lt;/strong>&lt;/p>
&lt;p>&lt;code>MaxAuthTries&lt;/code>指定允许 SSH 登录的最大尝试次数（&lt;code>MaxAuthTries 3&lt;/code>），如果密码输入错误达到指定次数，SSH 连接将关闭。&lt;/p>
&lt;p>&lt;strong>MaxStartups&lt;/strong>&lt;/p>
&lt;p>&lt;code>MaxStartups&lt;/code>指定允许同时并发的 SSH 连接数量（MaxStartups）。如果设为&lt;code>0&lt;/code>，就表示没有限制。&lt;/p>
&lt;p>这个属性也可以设为&lt;code>A:B:C&lt;/code>的形式，比如&lt;code>MaxStartups 10:50:20&lt;/code>，表示如果达到10个并发连接，后面的连接将有50%的概率被拒绝；如果达到20个并发连接，则后面的连接将100%被拒绝。&lt;/p>
&lt;p>&lt;strong>PasswordAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>PasswordAuthentication&lt;/code>指定是否允许密码登录，默认值为&lt;code>yes&lt;/code>（&lt;code>PasswordAuthentication yes&lt;/code>），建议改成&lt;code>no&lt;/code>（禁止密码登录，只允许密钥登录）。&lt;/p>
&lt;p>&lt;strong>PermitEmptyPasswords&lt;/strong>&lt;/p>
&lt;p>&lt;code>PermitEmptyPasswords&lt;/code>指定是否允许空密码登录，即用户的密码是否可以为空，默认为&lt;code>yes&lt;/code>（&lt;code>PermitEmptyPasswords yes&lt;/code>），建议改成&lt;code>no&lt;/code>（禁止无密码登录）。&lt;/p>
&lt;p>&lt;strong>PermitRootLogin&lt;/strong>&lt;/p>
&lt;p>&lt;code>PermitRootLogin&lt;/code>指定是否允许根用户登录，默认为&lt;code>yes&lt;/code>（&lt;code>PermitRootLogin yes&lt;/code>），建议改成&lt;code>no&lt;/code>（禁止根用户登录）。&lt;/p>
&lt;p>还有一种写法是写成&lt;code>prohibit-password&lt;/code>，表示 root 用户不能用密码登录，但是可以用密钥登录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">PermitRootLogin prohibit-password
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>PermitUserEnvironment&lt;/strong>&lt;/p>
&lt;p>&lt;code>PermitUserEnvironment&lt;/code>指定是否允许 sshd 加载客户端的&lt;code>~/.ssh/environment&lt;/code>文件和&lt;code>~/.ssh/authorized_keys&lt;/code>文件里面的&lt;code>environment= options&lt;/code>环境变量设置。默认值为&lt;code>no&lt;/code>（&lt;code>PermitUserEnvironment no&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>Port&lt;/strong>&lt;/p>
&lt;p>&lt;code>Port&lt;/code>指定 sshd 监听的端口，即客户端连接的端口，默认是22（&lt;code>Port 22&lt;/code>）。出于安全考虑，可以改掉这个端口（比如&lt;code>Port 8822&lt;/code>）。&lt;/p>
&lt;p>配置文件可以使用多个&lt;code>Port&lt;/code>命令，同时监听多个端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">22&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的示例表示同时监听4个端口。&lt;/p>
&lt;p>&lt;strong>PrintMotd&lt;/strong>&lt;/p>
&lt;p>&lt;code>PrintMotd&lt;/code>指定用户登录后，是否向其展示系统的 motd（Message of the day）的信息文件&lt;code>/etc/motd&lt;/code>。该文件用于通知所有用户一些重要事项，比如系统维护时间、安全问题等等。默认值为&lt;code>yes&lt;/code>（&lt;code>PrintMotd yes&lt;/code>），由于 Shell 一般会展示这个信息文件，所以这里可以改为&lt;code>no&lt;/code>。&lt;/p>
&lt;p>&lt;strong>PrintLastLog&lt;/strong>&lt;/p>
&lt;p>&lt;code>PrintLastLog&lt;/code>指定是否打印上一次用户登录时间，默认值为&lt;code>yes&lt;/code>（&lt;code>PrintLastLog yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>Protocol&lt;/strong>&lt;/p>
&lt;p>&lt;code>Protocol&lt;/code>指定 sshd 使用的协议。&lt;code>Protocol 1&lt;/code>表示使用 SSH 1 协议，建议改成&lt;code>Protocol 2&lt;/code>（使用 SSH 2 协议）。&lt;code>Protocol 2,1&lt;/code>表示同时支持两个版本的协议。&lt;/p>
&lt;p>&lt;strong>PubkeyAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>PubkeyAuthentication&lt;/code>指定是否允许公钥登录，默认值为&lt;code>yes&lt;/code>（&lt;code>PubkeyAuthentication yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>QuietMode&lt;/strong>&lt;/p>
&lt;p>SSH 1 版本专用，指定日志只输出致命的错误信息（&lt;code>QuietMode yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>RSAAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>RSAAuthentication&lt;/code>指定允许 RSA 认证，默认值为&lt;code>yes&lt;/code>（&lt;code>RSAAuthentication yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>ServerKeyBits&lt;/strong>&lt;/p>
&lt;p>&lt;code>ServerKeyBits&lt;/code>指定 SSH 1 版本的密钥重新生成时的位数，默认是768（&lt;code>ServerKeyBits 768&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>StrictModes&lt;/strong>&lt;/p>
&lt;p>&lt;code>StrictModes&lt;/code>指定 sshd 是否检查用户的一些重要文件和目录的权限。默认为&lt;code>yes&lt;/code>（&lt;code>StrictModes yes&lt;/code>），即对于用户的 SSH 配置文件、密钥文件和所在目录，SSH 要求拥有者必须是根用户或用户本人，用户组和其他人的写权限必须关闭。&lt;/p>
&lt;p>&lt;strong>SyslogFacility&lt;/strong>&lt;/p>
&lt;p>&lt;code>SyslogFacility&lt;/code>指定 Syslog 如何处理 sshd 的日志，默认是 Auth（&lt;code>SyslogFacility AUTH&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>TCPKeepAlive&lt;/strong>&lt;/p>
&lt;p>&lt;code>TCPKeepAlive&lt;/code>指定打开 sshd 跟客户端 TCP 连接的 keepalive 参数（&lt;code>TCPKeepAlive yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>UseDNS&lt;/strong>&lt;/p>
&lt;p>&lt;code>UseDNS&lt;/code>指定用户 SSH 登录一个域名时，服务器是否使用 DNS，确认该域名对应的 IP 地址包含本机（&lt;code>UseDNS yes&lt;/code>）。打开该选项意义不大，而且如果 DNS 更新不及时，还有可能误判，建议关闭。&lt;/p>
&lt;p>&lt;strong>UseLogin&lt;/strong>&lt;/p>
&lt;p>&lt;code>UseLogin&lt;/code>指定用户认证内部是否使用&lt;code>/usr/bin/login&lt;/code>替代 SSH 工具，默认为&lt;code>no&lt;/code>（&lt;code>UseLogin no&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>UserPrivilegeSeparation&lt;/strong>&lt;/p>
&lt;p>&lt;code>UserPrivilegeSeparation&lt;/code>指定用户认证通过以后，使用另一个子线程处理用户权限相关的操作，这样有利于提高安全性。默认值为&lt;code>yes&lt;/code>（&lt;code>UsePrivilegeSeparation yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>VerboseMode&lt;/strong>&lt;/p>
&lt;p>SSH 2 版本专用，指定日志输出详细的 Debug 信息（&lt;code>VerboseMode yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>X11Forwarding&lt;/strong>&lt;/p>
&lt;p>&lt;code>X11Forwarding&lt;/code>指定是否打开 X window 的转发，默认值为 no（&lt;code>X11Forwarding no&lt;/code>）。&lt;/p>
&lt;p>修改配置文件以后，可以使用下面的命令验证，配置文件是否有语法错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>新的配置文件生效，必须重启 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-的命令行配置项">sshd 的命令行配置项
&lt;/h3>&lt;p>sshd 命令有一些配置项。这些配置项在调用时指定，可以覆盖配置文件的设置：&lt;/p>
&lt;p>（1）&lt;code>-d&lt;/code>&lt;/p>
&lt;p>&lt;code>-d&lt;/code>参数用于显示 debug 信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）&lt;code>-D&lt;/code>&lt;/p>
&lt;p>&lt;code>-D&lt;/code>参数指定 sshd 不作为后台守护进程运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）&lt;code>-e&lt;/code>&lt;/p>
&lt;p>&lt;code>-e&lt;/code>参数将 sshd 写入系统日志 syslog 的内容导向标准错误（standard error）。&lt;/p>
&lt;p>（4）&lt;code>-f&lt;/code>&lt;/p>
&lt;p>&lt;code>-f&lt;/code>参数指定配置文件的位置。&lt;/p>
&lt;p>（5）&lt;code>-h&lt;/code>&lt;/p>
&lt;p>&lt;code>-h&lt;/code>参数用于指定密钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -h /usr/local/ssh/my_rsa_key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（6）&lt;code>-o&lt;/code>&lt;/p>
&lt;p>&lt;code>-o&lt;/code>参数指定配置文件的一个配置项和对应的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -o &lt;span class="s2">&amp;#34;Port 2034&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置项和对应值之间，可以使用等号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -o &lt;span class="s2">&amp;#34;Port = 2034&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果省略等号前后的空格，也可以不使用引号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -o &lt;span class="nv">Port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-o&lt;/code>参数可以多个一起使用，用来指定多个配置关键字。&lt;/p>
&lt;p>（7）&lt;code>-p&lt;/code>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数指定 sshd 的服务端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -p &lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定 sshd 在&lt;code>2034&lt;/code>端口启动。&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数可以指定多个端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -p &lt;span class="m">2222&lt;/span> -p &lt;span class="m">3333&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（8）&lt;code>-t&lt;/code>&lt;/p>
&lt;p>&lt;code>-t&lt;/code>参数检查配置文件的语法是否正确。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-日志">SSH 日志
&lt;/h2>&lt;p>SSH 在服务器端可以生成日志，记录登录当前服务器的情况。&lt;/p>
&lt;p>SSH 日志是写在系统日志当中的，查看的时候需要从系统日志里面找到跟 SSH 相关的记录。&lt;/p>
&lt;h3 id="journalctl-命令">journalctl 命令
&lt;/h3>&lt;p>如果系统使用 Systemd，可以使用&lt;code>journalctl&lt;/code>命令查看日志:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Mar &lt;span class="m">25&lt;/span> 20:25:36 web0 sshd&lt;span class="o">[&lt;/span>14144&lt;span class="o">]&lt;/span>: Accepted publickey &lt;span class="k">for&lt;/span> ubuntu from 10.103.160.144 port &lt;span class="m">59200&lt;/span> ssh2: RSA SHA256:l/zFNib1vJ+64nxLB4N9KaVhBEMf8arbWGxHQg01SW8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mar &lt;span class="m">25&lt;/span> 20:25:36 web0 sshd&lt;span class="o">[&lt;/span>14144&lt;span class="o">]&lt;/span>: pam_unix&lt;span class="o">(&lt;/span>sshd:session&lt;span class="o">)&lt;/span>: session opened &lt;span class="k">for&lt;/span> user ubuntu by &lt;span class="o">(&lt;/span>&lt;span class="nv">uid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mar &lt;span class="m">25&lt;/span> 20:39:12 web0 sshd&lt;span class="o">[&lt;/span>14885&lt;span class="o">]&lt;/span>: pam_unix&lt;span class="o">(&lt;/span>sshd:session&lt;span class="o">)&lt;/span>: session closed &lt;span class="k">for&lt;/span> user ubuntu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，返回的日志每一行就是一次登录尝试，按照从早到晚的顺序，其中包含了登录失败的尝试。&lt;code>-u&lt;/code>参数是 Unit 单元的意思，&lt;code>-u ssh&lt;/code>就是查看 SSH 单元，有的发行版需要写成&lt;code>-u sshd&lt;/code>。&lt;/p>
&lt;p>&lt;code>-b0&lt;/code>参数可以查看自从上次登录后的日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh -b0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-r&lt;/code>参数表示逆序输出，最新的在前面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh -b0 -r
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>since&lt;/code>和&lt;code>until&lt;/code>参数可以指定日志的时间范围。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --since yesterday &lt;span class="c1"># 查看昨天的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --since -3d --until -2d &lt;span class="c1"># 查看三天前的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --since -1h &lt;span class="c1"># 查看上个小时的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --until &lt;span class="s2">&amp;#34;2022-03-12 07:00:00&amp;#34;&lt;/span> &lt;span class="c1"># 查看截至到某个时间点的日志&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令查看实时日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -fu ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="其他命令">其他命令
&lt;/h3>&lt;p>如果系统没有使用 Systemd，可以在&lt;code>/var/log/auth.log&lt;/code>文件中找到 sshd 的日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo grep sshd /var/log/auth.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令查看最后 500 行里面的 sshd 条目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo tail -n &lt;span class="m">500&lt;/span> /var/log/auth.log &lt;span class="p">|&lt;/span> grep sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-f&lt;/code>参数可以实时跟踪日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo tail -f -n &lt;span class="m">500&lt;/span> /var/log/auth.log &lt;span class="p">|&lt;/span> grep sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果只是想看谁登录了系统，而不是深入查看所有细节，可以使用&lt;code>lastlog&lt;/code>命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ lastlog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="日志设置">日志设置
&lt;/h3>&lt;p>sshd 的配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>，可以调整日志级别。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">LogLevel VERBOSE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果为了调试，可以将日志调整为 DEBUG。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> LogLevel DEBUG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="fail2ban-教程">Fail2Ban 教程
&lt;/h2>&lt;h3 id="简介-4">简介
&lt;/h3>&lt;p>Fail2Ban 是一个 Linux 系统的应用软件，用来防止系统入侵，主要是防止暴力破解系统密码。它是用 Python 开发的。&lt;/p>
&lt;p>它主要通过监控日志文件（比如&lt;code>/var/log/auth.log&lt;/code>、&lt;code>/var/log/apache/access.log&lt;/code>等）来生效。一旦发现恶意攻击的登录请求，它会封锁对方的 IP 地址，使得对方无法再发起请求。&lt;/p>
&lt;p>Fail2Ban 可以防止有人反复尝试 SSH 密码登录，但是如果 SSH 采用的是密钥登录，禁止了密码登录，就不需要 Fail2Ban 来保护。&lt;/p>
&lt;p>Fail2Ban 的安装命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ubuntu &amp;amp; Debian&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install fail2ban
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install epel-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install fail2ban
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Centos &amp;amp; Red hat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install epel-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装后，使用下面的命令查看 Fail2Ban 的状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ systemctl status fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果没有启动，就启动 Fail2Ban：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo systemctl start fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重新启动 Fail2Ban：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置 Fail2Ban 重启后自动运行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo systemctl &lt;span class="nb">enable&lt;/span> fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="fail2ban-client">fail2ban-client
&lt;/h3>&lt;p>Fail2Ban 自带一个客户端 fail2ban-client，用来操作 Fail2Ban：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ fail2ban-client
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会输出 fail2ban-client 所有的用法。&lt;/p>
&lt;p>下面的命令查看激活的监控目标(需要额外配置，后面介绍）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ fail2ban-client status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>- Number of jail: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>- Jail list: sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令查看某个监控目标（这里是 sshd）的运行情况：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo fail2ban-client status sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Status &lt;span class="k">for&lt;/span> the jail: sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>- Filter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>- Currently failed: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>- Total failed: &lt;span class="m">9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>- Journal matches: &lt;span class="nv">_SYSTEMD_UNIT&lt;/span>&lt;span class="o">=&lt;/span>sshd.service + &lt;span class="nv">_COMM&lt;/span>&lt;span class="o">=&lt;/span>sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>- Actions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span>- Currently banned: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span>- Total banned: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>- Banned IP list: 0.0.0.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令输出一个简要的版本，包括所有监控目标被封的 IP 地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo fail2ban-client banned
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[{&lt;/span>&lt;span class="s1">&amp;#39;sshd&amp;#39;&lt;/span>: &lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;192.168.100.50&amp;#39;&lt;/span>&lt;span class="o">]}&lt;/span>, &lt;span class="o">{&lt;/span>&lt;span class="s1">&amp;#39;apache-auth&amp;#39;&lt;/span>: &lt;span class="o">[]}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令可以解封某个 IP 地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo fail2ban-client &lt;span class="nb">set&lt;/span> sshd unbanip 192.168.1.69
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>手动禁止一个 IP 地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo fail2ban-client &lt;span class="nb">set&lt;/span> sshd banip &amp;lt;IP地址&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="配置">配置
&lt;/h3>&lt;h4 id="主配置文件">主配置文件
&lt;/h4>&lt;p>Fail2Ban 主配置文件是在&lt;code>/etc/fail2ban/fail2ban.conf&lt;/code>，可以新建一份副本&lt;code>/etc/fail2ban/fail2ban.local&lt;/code>作为本地配置文件，修改都针对本地配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是设置 Fail2Ban 的日志位置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">Definition&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">logtarget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="k">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nb">log&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">fail2ban&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">fail2ban&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改配置以后，需要重新启动&lt;code>fail2ban.service&lt;/code>，让其生效。&lt;/p>
&lt;h4 id="封禁配置">封禁配置
&lt;/h4>&lt;p>Fail2Ban 封禁行为的配置文件是&lt;code>/etc/fail2ban/jail.conf&lt;/code>。为了便于修改，可以把它复制一份&lt;code>/etc/fail2ban/jail.local&lt;/code>本地配置文件，后面的修改都针对&lt;code>jail.local&lt;/code>这个文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以在目录&lt;code>/etc/fail2ban/jail.d&lt;/code>里面，新建单独的子配置文件，比如&lt;code>/etc/fail2ban/jail.d/sshd.local&lt;/code>。&lt;/p>
&lt;p>同样地，修改配置以后，需要重新启动&lt;code>fail2ban.service&lt;/code>，让其生效。&lt;/p>
&lt;p>配置文件里面，&lt;code>[DEFAULT]&lt;/code>标题行表示对于所有封禁目标生效。举例来说，如果封禁时间修改为1天，&lt;code>/etc/fail2ban/jail.local&lt;/code>里面可以写成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">DEFAULT]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">bantime = 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果某人被封时，对站长发送邮件通知，可以如下设置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">DEFAULT]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">destemail = yourname@example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">sender = yourname@example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to ban &amp;amp; send an e-mail with whois report to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action = %(action_mw)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># same as action_mw but also send relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c">#action = %(action_mwl)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果配置写在其他标题行下，就表示只对该封禁目标生效，比如写在&lt;code>[sshd]&lt;/code>下面，就表示只对 sshd 生效。&lt;/p>
&lt;p>默认情况下，Fail2Ban 对&lt;strong>各种服务都是关闭的&lt;/strong>，如果要针对某一项服务开启，需要在配置文件里面声明。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[sshd]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">enabled = true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面声明表示，Fail2Ban 对 sshd 开启。&lt;/p>
&lt;h4 id="配置项-3">配置项
&lt;/h4>&lt;p>下面是配置文件&lt;code>jail.local&lt;/code>的配置项含义，所有配置项的格式都是&lt;code>key=value&lt;/code>。&lt;/p>
&lt;p>（1）bantime&lt;/p>
&lt;p>封禁的时间长度，单位&lt;code>m&lt;/code>表示分钟，&lt;code>d&lt;/code>表示天，&lt;code>h&lt;/code>表示小时，如果不写单位，则表示秒。Fail2Ban 默认封禁10分钟（10m 或 600）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bantime = 10m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）findtime&lt;/p>
&lt;p>登录失败计算的时间长度，单位&lt;code>m&lt;/code>表示分钟，&lt;code>d&lt;/code>表示天，如果不写单位，则表示秒。Fail2Ban 默认封禁 10 分钟内登录 5 次失败的客户端。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">findtime = 10m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">maxretry = 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）maxretry&lt;/p>
&lt;p>尝试登录的最大失败次数。&lt;/p>
&lt;p>（4）destemail&lt;/p>
&lt;p>接受通知的邮件地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">destemail = root@localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sender = root@&amp;lt;fq-hostname&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mta = sendmail
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（5）sendername&lt;/p>
&lt;p>通知邮件的“发件人”字段的值。&lt;/p>
&lt;p>（6）mta&lt;/p>
&lt;p>发送邮件的邮件服务，默认是&lt;code>sendmail&lt;/code>。&lt;/p>
&lt;p>（7）action&lt;/p>
&lt;p>封禁时采取的动作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">action = $(action_)s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的&lt;code>action_&lt;/code>是默认动作，表示拒绝封禁对象的流量，直到封禁期结束。&lt;/p>
&lt;p>下面是 Fail2Ban 提供的一些其他动作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># ban &amp;amp; send an e-mail with whois report to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_mw = %(action_)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">%(mta)s-whois[sender=&amp;#34;%(sender)s&amp;#34;, dest=&amp;#34;%(destemail)s&amp;#34;, protocol=&amp;#34;%(protocol)s&amp;#34;, chain=&amp;#34;%(chain)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># ban &amp;amp; send an e-mail with whois report and relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_mwl = %(action_)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">%(mta)s-whois-lines[sender=&amp;#34;%(sender)s&amp;#34;, dest=&amp;#34;%(destemail)s&amp;#34;, logpath=&amp;#34;%(logpath)s&amp;#34;, chain=&amp;#34;%(chain)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># See the IMPORTANT note in action.d/xarf-login-attack for when to use this action&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c">#&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># ban &amp;amp; send a xarf e-mail to abuse contact of IP address and include relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_xarf = %(action_)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">xarf-login-attack[service=%(__name__)s, sender=&amp;#34;%(sender)s&amp;#34;, logpath=&amp;#34;%(logpath)s&amp;#34;, port=&amp;#34;%(port)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># ban IP on CloudFlare &amp;amp; send an e-mail with whois report and relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_cf_mwl = cloudflare[cfuser=&amp;#34;%(cfemail)s&amp;#34;, cftoken=&amp;#34;%(cfapikey)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">%(mta)s-whois-lines[sender=&amp;#34;%(sender)s&amp;#34;, dest=&amp;#34;%(destemail)s&amp;#34;, logpath=&amp;#34;%(logpath)s&amp;#34;, chain=&amp;#34;%(chain)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（8）ignoreip&lt;/p>
&lt;p>Fail2Ban 可以忽视的可信 IP 地址。多个 IP 地址之间使用空格分隔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ignoreip = 127.0.0.1/8 192.168.1.10 192.168.1.20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（9）port&lt;/p>
&lt;p>指定要监控的端口。可以设为任何端口号或服务名称，比如&lt;code>ssh&lt;/code>、&lt;code>22&lt;/code>、&lt;code>2200&lt;/code>等。&lt;/p>
&lt;h3 id="ssh-配置">ssh 配置
&lt;/h3>&lt;p>下面是 sshd 的设置范例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">sshd]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">enabled = true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">port = ssh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">filter = sshd&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">banaction = iptables&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">backend = systemd&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">maxretry = 5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">findtime = 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">bantime = 2w&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">ignoreip = 127.0.0.1/8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先需要注意，为了让 Fail2Ban 能够完整发挥作用，最好在&lt;code>/etc/ssh/sshd_config&lt;/code>里面设置&lt;code>LogLevel VERBOSE&lt;/code>，保证日志有足够的信息。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-端口转发-">SSH 端口转发: ?
&lt;/h2>&lt;h3 id="简介-5">简介
&lt;/h3>&lt;p>SSH 除了登录服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的通信加密跳板，使得原本不加密的通信变成加密通信。这个功能称为&lt;strong>端口转发&lt;/strong>（port forwarding），又称 &lt;strong>SSH 隧道&lt;/strong>（tunnel）。&lt;/p>
&lt;p>端口转发有两个主要作用：&lt;/p>
&lt;p>（1）将不加密的数据放在 SSH 安全连接里面传输，使得原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。&lt;/p>
&lt;p>（2）作为数据通信的加密跳板，绕过网络防火墙。&lt;/p>
&lt;p>端口转发有三种使用方法：动态转发，本地转发，远程转发。下面逐一介绍。&lt;/p>
&lt;h3 id="动态转发">动态转发
&lt;/h3>&lt;p>动态转发指的是，本机与 SSH 服务器之间创建了一个加密连接，然后本机内部针对某个端口的通信，都通过这个加密连接转发。它的一个使用场景就是，访问所有外部网站，都通过 SSH 转发。&lt;/p>
&lt;p>动态转发需要把本地端口绑定到 SSH 服务器。至于 SSH 服务器要去访问哪一个网站，完全是动态的，取决于原始通信，所以叫做动态转发。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -D local-port tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-D&lt;/code>表示动态转发，&lt;code>local-port&lt;/code>是本地端口，&lt;code>tunnel-host&lt;/code>是 SSH 服务器，&lt;code>-N&lt;/code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。&lt;/p>
&lt;p>举例来说，如果本地端口是&lt;code>2121&lt;/code>，那么动态转发的命令就是下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -D &lt;span class="m">2121&lt;/span> tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，这种转发采用了 SOCKS5 协议。访问外部网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。&lt;/p>
&lt;p>下面是 SSH 隧道建立后的一个使用实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl -x socks5://localhost:2121 http://www.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，curl 的&lt;code>-x&lt;/code>参数指定代理服务器，即通过 SOCKS5 协议的本地&lt;code>2121&lt;/code>端口，访问&lt;code>http://www.example.com&lt;/code>。&lt;/p>
&lt;p>如果经常使用动态转发，可以将设置写入 SSH 客户端的用户个人配置文件（&lt;code>~/.ssh/config&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">DynamicForward tunnel-host:local-port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="本地转发">本地转发
&lt;/h3>&lt;p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。&lt;/p>
&lt;p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -L local-port:target-host:target-port tunnel-host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-L&lt;/code>参数表示本地转发，&lt;code>local-port&lt;/code>是本地端口，&lt;code>target-host&lt;/code>是你想要访问的目标服务器，&lt;code>target-port&lt;/code>是目标服务器的端口，&lt;code>tunnel-host&lt;/code>是 SSH 跳板机。&lt;/p>
&lt;p>举例来说，现在有一台 SSH 跳板机&lt;code>tunnel-host&lt;/code>，我们想要通过这台机器，在本地&lt;code>2121&lt;/code>端口与目标网站&lt;code>www.example.com&lt;/code>的80端口之间建立 SSH 隧道，就可以写成下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 2121:www.example.com:80 tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，访问本机的&lt;code>2121&lt;/code>端口，就是访问&lt;code>www.example.com&lt;/code>的80端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl http://localhost:2121
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，本地端口转发采用 HTTP 协议，不用转成 SOCKS5 协议。&lt;/p>
&lt;p>另一个例子是加密访问邮件获取协议 POP3。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 1100:mail.example.com:110 mail.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将本机的1100端口，绑定邮件服务器&lt;code>mail.example.com&lt;/code>的110端口（POP3 协议的默认端口）。端口转发建立以后，POP3 邮件客户端只需要访问本机的1100端口，请求就会通过 SSH 跳板机（这里是&lt;code>mail.example.com&lt;/code>），自动转发到&lt;code>mail.example.com&lt;/code>的110端口。&lt;/p>
&lt;p>上面这种情况有一个前提条件，就是&lt;code>mail.example.com&lt;/code>必须运行 SSH 服务器。否则，就必须通过另一台 SSH 服务器中介，执行的命令要改成下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 1100:mail.example.com:110 other.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，本机的1100端口还是绑定&lt;code>mail.example.com&lt;/code>的110端口，但是由于&lt;code>mail.example.com&lt;/code>没有运行 SSH 服务器，所以必须通过&lt;code>other.example.com&lt;/code>中介。本机的 POP3 请求通过1100端口，先发给&lt;code>other.example.com&lt;/code>的22端口（sshd 默认端口），再由后者转给&lt;code>mail.example.com&lt;/code>，得到数据以后再原路返回。&lt;/p>
&lt;p>注意，采用上面的中介方式，只有本机到&lt;code>other.example.com&lt;/code>的这一段是加密的，&lt;code>other.example.com&lt;/code>到&lt;code>mail.example.com&lt;/code>的这一段并不加密。&lt;/p>
&lt;p>这个命令最好加上&lt;code>-N&lt;/code>参数，表示不在 SSH 跳板机执行远程命令，让 SSH 只充当隧道。另外还有一个&lt;code>-f&lt;/code>参数表示 SSH 连接在后台运行。&lt;/p>
&lt;p>如果经常使用本地转发，可以将设置写入 SSH 客户端的用户个人配置文件（&lt;code>~/.ssh/config&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host test.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LocalForward client-IP:client-port server-IP:server-port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="远程转发">远程转发
&lt;/h3>&lt;p>远程转发指的是在远程 SSH 服务器建立的转发规则。&lt;/p>
&lt;p>它跟本地转发正好反过来。建立本地计算机到远程计算机的 SSH 隧道以后，本地转发是通过本地计算机访问远程计算机，而远程转发则是通过远程计算机访问本地计算机。它的命令格式如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R remote-port:target-host:target-port -N remotehost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-R&lt;/code>参数表示远程端口转发，&lt;code>remote-port&lt;/code>是远程计算机的端口，&lt;code>target-host&lt;/code>和&lt;code>target-port&lt;/code>是目标服务器及其端口，&lt;code>remotehost&lt;/code>是远程计算机。&lt;/p>
&lt;p>远程转发主要针对内网的情况。下面举两个例子:&lt;/p>
&lt;p>第一个例子是内网某台服务器&lt;code>localhost&lt;/code>在 80 端口开了一个服务，可以通过远程转发将这个 80 端口，映射到具有公网 IP 地址的&lt;code>my.public.server&lt;/code>服务器的 8080 端口，使得访问&lt;code>my.public.server:8080&lt;/code>这个地址，就可以访问到那台内网服务器的 80 端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R 8080:localhost:80 -N my.public.server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令是在内网&lt;code>localhost&lt;/code>服务器上执行，建立从&lt;code>localhost&lt;/code>到&lt;code>my.public.server&lt;/code>的 SSH 隧道。运行以后，用户访问&lt;code>my.public.server:8080&lt;/code>，就会自动映射到&lt;code>localhost:80&lt;/code>。&lt;/p>
&lt;p>第二个例子是本地计算机&lt;code>local&lt;/code>在外网，SSH 跳板机和目标服务器&lt;code>my.private.server&lt;/code>都在内网，必须通过 SSH 跳板机才能访问目标服务器。但是，本地计算机&lt;code>local&lt;/code>无法访问内网之中的 SSH 跳板机，而 SSH 跳板机可以访问本机计算机。&lt;/p>
&lt;p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。跳板机执行下面的命令，绑定本地计算机&lt;code>local&lt;/code>的&lt;code>2121&lt;/code>端口，去访问&lt;code>my.private.server:80&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R 2121:my.private.server:80 -N &lt;span class="nb">local&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令是在 SSH 跳板机上执行的，建立跳板机到&lt;code>local&lt;/code>的隧道，并且这条隧道的出口映射到&lt;code>my.private.server:80&lt;/code>。&lt;/p>
&lt;p>显然，远程转发要求本地计算机&lt;code>local&lt;/code>也安装了 SSH 服务器，这样才能接受 SSH 跳板机的远程登录。&lt;/p>
&lt;p>执行上面的命令以后，跳板机到&lt;code>local&lt;/code>的隧道已经建立了。然后，就可以从本地计算机访问目标服务器了，即在本机执行下面的命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl http://localhost:2121
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本机执行上面的命令以后，就会输出服务器&lt;code>my.private.server&lt;/code>的 80 端口返回的内容。&lt;/p>
&lt;p>如果经常执行远程端口转发，可以将设置写入 SSH 客户端的用户个人配置文件（&lt;code>~/.ssh/config&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host remote-forward
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName test.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RemoteForward remote-port target-host:target-port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成上面的设置后，执行下面的命令就会建立远程转发。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -N remote-forward
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -R remote-port:target-host:target-port -N test.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="实例">实例
&lt;/h3>&lt;p>下面看两个端口转发的实例。&lt;/p>
&lt;h4 id="简易-vpn">简易 VPN
&lt;/h4>&lt;p>VPN 用来在外网与内网之间建立一条加密通道。内网的服务器不能从外网直接访问，必须通过一个跳板机，如果本机可以访问跳板机，就可以使用 SSH 本地转发，简单实现一个 VPN。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 2080:corp-server:80 -L 2443:corp-server:443 tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令通过 SSH 跳板机，将本机的&lt;code>2080&lt;/code>端口绑定内网服务器的&lt;code>80&lt;/code>端口，本机的&lt;code>2443&lt;/code>端口绑定内网服务器的&lt;code>443&lt;/code>端口。&lt;/p>
&lt;h4 id="两级跳板">两级跳板
&lt;/h4>&lt;p>端口转发可以有多级，比如新建两个 SSH 隧道，第一个隧道转发给第二个隧道，第二个隧道才能访问目标服务器。&lt;/p>
&lt;p>首先，在本机新建第一级隧道。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 7999:localhost:2999 tunnel1-host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令在本地&lt;code>7999&lt;/code>端口与&lt;code>tunnel1-host&lt;/code>之间建立一条隧道，隧道的出口是&lt;code>tunnel1-host&lt;/code>的&lt;code>localhost:2999&lt;/code>，也就是&lt;code>tunnel1-host&lt;/code>收到本机的请求以后，转发给自己的&lt;code>2999&lt;/code>端口。&lt;/p>
&lt;p>然后，在第一台跳板机（&lt;code>tunnel1-host&lt;/code>）执行下面的命令，新建第二级隧道。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 2999:target-host:7999 tunnel2-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将第一台跳板机&lt;code>tunnel1-host&lt;/code>的&lt;code>2999&lt;/code>端口，通过第二台跳板机&lt;code>tunnel2-host&lt;/code>，连接到目标服务器&lt;code>target-host&lt;/code>的&lt;code>7999&lt;/code>端口。&lt;/p>
&lt;p>最终效果就是，访问本机的&lt;code>7999&lt;/code>端口，就会转发到&lt;code>target-host&lt;/code>的&lt;code>7999&lt;/code>端口。&lt;/p>
&lt;p>在远程机器上&lt;code>/etc/ssh/sshd_config&lt;/code> 打开 &lt;code>GatewayPorts yes&lt;/code> ，才能通过公网访问 远程8080转发 的本地80服务。&lt;/p>
&lt;h3 id="参考链接-2">参考链接
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://solitum.net/posts/an-illustrated-guide-to-ssh-tunnels/" target="_blank" rel="noopener"
>An Illustrated Guide to SSH Tunnels&lt;/a>, Scott Wiersdorf&lt;/li>
&lt;li>&lt;a class="link" href="https://grahamhelton.com/blog/ssh-cheatsheet/" target="_blank" rel="noopener"
>An Excruciatingly Detailed Guide To SSH&lt;/a>, Graham Helton&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;blockquote>
&lt;ul>
&lt;li>原文地址： &lt;a class="link" href="https://wangdoc.com/ssh/" target="_blank" rel="noopener"
>https://wangdoc.com/ssh/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>