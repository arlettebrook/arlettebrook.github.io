<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on Arlettebrook's blog</title><link>https://arlettebrook.github.io/categories/%E6%8A%80%E6%9C%AF/</link><description>Recent content in 技术 on Arlettebrook's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>博客内容遵循 知识共享 署名 - 非商业性 - 相同方式共享 4.0 国际协议</copyright><lastBuildDate>Wed, 08 May 2024 19:24:26 +0800</lastBuildDate><atom:link href="https://arlettebrook.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux Common Commands</title><link>https://arlettebrook.github.io/p/linux-common-commands/</link><pubDate>Wed, 08 May 2024 19:24:26 +0800</pubDate><guid>https://arlettebrook.github.io/p/linux-common-commands/</guid><description>&lt;blockquote>
&lt;p>Linux常用命令有很多，本文不会逐个介绍。以下命令是我在后期使用中遇到的，算是我对Linux常用命令的补充、回顾、总结。本篇文章阅读需要一定的Linux基础。更多常见命令可参考：&lt;a class="link" href="https://wiki.deepin.org/zh/04_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98FAQ/600%E6%9D%A1Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93" target="_blank" rel="noopener"
>600条Linux命令总结&lt;/a>。&lt;/p>
&lt;p>&lt;strong>持续更新中&amp;hellip;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="ln">
&lt;a href="#ln" class="header-anchor">#&lt;/a>
ln
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>ln&lt;/code>命令在Linux系统中用于&lt;strong>创建文件链接&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>Linux中文件链接的方式有两种：
&lt;ul>
&lt;li>&lt;strong>符号链接&lt;/strong>（也称为软链接Symbolic Link）：包含了到原文件的路径信息，相当于一个指向原文件的&lt;strong>快捷方式&lt;/strong>。
&lt;ul>
&lt;li>符号链接有自己的文件属性及权限等。&lt;/li>
&lt;li>可对不存在的文件或目录创建符号链接。&lt;/li>
&lt;li>符号链接可交叉文件系统，即可以在不同的文件系统之间创建。&lt;/li>
&lt;li>删除符号链接并不影响被指向的文件，但若被指向的原文件被删除，则相关符号链接被称为死链接（dangling link）。若被指向的文件重新被创建，死链接可恢复为正常的符号链接。&lt;/li>
&lt;li>符号链接文件的大小是其指向的文件的路径字符串的字节数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>硬链接&lt;/strong>：硬链接本质上是给一个文件取一个新的名称，原文件和硬链接在物理上仍然是同一个文件。它们共享相同的inode（索引节点）和数据块。
&lt;ul>
&lt;li>创建硬链接会在对应的目录中增加额外的记录项以引用文件。&lt;/li>
&lt;li>原文件和硬链接文件对应于同一文件系统上的一个物理文件。&lt;/li>
&lt;li>创建硬链接时原文件的连接数（i_nlink）会递增。即&lt;strong>硬链接数&lt;/strong>递增。&lt;/li>
&lt;li>删除文件时，&lt;code>rm&lt;/code>命令会递减计数的链接数。文件要是存在，至少有一个链接数。当链接数为零时，该文件才会被真正删除。&lt;/li>
&lt;li>硬链接不能跨域驱动器或分区，也不支持对目录创建硬链接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>总结来说，符号链接（软链接）和硬链接的主要区别在于：
&lt;ul>
&lt;li>符号链接是一个独立的文件，它包含了到原文件的路径信息（&lt;strong>快捷方式&lt;/strong>）；而硬链接则与原文件共享相同的inode和数据块（&lt;strong>文件别名&lt;/strong>）。&lt;/li>
&lt;li>符号链接可以&lt;strong>跨文件系统&lt;/strong>，并且可以对不存在的文件或目录创建；而硬链接则&lt;strong>不能跨域驱动器或分区&lt;/strong>，&lt;strong>也不能对目录创建&lt;/strong>。&lt;/li>
&lt;li>删除符号链接不影响原文件，但删除原文件会使符号链接成为死链接；而删除硬链接文件时，只有当所有硬链接都被删除且原文件的链接数为零时，文件才会被真正删除。即硬链接数为0，文件才真正被删除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这个命令允许你在不同的位置为同一个文件或目录建立同步的链接，从而避免了在多个位置重复存储相同的文件内容，&lt;strong>节省了磁盘空间&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ln&lt;/code>命令的基本语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ln &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;源文件或目录&amp;gt; &amp;lt;链接文件或目录&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>常用选项包括：
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：创建符号链接（软链接）。这会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，而是保存了原始文件的路径。（创建快捷方式）
&lt;ul>
&lt;li>不使用&lt;code>-s&lt;/code>选项时创建硬链接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-f&lt;/code>：强制执行，如果链接文件已存在则覆盖。&lt;/li>
&lt;li>&lt;code>-v&lt;/code>：显示详细的输出信息。&lt;/li>
&lt;li>&lt;code>--help&lt;/code>：查看帮助文档。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>理解记忆：ln可以理解为link的缩写，s可以理解为soft软的意思。&lt;/li>
&lt;li>注意：源文件一般用绝对路径，相对会出现死链接情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>简单介绍一些&lt;code>ls -lh&lt;/code>输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:15 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># l显示详细信息，h文件大小用人类可读懂的方式显示。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw- r-- r--
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-开头表示文件，d表示目录，l表示链接，三位为一组用rwx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx r-x r-x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前用户权限 用户所属组权限 其他用户权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">数字1表示硬链接数，理解为别名，别名为0，文件才会被删除。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有多少种方式可以访问该文件或目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 文件一般为1：绝对路径
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 目录只有一层一般为2：绝对和cd .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2层为3：绝对、cd . 、cd ..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：拥有者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：所在组，没指定默认同名。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5月 &lt;span class="m">8&lt;/span> 22:49 文件最后修改日期时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">最后：文件或目录名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有箭头表示软连接，没有硬链接。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>演示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -sv ~/test/abc.txt ./demo/soft
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/soft’ -&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -v ~/test/abc.txt ./demo/hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/hard’ &lt;span class="o">=&lt;/span>&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">42&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ &lt;span class="nb">cd&lt;/span> demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost demo $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 soft -&amp;gt; /root/test/abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">2&lt;/span> root root &lt;span class="m">6&lt;/span> May &lt;span class="m">8&lt;/span> 23:15 &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost demo $
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：测试环境是在Linux中，&lt;code>ln&lt;/code>命令并不适用于windows环境。创建的文件链接无效。&lt;/p>
&lt;hr>
&lt;h2 id="curl">
&lt;a href="#curl" class="header-anchor">#&lt;/a>
curl
&lt;/h2>&lt;p>&lt;code>curl&lt;/code>命令是一个利用URL规则在命令行下工作的文件传输工具，它支持文件的上传和下载，因此被视为综合传输工具，但传统上习惯称其为下载工具。curl支持包括HTTP、HTTPS、FTP等众多协议，并具备多种特性，如POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等。这些特性使得curl在处理网页处理流程和数据检索自动化方面非常有用。&lt;/p>
&lt;p>总结：用于发送网络请求，可以下载和上传文件。而&lt;code>wget&lt;/code>只能用于下载文件，但&lt;a class="link" href="#wget" >wget&lt;/a>下载文件的功能比&lt;code>curl&lt;/code>强大。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>linux系统：根据你的Linux发行版，使用相应的包管理器来安装curl。
&lt;ul>
&lt;li>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install curl&lt;/code>&lt;/li>
&lt;li>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install curl&lt;/code>&lt;/li>
&lt;li>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S curl&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>windows系统：
&lt;ol>
&lt;li>&lt;a class="link" href="https://curl.se/download.html" target="_blank" rel="noopener"
>官网&lt;/a>下载对应版本，添加一个CURL_HOME环境变量名，指向的是curl.exe文件所在路径。并将其添加到path环境变量中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.mingw-w64.org/downloads/#mingw-builds" target="_blank" rel="noopener"
>Mingw&lt;/a>自带curl，Mingw也可以用msys2来安装。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>MacOS系统自带。&lt;/li>
&lt;/ol>
&lt;p>基本使用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>curl命令的基本语法格式为：&lt;code>curl [选项] URL&lt;/code>。其中，URL是要请求的目标地址，而选项则用于指定各种参数和功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-X&lt;/code> 或 &lt;code>--request&lt;/code>：用于指定HTTP请求方法，如GET、POST、PUT、DELETE等。&lt;/p>
&lt;ul>
&lt;li>默认发送get请求。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -X POST http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-H&lt;/code> 或 &lt;code>--header&lt;/code>: 添加自定义的 HTTP 头信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-d&lt;/code> 或 &lt;code>--data&lt;/code>: 发送 POST 请求时，将数据作为请求体发送。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s2">&amp;#34;param1=value1&amp;amp;param2=value2&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 JSON 数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s1">&amp;#39;{&amp;#34;key1&amp;#34;:&amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;value2&amp;#34;}&amp;#39;&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-F&lt;/code> 或 &lt;code>--form&lt;/code>: 用于发送 multipart/form-data 格式的数据，通常用于文件上传。&lt;/p>
&lt;ul>
&lt;li>参数&lt;code>&amp;quot;文件名=@path&amp;quot;&lt;/code>,还可以指定类型&lt;code>&amp;quot;文件名=@path;type=MIME&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -F &lt;span class="s2">&amp;#34;file=@filename.txt&amp;#34;&lt;/span> http://example.com/upload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-o&lt;/code> 或 &lt;code>--output&lt;/code>: 将响应输出到文件，而不是显示在终端上。默认当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -o output.html http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>-O&lt;/code>: 将响应保存到本地文件，文件名与远程文件的文件名相同。在当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -O http://example.com/file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-s&lt;/code> 或 &lt;code>--silent&lt;/code>: 静默模式，不显示进度或错误消息。常用S组合使用，显示错误消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v&lt;/code> 或 &lt;code>--verbose&lt;/code>: 详细模式，显示详细的通信过程，包括请求头和响应头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i&lt;/code>: 显示响应头信息以及返回的内容 body。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-I&lt;/code>: 只显示响应头信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u&lt;/code> 用户名:密码: 指定用户名和密码进行身份验证。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -u username:password http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-L&lt;/code>: 跟随重定向。当 HTTP 响应是一个重定向时，curl 会自动获取重定向后的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-k&lt;/code> 或 &lt;code>--insecure&lt;/code>: 允许连接到不安全的 SSL 站点，即忽略 SSL 证书验证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>常用组合：&lt;code>curl -fsSL&lt;/code>，默认get请求。&lt;/p>
&lt;ul>
&lt;li>f不显示客户端错误。&lt;/li>
&lt;li>s不显示进度、错误消息。配合S显示错误消息&lt;/li>
&lt;li>L接受重定向。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="wget">
&lt;a href="#wget" class="header-anchor">#&lt;/a>
wget
&lt;/h2>&lt;p>&lt;code>wget&lt;/code> 是一个在 Unix 和 Linux 系统上常用的命令行工具，用于从网络上下载文件。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>支持断点续传：如果下载过程中连接中断，可以在之后从断点处继续下载。&lt;/li>
&lt;li>支持递归下载：可以下载网页上的所有链接文件，并重建目录结构。&lt;/li>
&lt;li>强大的重试机制：在下载过程中如果网络出现问题，&lt;code>wget&lt;/code> 会自动重试，直到下载完成。&lt;/li>
&lt;li>后台执行：支持在后台运行下载任务，用户无需保持登录状态。&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="#curl" >curl&lt;/a>没有以上优点，但它支持更多的协议。wget只支持HTTP、HTTPS和FTP协议。curl使用更广泛。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>linux系统：根据你的Linux发行版，使用相应的包管理器来安装wget。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S wget&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>windows系统：&lt;/p>
&lt;ul>
&lt;li>官网&lt;a class="link" href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener"
>GNU Wget&lt;/a>下载安装或其他可靠的软件下载，然后路径添加到环境变量path中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>macos系统：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于macOS，使用&lt;a class="link" href="https://github.com/Homebrew/brew" target="_blank" rel="noopener"
>Homebrew&lt;/a>包管理器来安装wget。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">brew&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="nx">wget&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>基本使用：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>-b, &amp;ndash;background&lt;/strong>：在后台执行下载任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-c, &amp;ndash;continue&lt;/strong>：继续下载之前未完成的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-r, &amp;ndash;recursive&lt;/strong>：递归下载，下载指定 URL 中的所有链接。可以下载整个目录及其子目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -r http://www.example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：在使用递归下载时，建议加上 &lt;code>-np&lt;/code> 和 &lt;code>-nH&lt;/code> 选项，以避免下载过多的不必要文件和创建复杂的目录结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-np, &amp;ndash;no-parent&lt;/strong>：不递归下载上级目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nH, &amp;ndash;no-host-directories&lt;/strong>：不创建主机目录，将文件保存在当前目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-P DIRECTORY, &amp;ndash;directory-prefix=DIRECTORY&lt;/strong>：将下载的文件保存到指定的目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -P /tmp http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-O FILE, &amp;ndash;output-document=FILE&lt;/strong>：将下载的文件保存为指定的文件名。如果存在会覆盖。&lt;code>-N&lt;/code>（时间戳检查），如果旧会覆盖，反之不会。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -O new_file.zip http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nc, &amp;ndash;no-clobber&lt;/strong>：如果文件已经存在，不覆盖原有文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nv, &amp;ndash;no-verbose&lt;/strong>：下载时只显示更新和出错信息，不显示详细的执行过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-v, &amp;ndash;verbose&lt;/strong>：详细模式，增加输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-q, &amp;ndash;quiet&lt;/strong>：静默模式，减少输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;no-check-certificate&lt;/strong>：下载 HTTPS 网站资源时，跳过证书检测过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-t NUM 或 &amp;ndash;tries=NUM&lt;/strong>：指定最大尝试次数。如果下载失败，wget 会尝试重新下载指定的次数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-U AGENT 或 &amp;ndash;user-agent=AGENT&lt;/strong>：指定 User-Agent 字符串。这可以用来伪装为不同的浏览器或客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-N 或 &amp;ndash;timestamping&lt;/strong>：如果本地文件存在且时间戳较新，则不重新下载文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-T SEC 或 &amp;ndash;timeout=SEC&lt;/strong>：指定超时时间（以秒为单位）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-A TYPES 或 &amp;ndash;accept=TYPES&lt;/strong>：指定下载文件的类型。例如，&lt;code>-A jpg,png,gif&lt;/code> 表示只下载 jpg、png 和 gif 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-d 或 &amp;ndash;debug&lt;/strong>：打印调试输出。这会在标准错误上输出大量信息，通常用于诊断问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>常用组合：&lt;/p>
&lt;p>&lt;code>wget -O-&lt;/code>:O表示指定文件名，后面-表示没有指定文件名，内容将输出到TTY。&lt;/p>
&lt;p>通常配合&lt;code>bash -c &amp;quot;$(wget -O- url)&amp;quot;&lt;/code>运行脚本。url为脚本地址。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>其中$()表示在当前TTY中运行子命令，下载脚本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[bash -c](#bash -c)表示将下载的字符串做为命令执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="bash--c">
&lt;a href="#bash--c" class="header-anchor">#&lt;/a>
bash -c
&lt;/h3>&lt;p>&lt;code>bash -c&lt;/code> 命令用于在 Bash shell 中执行一个字符串作为命令。&lt;/p>
&lt;p>基本语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">bash -c &lt;span class="s1">&amp;#39;command_string&amp;#39;&lt;/span> &lt;span class="o">[&lt;/span>arg0 &lt;span class="o">[&lt;/span>arg1 ...&lt;span class="o">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>command_string&lt;/code> 是你想要执行的命令字符串。&lt;/li>
&lt;li>&lt;code>arg0&lt;/code>、&lt;code>arg1&lt;/code> 等是可选的，它们会被用作 &lt;code>$0&lt;/code>、&lt;code>$1&lt;/code>、&lt;code>$2&lt;/code> 等 shell 变量在 &lt;code>command_string&lt;/code> 内部。
&lt;ul>
&lt;li>注意这里的$0并不是脚本名或终端名，而是第一个参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>字符串可以用&lt;code>&amp;quot;&amp;quot;/''&lt;/code>，区别在于双引号会转义特殊字符，单引号不会。执行脚本时建议双引号。&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo Hello, World!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello, World!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo $0 $1&amp;#39;&lt;/span> bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bash -c &amp;#34;$(wget -O- https://gist.githubusercontent.com/lss233/2fdd75be3f0724739368d0dcd9d1367d/raw/62a790da4a391af096074b3355c2c2b7ecab3c28/chatgpt-mirai-installer-gocqhttp.sh)&amp;#34; chatgpt-qq-bot安装脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr></description></item><item><title>Open Source License Introduction</title><link>https://arlettebrook.github.io/p/open-source-license-introduction/</link><pubDate>Mon, 06 May 2024 23:22:29 +0800</pubDate><guid>https://arlettebrook.github.io/p/open-source-license-introduction/</guid><description>&lt;hr>
&lt;blockquote>
&lt;p>开源协议(开源许可证)是每一个想要做开源软件的开发者都需要了解的，即使你不想做开源软件，那么当你使用他人开源的软件时也需要了解一些开源协议相关的内容，这样能够尽量避免一些不必要的麻烦。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="什么是开源">
&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%bc%80%e6%ba%90" class="header-anchor">#&lt;/a>
什么是开源
&lt;/h2>&lt;p>开源即开放源代码，是 &lt;a class="link" href="https://opensource.org/" target="_blank" rel="noopener"
>OSI (Open Source Initiative)&lt;/a> 这个组织提出来的。而被开源的软件，我们通常称为开源软件。你可能还见到过 &lt;code>Free Software&lt;/code> 一词，它代表 &lt;code>自由软件&lt;/code> 而非 &lt;code>免费软件&lt;/code>，是开源软件的前身。&lt;/p>
&lt;p>开源软件 = 开放源代码 + 开源协议，一份没有添加开源协议的开源代码，并不是真正的开源软件，也就不能随意使用。&lt;/p>
&lt;blockquote>
&lt;p>注意：如果你在 GitHub 上创建了一个没有开源协议的公共代码仓库，其他用户仍然有权查看并为其创建分支，这是由 GitHub 的&lt;a class="link" href="https://docs.github.com/zh/site-policy/github-terms/github-terms-of-service#4-license-grant-to-us" target="_blank" rel="noopener"
>服务条款&lt;/a>决定的。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="开源许可证">
&lt;a href="#%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81" class="header-anchor">#&lt;/a>
开源许可证
&lt;/h2>&lt;p>开源协议是指开源软件所携带的一份声明协议，这份协议也叫开源许可证。开源许可证声明了开源协议的内容，规定了&lt;strong>原作者和使用者的权利以及义务&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>开源许可证是开源软件生态系统的基础，可以促进软件的协同开发&lt;/strong>。&lt;/p>
&lt;p>开源许可证是具有法律效力的，并且需要得到 OSI 这个组织的认证，目前 OSI 共计认证了 &lt;a class="link" href="https://opensource.org/licenses/category" target="_blank" rel="noopener"
>110+&lt;/a> 个开源许可证，这些被认证的开源许可证都必须遵循 &lt;a class="link" href="https://opensource.org/osd" target="_blank" rel="noopener"
>OSD (Open Source Definition)&lt;/a> 规则。&lt;/p>
&lt;p>虽然开源许可证非常多，但常用的就那么几种。常见的开源许可证主要有 Apache、MIT、BSD、GPL、LGPL、MPL、SSPL 等。&lt;/p>
&lt;p>开源许可证分成两大类：宽松型许可证（Permissive Licenses）、著作权型许可证（反版权许可证）（Copyleft Licenses）。&lt;/p>
&lt;p>​ 宽松型许可证（Permissive Licenses）是一种对软件的使用、修改、传播等方式采用最低限制的自由软件许可协议条款类型。这种类型的软件许可协议将不保证原作品的派生作品会继续保持与原作品完全相同的相关限制条件，从而为原作品的自由使用、修改和传播等提供更大的空间。&lt;/p>
&lt;p>​ 著作权型许可证（Copyleft Licenses）是经原作者许可在有限空间内的自由使用、修改和传播，且不得违背原作品的限制条款。如果一款软件使用 Copyleft 类型许可协议规定软件不得用于&lt;strong>商业用途&lt;/strong>，且不得&lt;strong>闭源&lt;/strong>，那么后续的衍生子软件也必须得遵循该条款。&lt;/p>
&lt;p>&lt;strong>两者最大的差别在于&lt;/strong>：在软件被修改并再发行时， Copyleft License 仍然强制要求公开源代码（衍生软件需要开源），而 Permissive licence 不要求公开源代码（衍生软件可以变为专有软件）。&lt;/p>
&lt;p>其中，Apache、MIT、BSD 都是宽松型许可证，GPL 是典型的著作权型（copyleft ）许可证，LGPL、MPL 是弱著作权型（copyleft ）许可证。SSPL 则是近年来 MongoDB 创建的一个新许可证，存在较大争议，开放源代码促进会 OSI 甚至认为 SSPL 就不是开源许可协议。&lt;/p>
&lt;p>此外，还有一类是 Creative Commons（CC）知识共享协议。严格意义上说该协议并不能说是真正的开源协议，它们大多是被使用于设计类的工程上。CC 协议种类繁多，每一种都授权特定的权利。大多数的比较严格的 CC 协议会声明 “署名权，非商业用途，禁止衍生” 条款，这意味着你可以自由的分享这个作品，但你不能改变它和对其收费，而且必须声明作品的归属。这个许可协议非常的有用，它可以让你的作品传播出去，但又可以对作品的使用保留部分或完全的控制。最少限制的 CC 协议类型当属 “署名” 协议，这意味着只要人们能维护你的名誉，他们对你的作品怎么使用都行。&lt;/p>
&lt;p>下面就主要介绍下几种常见开源许可证。&lt;/p>
&lt;h3 id="宽松型许可证permissive-licenses">
&lt;a href="#%e5%ae%bd%e6%9d%be%e5%9e%8b%e8%ae%b8%e5%8f%af%e8%af%81permissive-licenses" class="header-anchor">#&lt;/a>
宽松型许可证（Permissive Licenses）
&lt;/h3>&lt;p>顾名思义，这类开源许可证比较宽松，限制更少。常见宽松开源许可证有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="noopener"
>BSD (2-Clause)&lt;/a> (Berkeley Software Distribution，伯克利软件发行版)&lt;/p>
&lt;p>源代码或二进制形式的重新分发，必须保留原始的许可证声明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/BSD-3-Clause" target="_blank" rel="noopener"
>BSD (3-Clause)&lt;/a>&lt;/p>
&lt;p>在 BSD(2-Clause) 基础上增加了一条，禁止使用原始作者的名字为衍生软件进行促销。&lt;/p>
&lt;p>Go 语言就在使用 BSD (3-Clause) 开源许可证。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener"
>MIT&lt;/a> (Massachusetts Institute of Technology，麻省理工学院许可证)&lt;/p>
&lt;p>免费授予任何人该软件及相关文档的权限，包括但不限于使用、复制、修改、合并、发表、分发、再授权、出售软件的副本。分发软件时，必须保留原始的许可证声明。&lt;/p>
&lt;p>MIT 是最为宽松的开源许可证，所以这也使得它成为最流行的开源许可证，如目前在前端领域非常有名的 Vue.js 就在使用它。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/Apache-2.0" target="_blank" rel="noopener"
>Apache-2.0&lt;/a> (Apache 软件基金会发布的许可证)&lt;/p>
&lt;p>Apache 许可证内容非常多，不过可以简单的总结几点：&lt;/p>
&lt;p>分发软件时，必须保留原始的许可证声明。&lt;/p>
&lt;p>所有修改过的文件，必须加以说明告知用户此文件已被更改。&lt;/p>
&lt;p>没有修改过的文件，不得修改许可证。&lt;/p>
&lt;p>云原生领域著名软件 Kubernetes 使用的正是 Apache-2.0 开源许可证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="著作权型许可证copyleft-licenses">
&lt;a href="#%e8%91%97%e4%bd%9c%e6%9d%83%e5%9e%8b%e8%ae%b8%e5%8f%af%e8%af%81copyleft-licenses" class="header-anchor">#&lt;/a>
著作权型许可证（Copyleft Licenses）
&lt;/h3>&lt;p>Copyleft 一词由 理查德·斯托曼 发明，表示 Copyright (版权) 的反义词。Copyleft 表示不经许可，用户无权复制，商业软件开发人员通过 Copyleft剥夺了用户的自由。Copyright 则表示不经许可，用户有权复制，Copyright使用版权来给予用户自由。&lt;/p>
&lt;p>因此Copyleft 类的许可证要比 Permissive 许可证限制更多。注意：不一定要经过原作者许可。常见 Copyleft 开源许可证有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/gpl-license" target="_blank" rel="noopener"
>GPL&lt;/a> (GNU General Public License)&lt;/p>
&lt;p>GPL 有两个版本，GPL-2.0 和 GPL-3，同 BSD 一样，更高版本会带来更多的限制。GPL 协议内容也非常多，我们最需要关注的一点是：使用了 GPL 协议的开源软件，其衍生软件如果需要分发，就必须开源并且同样要使用此协议。&lt;/p>
&lt;p>由于这条规定的存在，有人甚至把 GPL 协议称为 “GPL 病毒”，因为它具有跟病毒一样的传染性。不过 GPL 仍然是非常流行的开源许可证，比如大名鼎鼎的 Linux 就采用了 GPL 协议。&lt;/p>
&lt;p>GPL 是流行开源许可证中最为严格的，所以对于使用开源软件所衍化的商业化软件就不够友好了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/lgpl-license" target="_blank" rel="noopener"
>LGPL&lt;/a> (GNU Library General Public License)&lt;/p>
&lt;p>算是 GPL 的一个变种，主要为类库使用而设计的开源协议。&lt;/p>
&lt;p>商用软件如果采用类库方式引用使用了 LGPL 协议的开源软件，则可以不用开源。&lt;/p>
&lt;p>如果是修改或衍生软件需要分发，则必须开源并且同样要使用此协议。这点与 GPL 协议一样。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.gnu.org/licenses/agpl-3.0.en.html" target="_blank" rel="noopener"
>AGPL&lt;/a> (GNU Affero General Public License)&lt;/p>
&lt;p>除了 AGPL 许可证，上面介绍的其他许可证的限制条件都是只有在分发时才需要遵守。而 SaaS 软件作为一项云服务则不构成分发，所以可以不遵守这些许可证条款。&lt;/p>
&lt;p>为了解决这些早期发布的许可证对 SaaS 软件无效的尴尬，GNU 又发布了 AGPL 许可证，它规定如果 SaaS 用到的代码是该许可证，那么其云服务的代码也必须开源。&lt;/p>
&lt;p>国产开源时序数据库 TDengine 为了阻止云厂商免费使用其开源版本，就采用了 AGPL 协议。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/MPL-2.0" target="_blank" rel="noopener"
>MPL-2.0&lt;/a> (Mozilla Public License 2.0，Mozilla 基金会发布的许可证)&lt;/p>
&lt;p>MPL 融合了 BSD 开源许可证 和 GPL 开源许可证 的特性，力争在专有软件和开源软件开发者之间寻求平衡。是比 BSD 更严格，比 GPL 更宽松的开源许可证。&lt;/p>
&lt;p>MPL 允许新增的独立代码文件闭源，但在 MPL 授权下的代码文件必须保持 MPL 授权且开源。这使得 MPL 既不像 MIT 和 BSD 那样允许派生作品完全转化为闭源，也不像 GPL 那样要求所有的派生作品，包括新的组件在内，必须全部保持使用 GPL。&lt;/p>
&lt;p>Mozilla 自家的 Firefox 浏览器就使用此开源许可证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>以上介绍的开源许可证都是较为常见的许可证，另外还有两个不太常见但却值得一提的许可证。&lt;/p>
&lt;p>一个是 &lt;a class="link" href="https://opensource.org/license/unlicense/" target="_blank" rel="noopener"
>Unlicense&lt;/a> 许可证，翻译过来叫「零约束许可证」，可以说是被 OSI 认证的最开放的许可证了。根据名字也能看出来，Unlicense 是一个不包含任何约束条件的许可证，专用于贡献作品到公共领域。任何人都可以对开源软件进行自由复制、修改、发布、使用、编译、出售等，并且可用于任何商业或非商业目的。&lt;/p>
&lt;p>另外，在 OSI 官网公布的开源许可证列表中，还有一个叫「&lt;a class="link" href="https://opensource.org/licenses/MulanPSL-2.0" target="_blank" rel="noopener"
>木兰（Mulan PSL2）&lt;/a>」的开源许可证，它是中国本土唯一获得 OSI 认可的开源许可证。Mulan PSL2 以中英文双语表述，中英文版本具有同等法律效力。如果中英文版本存在任何冲突不一致，以中文版为准。&lt;/p>
&lt;p>「木兰」并不是一个许可证，而是一系列许可证，它包含木兰宽松许可证、木兰公共许可证、木兰开放作品许可协议。其中木兰宽松许可证第 2 版（Mulan PSL2）在 2020 年 2 月 14 日通过 OSI 批准。&lt;/p>
&lt;p>如果你想使用一个中文的开源许可证，那么 Mulan PSL2 目前是你唯一的选择。&lt;/p>
&lt;hr>
&lt;h2 id="使用开源许可证">
&lt;a href="#%e4%bd%bf%e7%94%a8%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81" class="header-anchor">#&lt;/a>
使用开源许可证
&lt;/h2>&lt;p>以 MIT 为例，我们来学习下如何在自己的开源项目中使用开源许可证：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先我们需要在自己的开源项目根目录下创建一个叫 &lt;code>LICENSE&lt;/code> 的文本文件，注意文件名不包含任何后缀。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后去到 OSI 官网找到 &lt;a class="link" href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener"
>MIT&lt;/a> 开源许可证模板，内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">Copyright &amp;lt;YEAR&amp;gt; &amp;lt;COPYRIGHT HOLDER&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files &lt;span class="o">(&lt;/span>the “Software”&lt;span class="o">)&lt;/span>, to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to &lt;span class="k">do&lt;/span> so, subject to the following conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将开源许可证模板内容复制到 &lt;code>LICENSE&lt;/code> 文本文件中，并将第一行 &lt;code>Copyright&lt;/code> 后面的 &lt;code>&amp;lt;YEAR&amp;gt;&lt;/code> 替换为当前年份，将 &lt;code>&amp;lt;COPYRIGHT HOLDER&amp;gt;&lt;/code> 替换为自己的名字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当开放项目源代码时，将此文件一同开放出去即可。如果你使用 GitHub 开放源码，则只需要将此 &lt;code>LICENSE&lt;/code> 加入到 git 管理即可。&lt;/p>
&lt;ol>
&lt;li>如果你是在 GitHub 上新建开源项目，在创建项目界面，有一个 &lt;code>Choose a license&lt;/code> 按钮可以很方便的选择一款开源协议，并且 GitHub 会自动替换许可证模板中的年份、作者等信息。&lt;/li>
&lt;li>另外，我们在开放源代码时，其实可以不使用 OSI 认证的开源许可证，而是选择自己写一份许可证，用来声明版权。这同样是具有法律效力的，不过这份许可证就不能叫做开源许可证了。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="如何选择开源许可证">
&lt;a href="#%e5%a6%82%e4%bd%95%e9%80%89%e6%8b%a9%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81" class="header-anchor">#&lt;/a>
如何选择开源许可证
&lt;/h2>&lt;p>乌克兰程序员 Paul Bagwell 画了&lt;a class="link" href="https://web.archive.org/web/20110503183702/http://pbagwl.com/post/5078147450/description-of-popular-software-licenses" target="_blank" rel="noopener"
>一张图&lt;/a>在网上很是流行，阮一峰老师将其翻译成了&lt;a class="link" href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener"
>中文&lt;/a>，如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/free_software_licenses.png"
width="1600"
height="1000"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/free_software_licenses_hu62a26bd1b1b1f60a529ae1edd7e8dcc3_117471_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/free_software_licenses_hu62a26bd1b1b1f60a529ae1edd7e8dcc3_117471_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="How to choose a license?"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;blockquote>
&lt;p>注：&lt;/p>
&lt;ol>
&lt;li>关于什么是许可证兼容性可以参考：&lt;a class="link" href="https://arlettebrook.github.io/docs/%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81%e5%85%bc%e5%ae%b9%e6%80%a7%e6%8c%87%e5%8d%97.docx" >《开源许可证兼容性指南.docx》&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>从上图中可以看出，大体上左边的许可证比较严格，右边的许可证较为宽松。此图虽然不够严谨，胜在方便理解。在开源自己的项目时，可以根据此图快速选择出适合自己的开源许可证。&lt;/p>
&lt;p>更多&lt;a class="link" href="https://www.runoob.com/wp-content/uploads/2018/03/61590003177751b9d5bd.jpg" target="_blank" rel="noopener"
>参考&lt;/a>图：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507181208566.png"
width="1670"
height="732"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507181208566_hud15a19a3cadf380d55c54b52e5e9de59_702194_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507181208566_hud15a19a3cadf380d55c54b52e5e9de59_702194_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="How to choose a license?"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="547px"
>&lt;/p>
&lt;hr>
&lt;h2 id="知识共享许可证creative-commonscc">
&lt;a href="#%e7%9f%a5%e8%af%86%e5%85%b1%e4%ba%ab%e8%ae%b8%e5%8f%af%e8%af%81creative-commonscc" class="header-anchor">#&lt;/a>
知识共享许可证Creative Commons（CC）
&lt;/h2>&lt;p>有时候，我们想要开源的并不是一款软件，而是一套开源的教程或者书籍等，此时严格来讲并不能使用上面所介绍的开源许可证。&lt;/p>
&lt;p>在 &lt;a class="link" href="https://opensource.org/osd" target="_blank" rel="noopener"
>OSD 第 2 条&lt;/a>中有规定：开源软件是必须要包含源代码的。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/source-code.png"
width="2220"
height="346"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/source-code_hua833ceec382ec66138cd84613b0a4c66_105215_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/source-code_hua833ceec382ec66138cd84613b0a4c66_105215_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="source-code.png"
class="gallery-image"
data-flex-grow="641"
data-flex-basis="1539px"
>&lt;/p>
&lt;p>也就是说，教程或者书籍等没有源代码，并不能作为开源软件，也就不能使用开源许可证。&lt;/p>
&lt;p>此类项目想要开源，应该使用「知识共享许可证」（creative commons licenses），通常也叫 CC 许可证。&lt;/p>
&lt;p>CC 许可证由 &lt;a class="link" href="https://creativecommons.org/" target="_blank" rel="noopener"
>Creative Commons 基金会&lt;/a>提出，虽然没有得到 OSI 的认可，但他仍具有法律效力，并且应用广泛。&lt;/p>
&lt;p>上面提到的「木兰开放作品许可协议」就是对标知识共享许可证的。同木兰许可证类似，知识共享许可证也是一系列许可证，目前最新的知识共享许可证为 4.0 版本，常见的许可证有 6 种：&lt;/p>
&lt;ul>
&lt;li>CC BY 4.0 (Attribution 4.0 International，署名 4.0 国际)&lt;/li>
&lt;li>CC BY-SA 4.0 (Attribution-ShareAlike 4.0 International，署名-相同方式共享 4.0 国际)&lt;/li>
&lt;li>CC BY-ND 4.0 (Attribution-NoDerivatives 4.0 International，署名-禁止演绎 4.0 国际)&lt;/li>
&lt;li>CC BY-NC 4.0 (Attribution-NonCommercial 4.0 International，署名-非商业性使用 4.0 国际)&lt;/li>
&lt;li>CC BY-NC-SA 4.0 (Attribution-NonCommercial-ShareAlike 4.0 International，署名-非商业性使用-相同方式共享 4.0 国际)&lt;/li>
&lt;li>CC BY-NC-ND 4.0 (Attribution-NonCommercial-NoDerivatives 4.0 International，署名-非商业性使用-禁止演绎 4.0 国际)&lt;/li>
&lt;/ul>
&lt;p>可以发现，CC 许可证命名方式就是它的权利简拼组合。以下是对其中出现的几个名词的解释：&lt;/p>
&lt;p>​ 署名：必须给出原作者的署名，提供指向本许可协议的链接，同时标明是否对原始作品作了修改。&lt;/p>
&lt;p>​ 非商业性使用：您不得将本作品用于商业目的。不得用于盈利性目的。&lt;/p>
&lt;p>​ 相同方式共享：在任何媒介以任何形式复制、发行本作品时必须采用相同的许可证。&lt;/p>
&lt;p>​ 禁止演绎：禁止修改、转换或以本作品为基础进行创作。&lt;/p>
&lt;p>之所以每个许可证后面都带有国际两个字，是因为这系列许可证发布了不同的地域版，不过国际版更为通用。&lt;/p>
&lt;p>需要注意 CC 系列许可证一旦发布，就不可收回，只要你遵守许可协议条款，许可人就无法收回你的这些权利。&lt;/p>
&lt;p>如需使用 CC 许可证，可以参考示例。&lt;/p>
&lt;p>​ 本教程采用&lt;a class="link" href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh" target="_blank" rel="noopener"
>知识共享 署名-相同方式共享 4.0国际协议&lt;/a>。&lt;/p>
&lt;p>​ 博客内容遵循 &lt;a class="link" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"
>知识共享 署名 - 非商业性 - 相同方式共享 4.0 国际协议&lt;/a>&lt;/p>
&lt;p>或参考&lt;a class="link" href="https://creativecommons.org/licenses/" target="_blank" rel="noopener"
>官网&lt;/a>自行组合。&lt;/p>
&lt;p>注意：&lt;strong>协议链接并不必须指定&lt;/strong>，但在使用知识共享协议时，提供协议链接是一个很好的做法，因为它可以帮助其他人方便地访问并了解你所使用的具体协议内容。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507193827642.png"
width="820"
height="138"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507193827642_hu9ccdd84b4ee4ed681b3d8e138c5b0446_19113_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507193827642_hu9ccdd84b4ee4ed681b3d8e138c5b0446_19113_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="cc协议示例"
class="gallery-image"
data-flex-grow="594"
data-flex-basis="1426px"
>&lt;/p>
&lt;hr>
&lt;h2 id="开源案例">
&lt;a href="#%e5%bc%80%e6%ba%90%e6%a1%88%e4%be%8b" class="header-anchor">#&lt;/a>
开源案例
&lt;/h2>&lt;p>介绍完了开源协议，我们再来看一个开源案例：&lt;/p>
&lt;h3 id="中国首例因违反-gpl-协议致侵害计算机软件著作权纠纷">
&lt;a href="#%e4%b8%ad%e5%9b%bd%e9%a6%96%e4%be%8b%e5%9b%a0%e8%bf%9d%e5%8f%8d-gpl-%e5%8d%8f%e8%ae%ae%e8%87%b4%e4%be%b5%e5%ae%b3%e8%ae%a1%e7%ae%97%e6%9c%ba%e8%bd%af%e4%bb%b6%e8%91%97%e4%bd%9c%e6%9d%83%e7%ba%a0%e7%ba%b7" class="header-anchor">#&lt;/a>
中国首例因违反 GPL 协议致侵害计算机软件著作权纠纷
&lt;/h3>&lt;p>2021-06-30 在中国裁判文书网上公布了一则民事判决书，标题为：「济宁市罗盒网络科技有限公司诉被告福建风灵创景科技有限公司(以下简称福建风灵公司)、被告北京风灵创景科技有限公司(以下简称北京风灵公司)、被告深圳市腾讯计算机系统有限公司(以下简称腾讯公司)侵害计算机软件著作权纠纷一审民事判决书」。案件概况如下：&lt;/p>
&lt;p>原告济宁市罗盒网络科技有限公司独立开「罗盒（VirtualApp）」从 2016 年 7 月 8 日的版本开始引入开源协议，起初为 LGPL3.0 协议，从 2016 年 8 月 12 日开始更换为 GPL3.0 协议。2017 年 10 月 29 日开始删除适用 GPL3.0 协议的表述，但英文介绍中仍保留&lt;code>openplatform&lt;/code> 的表述。&lt;/p>
&lt;p>2018 年 9 月，原告调查发现名为「点心桌面」的软件使用了 VirtualApp 的代码，将两个软件源代码进行分析比对，两者间 421 个可比代码中有 308 个代码具有实质相似性，有 27 个代码具有高度相似性，有 78 个代码具有一般相似性。因此，被诉侵权软件与涉案软件构成实质相似。&lt;/p>
&lt;p>经查，被诉「点心桌面」中使用了原告采用 GPL3.0 协议发布的 VirtualApp，被告对此亦予以确认。&lt;/p>
&lt;p>原告申请赔偿 2000 万，最终，法院酌情确定赔偿数额为 50 万元。原告为制止本案侵权行为所支出的合理费用，计算在赔偿损失数额范围之内。&lt;/p>
&lt;p>更多细节可以&lt;a class="link" href="https://arlettebrook.github.io/docs/%e5%ae%81%e5%b8%82%e7%bd%97%e7%9b%92%e7%bd%91%e7%bb%9c%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8%e8%af%89%e8%a2%ab%e5%91%8a%e7%a6%8f%e5%bb%ba%e9%a3%8e%e7%81%b5%e5%88%9b%e6%99%af%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8%e4%bb%a5%e4%b8%8b%e7%ae%80%e7%a7%b0%e7%a6%8f%e5%bb%ba%e9%a3%8e%e7%81%b5%e5%85%ac%e5%8f%b8%e8%a2%ab%e5%91%8a%e5%8c%97%e4%ba%ac%e9%a3%8e%e7%81%b5%e5%88%9b%e6%99%af%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90....docx" >点击下载&lt;/a>查看。&lt;/p>
&lt;p>该案例给开源软件使用者敲响一记警钟，使用开源软件一定要查看并遵循开源许可证。&lt;/p>
&lt;hr>
&lt;h2 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">#&lt;/a>
总结
&lt;/h2>&lt;p>本文带大家一起认识了什么是开源协议，并且还对常用开源协议进行了分析，以及如何使用开源协议。同时讲解了针对书籍等开源作品使用的知识共享许可协议和使用方式。最终分享了一个开源软件纠纷案例，以说明了解开源协议的重要性。&lt;/p>
&lt;p>此文仅为作者本人学习并整理的开源协议相关知识，即不够全面，也不够严谨，不能作为法律依据。希望你能通过本篇文章认识并重视开源协议，学习和书写本篇文章时间有限，难免出现表达不够准确或错误的地方，欢迎批评指正。&lt;/p>
&lt;p>最后，想提醒大家，身为一名开发者，掌握开源协议是有必要的。不过开源协议的内容非常多且专业，想要完全了解也是一项繁重的工作，毕竟这不是我们的专业领域，如果遇到无法确定的问题，可以寻求身边的专业法务帮忙。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>&lt;a class="link" href="https://www.runoob.com/w3cnote/open-source-license.html" target="_blank" rel="noopener"
>各种开源协议介绍&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cn.pingcap.com/blog/introduction-of-open-source-license/" target="_blank" rel="noopener"
>一文看懂开源许可证丨开源知识科普&lt;/a>&lt;/li>
&lt;li>原文：&lt;a class="link" href="https://jianghushinian.cn/2023/01/15/open-source-license-introduction/" target="_blank" rel="noopener"
>开源协议简介&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener"
>如何选择开源许可证？&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Go modules详解</title><link>https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/</link><pubDate>Sun, 28 Apr 2024 10:57:17 +0800</pubDate><guid>https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/</guid><description>&lt;hr>
&lt;h2 id="概述">
&lt;a href="#%e6%a6%82%e8%bf%b0" class="header-anchor">#&lt;/a>
概述
&lt;/h2>&lt;p>大多数语言都有“依赖”、“包”等概念，&lt;code>Go&lt;/code>语言的依赖处理经历了几次变革。&lt;/p>
&lt;p>最早的时候，&lt;code>Go&lt;/code>所依赖的所有的第三方库都放在&lt;code>GOPATH&lt;/code>这个目录下面。从&lt;code>v1.5&lt;/code>开始引入&lt;code>vendor&lt;/code>模式，如果项目目录下有&lt;code>vendor&lt;/code>目录，那么&lt;code>go&lt;/code>工具链会优先使用&lt;code>vendor&lt;/code>内的包进行编译、测试等。&lt;/p>
&lt;p>从&lt;code>v1.11&lt;/code>开始，引入了&lt;code>Go Modules&lt;/code> 作为依赖解决方案，到&lt;code>v1.14&lt;/code>宣布&lt;code>Go Modules&lt;/code>已经可以用于生产环境，到&lt;code>v1.16&lt;/code>版本开始&lt;code>Go Module&lt;/code>默认开启。&lt;/p>
&lt;h3 id="什么是-go-modules">
&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af-go-modules" class="header-anchor">#&lt;/a>
什么是 Go Modules
&lt;/h3>&lt;p>Go modules 是 Go 语言的依赖解决方案，发布于 Go1.11，成长于 Go1.12，丰富于 Go1.13，正式于 Go1.14 推荐在生产上使用。&lt;/p>
&lt;p>Go Modules使得Go语言开发者能够更方便地管理代码包及其版本，并能够与现有的版本控制工具（如Git、SVN等）集成使用。&lt;/p>
&lt;p>在传统的GOPATH模式中，所有Go代码都必须位于一个全局的GOPATH路径之下，这使得在不同项目中使用不同版本的依赖包变得非常困难。然而，在Go Modules模式下，每个项目都可以独立管理自己的依赖关系，具有更好的兼容性。当使用Go Modules模式后，项目中会自动创建go.mod文件，其中记录了项目所依赖的模块及其版本信息。&lt;strong>go.mod是Go语言项目中的模块文件&lt;/strong>，用于管理项目的依赖关系和版本信息。&lt;/p>
&lt;p>Go Modules也支持语义化版本控制，这意味着开发者可以指定依赖包的版本范围，而不是仅仅依赖最新的版本。这种灵活性有助于确保项目的稳定性和可维护性。&lt;/p>
&lt;p>Go moudles 目前集成在 Go 的工具链中，只要安装了 Go，自然而然也就可以使用 Go moudles 了，而 Go modules 的出现也解决了在 Go1.11 前的几个常见争议问题：&lt;/p>
&lt;ul>
&lt;li>Go 语言长久以来的依赖管理问题。&lt;/li>
&lt;li>“淘汰”现有的 &lt;code>GOPATH&lt;/code> 的使用模式。&lt;/li>
&lt;li>统一社区中的其它的依赖管理工具（提供迁移功能）。&lt;/li>
&lt;/ul>
&lt;p>优势&lt;/p>
&lt;ul>
&lt;li>首先，研发者能够在任何目录下工作，而不仅仅是在GOPATH指定的目录。&lt;/li>
&lt;li>可以安装依赖包的指定版本，而不是只能从master分支安装最新的版本。&lt;/li>
&lt;li>可以导入同一个依赖包的多个版本。当我们老项目使用老版本，新项目使用新版本时会非常有用。&lt;/li>
&lt;li>要有一个能够罗列当前项目所依赖包的列表。这个的好处是当我们发布项目时不用同时发布所依赖的包。Go能够根据该文件自动下载对应的包。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="go-path介绍">
&lt;a href="#go-path%e4%bb%8b%e7%bb%8d" class="header-anchor">#&lt;/a>
GO PATH介绍
&lt;/h2>&lt;p>安装好go开发环境之后，可以运行&lt;code>go env&lt;/code>查看go运行时的环境变量。要修改这些环境变量，可以通过配置环境变量来覆盖默认值(覆盖了就不能通过命令设置)，如临时设置&lt;code>export GO111MODULE=on&lt;/code>。或者通过命令&lt;code>go env -w key=value&lt;/code>，如&lt;code>go env -w GO111MODULE=on&lt;/code>。通过命令修改的环境变量保存在&lt;code>GOENV&lt;/code>这个环境变量指向的文件。&lt;/p>
&lt;p>有两个比较重要的环境变量：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GOROOT&lt;/strong>：Golang 安装目录的路径，包含编译器程序和系统包，也可以放置三方包（不推荐）。新版本已经不需要配置这个环境变量了，安装了go会自动推断出该变量的值。如果安装之后环境变量中没有&lt;code>$GORROOT/bin&lt;/code>,需要手动添加，这样才能直接在命令行中运行go编译程序。&lt;/li>
&lt;li>&lt;strong>GOPATH&lt;/strong>：该工作目录，放置编译后二进制和 import 包时的搜索路径，一般有三个目录: bin、pkg、src。并且该环境变量必须手动设置。
&lt;ul>
&lt;li>bin：用来存放编译后的可执行文件。引入Go modules之后用于存放&lt;code>get install&lt;/code>安装的可执行文件。&lt;/li>
&lt;li>pkg：存储预编译的目标文件，以加快程序的后续编译速度。引入Go modules之后用于存放第三方包。&lt;/li>
&lt;li>src：存储所有.go文件或源代码。在编写 Go 应用程序，程序包和库时，一般会以&lt;code>$GOPATH/src/github.com/foo/bar&lt;/code>的路径进行存放。引入Go modules之后用一般不用，go项目可以放在任意目录中，不在是&lt;code>$GOPATH/src&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>因此在使用 GOPATH 模式下，我们需要将应用代码存放在固定的&lt;code>$GOPATH/src&lt;/code>目录下，并且如果执行go get来拉取外部依赖会自动下载并安装到&lt;code>$GOPATH&lt;/code>目录下。&lt;/p>
&lt;h3 id="gopath模式的弊端">
&lt;a href="#gopath%e6%a8%a1%e5%bc%8f%e7%9a%84%e5%bc%8a%e7%ab%af" class="header-anchor">#&lt;/a>
GOPATH模式的弊端
&lt;/h3>&lt;p>在 GOPATH 的 &lt;code>$GOPATH/src&lt;/code> 下进行 &lt;code>.go&lt;/code> 文件或源代码的存储，我们可以称其为 GOPATH 的模式，这个模式拥有一些弊端。&lt;/p>
&lt;ul>
&lt;li>A. &lt;strong>无版本控制概念&lt;/strong>. 在执行go get的时候，你无法传达任何的版本信息的期望，也就是说你也无法知道自己当前更新的是哪一个版本，也无法通过指定来拉取自己所期望的具体版本。&lt;/li>
&lt;li>B.&lt;strong>无法同步一致第三方版本号&lt;/strong>. 在运行 Go 应用程序的时候，你无法保证其它人与你所期望依赖的第三方库是相同的版本，也就是说在项目依赖库的管理上，你无法保证所有人的依赖版本都一致。&lt;/li>
&lt;li>C.&lt;strong>无法指定当前项目引用的第三方版本号&lt;/strong>. 你没办法处理 v1、v2、v3 等等不同版本的引用问题，因为 GOPATH 模式下的导入路径都是一样的，都是github.com/foo/bar。&lt;/li>
&lt;/ul>
&lt;p>Go 语言官方从 Go1.11 起开始推进 Go modules（前身vgo，知道即可，不需要深入了解），Go1.13 起不再推荐使用 GOPATH 的使用模式，Go modules 也渐趋稳定，因此新项目也没有必要继续使用GOPATH模式。&lt;/p>
&lt;hr>
&lt;h2 id="go-module-语义化版本规范">
&lt;a href="#go-module-%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83" class="header-anchor">#&lt;/a>
Go Module 语义化版本规范
&lt;/h2>&lt;p>Go Module 的设计采用了语义化版本规范，语义化版本规范非常流行且具有指导意义，本文就来聊聊语义化版本规范的设计和在 Go 中的应用。&lt;/p>
&lt;h3 id="语义化版本规范">
&lt;a href="#%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83" class="header-anchor">#&lt;/a>
语义化版本规范
&lt;/h3>&lt;p>语义化版本规范（SemVer）是由 Gravatars 创办者兼 GitHub 共同创办者 Tom Preston-Werner 所建立，旨在解决 &lt;a class="link" href="https://hwikizh.cyou/wiki/Dependency_hell" target="_blank" rel="noopener"
>&lt;code>依赖地狱&lt;/code>&lt;/a> 问题。&lt;/p>
&lt;p>它清楚明了的规定了版本格式、版本号递增规：&lt;/p>
&lt;p>&lt;strong>版本格式&lt;/strong>：采用 X.Y.Z 的格式，X 是主版本号、Y 是次版本号、而 Z 为修订号（即：主版本号.次版本号.修订号），其中 X、Y 和 Z 为非负的整数，且禁止在数字前方补零。&lt;/p>
&lt;p>&lt;strong>版本号递增规则：&lt;/strong>&lt;/p>
&lt;p>主版本号：当做了不兼容的 API 修改。&lt;/p>
&lt;p>次版本号：当做了向下兼容的功能性新增及修改。&lt;/p>
&lt;p>修订号：当做了向下兼容的问题修正。&lt;/p>
&lt;p>另外，&lt;code>先行版本号&lt;/code> 及 &lt;code>版本编译信息&lt;/code> 可以加到 &lt;code>主版本号.次版本号.修订号&lt;/code> 的后面，作为延伸。&lt;/p>
&lt;p>完整版本格式如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428181429712.png"
width="594"
height="393"
srcset="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428181429712_hu4e93c4fe90e112c1b95a6a33697eab15_28580_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428181429712_hu4e93c4fe90e112c1b95a6a33697eab15_28580_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="版本格式"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="362px"
>&lt;/p>
&lt;p>先行版本号可以有多个，如第一个为UTC时间，第二个为提交的哈希值：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">v4&lt;/span>&lt;span class="mf">.0.1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">0.20210109023952&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">943e75&lt;/span>&lt;span class="nx">fe5223&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">incompatible&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">v0&lt;/span>&lt;span class="mf">.0.0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">20240416160154&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">fe59bbe5cc7f&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中版本号核心部分 X.Y.Z 是必须的，使用 &lt;code>.&lt;/code> 连接，先行版本号和版本编译信息是可选的，先行版本号通过 &lt;code>-&lt;/code> 与核心部分连接，版本编译信息通过 &lt;code>+&lt;/code> 与核心部分或先行版本号连接。&lt;/p>
&lt;p>合法的几种版本号格式如下：&lt;/p>
&lt;ol>
&lt;li>主版本号.次版本号.修订号&lt;/li>
&lt;li>主版本号.次版本号.修订号-先行版本号&lt;/li>
&lt;li>主版本号.次版本号.修订号+版本编译信息&lt;/li>
&lt;li>主版本号.次版本号.修订号-先行版本号+版本编译信息&lt;/li>
&lt;/ol>
&lt;p>主版本号必须在有任何不兼容的修改被加入公共 API 时递增。每当主版本号递增时，次版本号和修订号必须归零。&lt;/p>
&lt;p>次版本号必须在有向下兼容的新功能出现或有改进时递增，或在任何公共 API 的功能被标记为弃用时也必须递增。每当次版本号递增时，修订号必须归零。&lt;/p>
&lt;p>修订号必须在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。&lt;/p>
&lt;p>存在先行版本号，意味着当前版本不够稳定，且可能存在兼容性问题。先行版本号是一连串以 &lt;code>.&lt;/code> 分隔的标识符，由 ASCII 字母数字和连接号 &lt;code>[0-9A-Za-z-]&lt;/code> 组成，禁止出现空白符，数字类型则禁止在前方补零。合法示例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。&lt;/p>
&lt;p>版本编译信息标志符规格与先行版本号基本相同，略有差异的是数字类型前方允许补零。合法示例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。&lt;/p>
&lt;p>除了上面几点说明，还需要额外关注以下几点：&lt;/p>
&lt;ol>
&lt;li>标记版本号的软件发行后，禁止改变该版本软件的内容。任何修改都必须以新版本发行。&lt;/li>
&lt;li>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。&lt;/li>
&lt;li>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。&lt;/li>
&lt;li>社区中还存在一个不成文的规定，对于次版本号，偶数为稳定版本，奇数为开发版本。当然不是所有项目都这样设计。&lt;/li>
&lt;/ol>
&lt;h3 id="使用语义化版本规范可能遇到的问题">
&lt;a href="#%e4%bd%bf%e7%94%a8%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83%e5%8f%af%e8%83%bd%e9%81%87%e5%88%b0%e7%9a%84%e9%97%ae%e9%a2%98" class="header-anchor">#&lt;/a>
使用语义化版本规范可能遇到的问题
&lt;/h3>&lt;p>在使用语义化版本规范过程中，可能人为或程序编写错误导致出现如下几种可预见的问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？&lt;/p>
&lt;p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文档中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。&lt;/p>
&lt;p>注意：不到万不得已，不要也不能去修改已发行的版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）&lt;/p>
&lt;p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住，语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>v1.2.3&lt;/code> 是一个语义化版本号吗？&lt;/p>
&lt;p>&lt;code>v1.2.3&lt;/code> 并不是的一个语义化的版本号。但是，在语义化版本号之前增加前缀 &lt;code>v&lt;/code> 是用来表示版本号的常用做法。在版本控制系统中，将 &lt;code>version&lt;/code> 缩写为 &lt;code>v&lt;/code> 是很常见的。比如：&lt;code>git tag v1.2.3 -m &amp;quot;Release version 1.2.3&amp;quot;&lt;/code> 中，&lt;code>v1.2.3&lt;/code> 表示标签名称，而 &lt;code>1.2.3&lt;/code> 是语义化版本号。go modules的模块版本也是在前面加&lt;code>v&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="如何验证语义化版本规范正确性">
&lt;a href="#%e5%a6%82%e4%bd%95%e9%aa%8c%e8%af%81%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83%e6%ad%a3%e7%a1%ae%e6%80%a7" class="header-anchor">#&lt;/a>
如何验证语义化版本规范正确性
&lt;/h3>&lt;p>官方提供了两个正则可以检查语义化版本号的正确性。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>支持按组名称提取匹配结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="p">^(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">major&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">minor&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">patch&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">prerelease&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">buildmetadata&lt;/span>&lt;span class="p">&amp;gt;[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?$&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Go 语言示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;regexp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">version&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;0.1.2-alpha+001&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pattern&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">regexp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustCompile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">`^(?P&amp;lt;major&amp;gt;0|[1-9]\d*)\.(?P&amp;lt;minor&amp;gt;0|[1-9]\d*)\.(?P&amp;lt;patch&amp;gt;0|[1-9]\d*)(?:-(?P&amp;lt;prerelease&amp;gt;(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P&amp;lt;buildmetadata&amp;gt;[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">pattern&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FindStringSubmatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">version&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">pattern&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SubexpNames&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MarshalIndent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;buildmetadata&amp;#34;: &amp;#34;001&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;major&amp;#34;: &amp;#34;0&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;minor&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;patch&amp;#34;: &amp;#34;2&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;prerelease&amp;#34;: &amp;#34;alpha&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;version&amp;#34;: &amp;#34;0.1.2-alpha+001&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>支持按编号提取匹配结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="p">^(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?$&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Go 语言示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;regexp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">version&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;0.1.2-alpha+001&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pattern&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">regexp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustCompile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">`^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">pattern&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FindStringSubmatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">version&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d -&amp;gt; %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">0 -&amp;gt; 0.1.2-alpha+001
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">1 -&amp;gt; 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">2 -&amp;gt; 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">3 -&amp;gt; 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">4 -&amp;gt; alpha
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">5 -&amp;gt; 001
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="go-modules版本设计">
&lt;a href="#go-modules%e7%89%88%e6%9c%ac%e8%ae%be%e8%ae%a1" class="header-anchor">#&lt;/a>
Go Modules版本设计
&lt;/h3>&lt;h4 id="依赖地狱">
&lt;a href="#%e4%be%9d%e8%b5%96%e5%9c%b0%e7%8b%b1" class="header-anchor">#&lt;/a>
依赖地狱
&lt;/h4>&lt;p>我们先来看下早期 Go 依赖包存在的依赖地狱问题：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428182831893.png"
width="1097"
height="513"
srcset="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428182831893_hu10246893e1c443d1187588789017c05f_64039_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428182831893_hu10246893e1c443d1187588789017c05f_64039_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="依赖地狱"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="513px"
>&lt;/p>
&lt;p>首先存在两个包 &lt;code>pkg1&lt;/code> 和 &lt;code>pkg2&lt;/code>，分别依赖 &lt;code>pkg3&lt;/code> 的 &lt;code>v1.0.0&lt;/code> 版本和 &lt;code>v2.0.0&lt;/code> 版本，现在我们开发一个 &lt;code>app&lt;/code> 包，它依赖 &lt;code>pkg1&lt;/code> 和 &lt;code>pkg2&lt;/code>，那么此时由于 &lt;code>app&lt;/code> 包只允许包含一个 &lt;code>pkg3&lt;/code> 依赖，所以 Go 构建工具无法抉择应该使用哪个版本的 &lt;code>pkg3&lt;/code>。这就是所谓的依赖地狱问题。&lt;/p>
&lt;h4 id="语义导入版本">
&lt;a href="#%e8%af%ad%e4%b9%89%e5%af%bc%e5%85%a5%e7%89%88%e6%9c%ac" class="header-anchor">#&lt;/a>
语义导入版本
&lt;/h4>&lt;p>为了解决依赖地狱问题，Go 在 1.11 版本时引入和 Go Modules：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428183011710.png"
width="1096"
height="499"
srcset="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428183011710_hu26cf2410430fcf457ac5158230a0c061_64758_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428183011710_hu26cf2410430fcf457ac5158230a0c061_64758_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Go Modules"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="527px"
>&lt;/p>
&lt;p>Go Module 解决问题的方式是，把 &lt;code>pkg3&lt;/code> 的 &lt;code>v1.0.0&lt;/code> 版本和 &lt;code>v2.0.0&lt;/code> 版本当作两个不同的包，这样也就允许了 &lt;code>app&lt;/code> 包能够同时包含多个不同版本的 &lt;code>pkg3&lt;/code>。&lt;/p>
&lt;p>在使用时，需要在包的导入路径上加上包的主版本号。这里以 &lt;a class="link" href="https://github.com/go-micro/go-micro" target="_blank" rel="noopener"
>&lt;code>go-micro&lt;/code>&lt;/a> 包使用为例，展示下 Go Module 语义导入版本的用法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;go-micro.dev/v4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// create a new service
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">service&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">micro&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewService&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">micro&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;helloworld&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialise flags
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Init&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// start the service
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到导入路径为 &lt;code>&amp;quot;go-micro.dev/v4&amp;quot;&lt;/code>，其中 &lt;code>v4&lt;/code> 就代表了需要引入 &lt;code>go-micro&lt;/code> 的 &lt;code>v4.y.z&lt;/code> 版本。&lt;/p>
&lt;hr>
&lt;h2 id="go-modules基本使用">
&lt;a href="#go-modules%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
Go Modules基本使用
&lt;/h2>&lt;h3 id="go-modules相关命令">
&lt;a href="#go-modules%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
go modules相关命令
&lt;/h3>&lt;p>在 Go modules 中，我们能够使用如下命令进行操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>介绍&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>go mod init &amp;lt;project&amp;gt;&lt;/code>&lt;/td>
&lt;td>初始化项目依赖，生成go.mod模块文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod download&lt;/code>&lt;/td>
&lt;td>根据go.mod文件下载依赖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod tidy&lt;/code>&lt;/td>
&lt;td>比对项目文件中引入的依赖与go.mod进行比对,整理模块文件，去除没有用到的依赖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod graph&lt;/code>&lt;/td>
&lt;td>输出依赖关系图、查看现有的依赖结构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod edit&lt;/code>&lt;/td>
&lt;td>编辑go.mod文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod vendor&lt;/code>&lt;/td>
&lt;td>将项目的所有依赖导出至vendor目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod verify&lt;/code>&lt;/td>
&lt;td>检验一个依赖包是否被篡改过&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod why&lt;/code>&lt;/td>
&lt;td>解释为什么需要某个依赖&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="go-modules参数配置">
&lt;a href="#go-modules%e5%8f%82%e6%95%b0%e9%85%8d%e7%bd%ae" class="header-anchor">#&lt;/a>
go modules参数配置
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>GO111MODULE&lt;/strong>&lt;/p>
&lt;p>Go语言提供了 GO111MODULE 这个环境变量来作为 Go modules 的开关，其允许设置以下参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>auto&lt;/td>
&lt;td>只要项目包含了 go.mod 文件的话启用 Go modules，目前在 Go1.11 至 Go1.14 中仍然是默认值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on&lt;/td>
&lt;td>启用 Go modules，推荐设置，将会是Go1.16版本之后的默认值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>off&lt;/td>
&lt;td>禁用 Go modules，不推荐设置。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你可能会留意到 GO111MODULE 这个名字比较“奇特”，实际上在 Go 语言中经常会有这类阶段性的变量， GO111MODULE 这个命名代表着Go语言在 1.11 版本添加的。后续版本中可能会去掉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GOPROXY&lt;/strong>&lt;/p>
&lt;p>这个环境变量主要是用于设置 Go 模块代理（Go module proxy），其作用是用于使 Go 在后续拉取模块版本时能够脱离传统的 VCS（版本控制系统，如github，就是源地址下载） 方式，直接通过镜像站点来&lt;strong>快速拉取&lt;/strong>。值为&lt;code>off&lt;/code>表示禁止模块代理。&lt;/p>
&lt;p>设置&lt;code>GOPROXY&lt;/code>可以&lt;strong>加速模块下载&lt;/strong>，&lt;strong>确保构建确定性&lt;/strong>（提供稳定的构建版本），&lt;strong>提高安全性&lt;/strong>，&lt;strong>确保模块始终可用&lt;/strong>。&lt;/p>
&lt;p>GOPROXY 的默认值是：&lt;code>https://proxy.golang.org,direct&lt;/code>，由于某些原因国内无法正常访问该地址，所以我们通常需要配置一个可访问的地址。目前国内社区使用比较多的有两个 &lt;a class="link" href="https://goproxy.cn" target="_blank" rel="noopener"
>https://goproxy.cn&lt;/a>和 &lt;a class="link" href="https://goproxy.io" target="_blank" rel="noopener"
>https://goproxy.io&lt;/a>，当然如果你的公司有提供GOPROXY地址那么就直接使用。并且修改的代理，通过&lt;code>go get&lt;/code>命令下载自己的公共模块，也会同步到 &lt;a class="link" href="https://pkg.go.dev/" target="_blank" rel="noopener"
>https://pkg.go.dev/&lt;/a>。&lt;/p>
&lt;p>设置GOPAROXY的命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">go env -w &lt;span class="nv">GOPROXY&lt;/span>&lt;span class="o">=&lt;/span>https://goproxy.cn,direct
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>GOPROXY 允许设置多个代理地址，多个地址之间需使用英文逗号 “,” 分隔。最后的 “direct” 是一个特殊指示符，用于指示 Go 回源到源地址去抓取（比如 GitHub 等）。当配置有多个代理地址时，如果第一个代理地址返回 404 或 410 错误时，Go 会自动尝试下一个代理地址，当遇见 “direct” 时触发回源，也就是&lt;strong>回到源地址&lt;/strong>去抓取。就是代理失败之后用传统方式（源地址下载模块）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GOPRIVATE&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>GONOPROXY/GONOSUMDB/GOPRIVATE&lt;/p>
&lt;p>这三个环境变量都是用在当前项目依赖了私有模块，例如像是你公司的私有 git 仓库，又或是 github 中的私有库，都是属于私有模块，都是要进行设置的，否则会拉取失败。&lt;/p>
&lt;p>更细致来讲，就是依赖了由 GOPROXY 指定的 Go 模块代理或由 GOSUMDB 指定 Go checksum database 都无法访问到的模块时的场景。&lt;/p>
&lt;p>而一般建议直接设置 GOPRIVATE，它的值将作为 GONOPROXY 和 GONOSUMDB 的默认值，所以建议的最佳姿势是直接使用 GOPRIVATE。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>设置了GOPROXY 之后，go 命令就会从配置的代理地址拉取和校验依赖包。当我们在项目中引入了非公开的包（公司内部git仓库或 github 私有仓库等），此时便无法正常从代理拉取到这些非公开的依赖包，这个时候就需要配置 GOPRIVATE 环境变量。GOPRIVATE用来告诉 go 命令哪些仓库属于私有仓库，不必通过代理服务器拉取和校验。&lt;/p>
&lt;p>GOPRIVATE 的值也可以设置多个，多个地址之间使用英文逗号 “,” 分隔。我们通常会把自己公司内部的代码仓库设置到 GOPRIVATE 中，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go env -w &lt;span class="nv">GOPRIVATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;git.example.com,github.com/arlettebrook/demo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置后，前缀为 git.xxx.com 和 github.com/arlettebrook/demo的模块都会被认为是私有模块。&lt;/p>
&lt;p>如果不想每次都重新设置，我们也可以利用通配符，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go env -w &lt;span class="nv">GOPRIVATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*.example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样子设置的话，所有模块路径为 example.com 的子域名（例如：git.example.com）都将不经过 Go module proxy 和 Go checksum database，需要注意的是不包括 example.com 本身。&lt;/p>
&lt;p>此外，如果公司内部自建了 GOPROXY 服务，那么我们可以通过设置 &lt;code>GONOPROXY=none&lt;/code>，允许通内部代理拉取私有仓库的包。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="go-modules模块文件">
&lt;a href="#go-modules%e6%a8%a1%e5%9d%97%e6%96%87%e4%bb%b6" class="header-anchor">#&lt;/a>
go modules模块文件
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>初识化项目&lt;/p>
&lt;p>在项目的根目录下运行&lt;code>go mod init &amp;lt;project&amp;gt;&lt;/code>，如&lt;code>go mod init github.com/arlettebrook/demo&lt;/code>，&lt;code>demo&lt;/code>是项目名，&lt;code>github.com/arlettebrook/demo&lt;/code>是模块导入路径，当导入的时候，如果本地没有，会去该路径下载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>go.mod 文件&lt;/strong>&lt;/p>
&lt;p>在初始化项目时，会生成一个 go.mod 文件，是启用了 Go modules 项目所必须的最重要的标识，同时也是 GO111MODULE 值为 auto 时的识别标识，它描述了当前项目（也就是当前模块）的元信息，每一行都以一个动词开头。&lt;/p>
&lt;p>&lt;strong>示例文件&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">arlettebrook&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="mf">1.22.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">require&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">apple&lt;/span> &lt;span class="nx">v0&lt;/span>&lt;span class="mf">.1.2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.2.3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">v2&lt;/span> &lt;span class="nx">v2&lt;/span>&lt;span class="mf">.3.4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pear&lt;/span> &lt;span class="c1">// indirect
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">strawberry&lt;/span> &lt;span class="c1">// incompatible
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">exclude&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.2.4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">replace&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">apple&lt;/span> &lt;span class="nx">v0&lt;/span>&lt;span class="mf">.1.2&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">fried&lt;/span> &lt;span class="nx">v0&lt;/span>&lt;span class="mf">.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">replace&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">fish&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>说明&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>module&lt;/strong>：用于定义当前项目的模块路径。&lt;/li>
&lt;li>&lt;strong>go&lt;/strong>：用于标识当前模块的 Go 语言版本，值为初始化模块时的版本，目前来看还只是个标识作用。&lt;/li>
&lt;li>&lt;strong>require&lt;/strong>：用于设置一个特定的模块版本。&lt;/li>
&lt;li>&lt;strong>exclude&lt;/strong>：用于从使用中排除一个特定的模块版本。&lt;/li>
&lt;li>&lt;strong>replace&lt;/strong>：用于将一个模块版本替换为另外一个模块版本。&lt;/li>
&lt;/ul>
&lt;p>另外你会发现 &lt;code>example.com/pear&lt;/code> 的后面会有一个 indirect 标识，indirect 标识表示该模块为间接依赖，也就是在当前应用程序中的 import 语句中，并没有发现这个模块的明确引用，有可能是你先手动 go get 拉取下来的，也有可能是你所依赖的模块所依赖的，情况有好几种。incompatible：不兼容的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>go.sum 文件&lt;/strong>&lt;/p>
&lt;p>在第一次拉取模块依赖后，会发现多出了一个 go.sum 文件，其详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="nx">aJaZx1B85qltLMc546zn58BxxfZdR&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">W22ej9CFoEf0&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mod&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pflag&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.0.5&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">iy&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">VFUOCP1a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="nx">yFto&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">drg2CJ5u0yRoB7fZw3DKv&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">JXA&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pflag&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.0.5&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mod&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到一个模块路径可能有如下两种：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="nx">aJaZx1B85qltLMc546zn58BxxfZdR&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">W22ej9CFoEf0&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mod&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>h1 hash 是 Go modules 将目标模块版本的 zip 文件开包后，针对所有包内文件依次进行 hash，然后再把它们的 hash 结果按照固定格式和算法组成总的 hash 值。&lt;/p>
&lt;p>而 h1 hash 和 go.mod hash 两者，要不就是同时存在，要不就是只存在 go.mod hash。那什么情况下会不存在 h1 hash 呢，就是当 Go 认为肯定用不到某个模块版本的时候就会省略它的 h1 hash，就会出现不存在 h1 hash，只存在 go.mod hash 的情况。&lt;/p>
&lt;p>&lt;code>go.mod&lt;/code>和&lt;code>go.sum&lt;/code>都应该被提交到git仓库中去。当别人使用你的项目时，mod保证依赖版本一直，sum保证依赖不被篡改。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="go-modules模块下载">
&lt;a href="#go-modules%e6%a8%a1%e5%9d%97%e4%b8%8b%e8%bd%bd" class="header-anchor">#&lt;/a>
go modules模块下载
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>我们下载、添加模块使用&lt;code>go get -u &amp;lt;module path&amp;gt;&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认下载、添加最新版本，首先会检查本地（pkg：全局模块缓存）是否存在，没有，在去下载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在项目中下载会自动添加到&lt;code>go.mod&lt;/code>文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u&lt;/code>选项会更新模块的依赖包到最新版本，推荐加上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还可以指定下载版本&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>go get golang.org/x/text@latest&lt;/td>
&lt;td>拉取最新的版本，若存在tag，则优先使用。可以省略。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get golang.org/x/text@master&lt;/td>
&lt;td>拉取 master 分支的最新 commit。@branch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get &lt;a class="link" href="mailto:golang.org/x/text@v0.3.2" >golang.org/x/text@v0.3.2&lt;/a>&lt;/td>
&lt;td>拉取 tag 为 v0.3.2 的 commit。@version，version必须满足语义化版本规范且前面加v。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get golang.org/x/text@342b2e&lt;/td>
&lt;td>拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2。@commit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get golang.org/x/text/v2&lt;/td>
&lt;td>下载主版本号为2的最新版&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>最新版本的选择&lt;/p>
&lt;p>分两种情况&lt;/p>
&lt;ol>
&lt;li>最新版本有发布tags：就以发布的版本，version一般为&lt;code>标签名&lt;/code>，如&lt;code>v2.1.2&lt;/code>&lt;/li>
&lt;li>最新版本没有发布tags:就以提交的最新版本，version一般为&lt;code>已发布标签-最新提交日期-最新提交哈希+版本编译信息&lt;/code>，版本编译信息一般没有。如&lt;code>v2.1.2-20240416160154-fe59bbe5cc7f&lt;/code>，如果一次tags也没有发布，版本号则为v0.0.0，如&lt;code>v0.0.0-20240416160154-fe59bbe5cc7f&lt;/code>&lt;/li>
&lt;li>子模块同理&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="go-modules全局缓存">
&lt;a href="#go-modules%e5%85%a8%e5%b1%80%e7%bc%93%e5%ad%98" class="header-anchor">#&lt;/a>
go modules全局缓存
&lt;/h4>&lt;p>Go module 会把下载到本地的依赖包会以类似下面的形式保存在 &lt;code>$GOPATH/pkg/mod&lt;/code>目录下，每个依赖包都会带有版本号进行区分，这样就允许在本地存在同一个包的多个不同版本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">mod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">golang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">org&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">google&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">golang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">org&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">gopkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果想清除所有本地已缓存的依赖包数据，可以执行 &lt;code>go clean -modcache&lt;/code> 命令。&lt;/p>
&lt;h3 id="go-modules模块导入">
&lt;a href="#go-modules%e6%a8%a1%e5%9d%97%e5%af%bc%e5%85%a5" class="header-anchor">#&lt;/a>
go modules模块导入
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>go模块导入用&lt;code>import &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当导入多个模块的时候用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;path/filepath&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>别名导入用&lt;code>import 别名 &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nx">f&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>点导入用&lt;code>import . &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;p>点导入是一种特殊的导入方式，它将包中的所有公共标识符（函数、变量、类型等）提升到当前文件的命名空间中，这样在代码中就可以直接使用这些标识符，而不需要加上包名前缀。但是，这种方式可能会导致命名冲突和代码可读性下降，因此一般不建议使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>空导入用&lt;code>import _ &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;p>空导入通常用于初始化包中的变量或者执行包中的初始化函数，而不直接使用该包中的其他标识符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注意事项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当模块的主版本号为0或1的时候省略了主版本标识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当主版本号为2及以上时，不能省略主版本标识。否则会出现冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主版本标识只能为&lt;code>/v主版本号&lt;/code>，不能用&lt;code>@version&lt;/code>，一般使用主版本的最新版，这与语义化版本规范有关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;github.com/jordan-wright/email&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;github.com/jordan-wright/email/v4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>为什么忽略 v0 和 v1 的主版本号&lt;/p>
&lt;p>还是与语义化版本规范有关，v0属于开发初始阶段，其公共api不被视为稳定版，当版本到达v1，其公共api基本确定，在此之后如果不出现不兼容api的修改，是不会修改主版本号的。后续的次版本、修订号会向下兼容。这是官方所鼓励的。当api做了不兼容的修改，主版本号就会修改。&lt;strong>为了不出现冲突就会加上主版本标识&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">#&lt;/a>
总结
&lt;/h2>&lt;p>至此我们大致介绍了 Go modules 的前世今生、语义化版本规范以及基本使用。&lt;/p>
&lt;p>Go modules 的成长和发展经历了一定的过程，如果你是刚接触的读者，直接基于 Go modules 的项目开始即可，如果既有老项目，那么是时候考虑切换过来了，Go1.14起已经准备就绪，并推荐你使用。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>&lt;a class="link" href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener"
>https://semver.org/lang/zh-CN/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://jianghushinian.cn/2023/01/01/Go-Module-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%E8%A7%84%E8%8C%83/" target="_blank" rel="noopener"
>Go Module 语义化版本规范&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/u011069013/article/details/110114319" target="_blank" rel="noopener"
>Go Modules详解&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://juejin.cn/post/7149869713688887326" target="_blank" rel="noopener"
>Go module详细介绍&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Git常用命令</title><link>https://arlettebrook.github.io/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 22 Apr 2024 22:18:17 +0800</pubDate><guid>https://arlettebrook.github.io/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;blockquote>
&lt;p>注意：要学会使用-h &amp;ndash;help选项，查看命令，看不懂在查阅。&lt;code>git help &amp;lt;command&amp;gt;&lt;/code>可进入官方文档。&lt;strong>Git&lt;/strong>&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener"
>入门参考&lt;/a>。以下常用命令个人收集总结。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="git简单命令">
&lt;a href="#git%e7%ae%80%e5%8d%95%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git简单命令
&lt;/h2>&lt;h3 id="git-init">
&lt;a href="#git-init" class="header-anchor">#&lt;/a>
git init
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git init &amp;lt;directory&amp;gt;&lt;/code>在指定的⽬录下创建⼀个空的git repo。不带参数将在当前⽬录下创建⼀个git repo。&lt;/li>
&lt;/ul>
&lt;h3 id="git-clone">
&lt;a href="#git-clone" class="header-anchor">#&lt;/a>
git clone
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git clone &amp;lt;repo&amp;gt;&lt;/code>克隆⼀个指定repo到本地。指定的repo可以是本地⽂件系统或者由HTTP或SSH指定的远程路径。&lt;/li>
&lt;li>&lt;code>git clone -b &amp;lt;branch&amp;gt; &amp;lt;repo&amp;gt;&lt;/code>克隆指定仓库的分支&lt;/li>
&lt;li>&lt;code>git clone --recursive &amp;lt;repo&amp;gt;&lt;/code>递归地克隆，克隆带有子模块的仓库
&lt;ul>
&lt;li>&lt;code>git clone --recurse-submodules &amp;lt;repository_url&amp;gt;&lt;/code>同理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可组合使用&lt;/li>
&lt;/ul>
&lt;h3 id="git-add">
&lt;a href="#git-add" class="header-anchor">#&lt;/a>
git add
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git add &amp;lt;directory&amp;gt;&lt;/code>将指定⽬录的所有修改加⼊到下⼀次 commit中。把&lt;code>&amp;lt;directory&amp;gt;&lt;/code>替换成&lt;code>&amp;lt;file&amp;gt;&lt;/code>将添加指定⽂件的修改。&lt;/li>
&lt;li>&lt;code>git add *&lt;/code>、&lt;code>git add .&lt;/code>、&lt;code>git add -A&lt;/code>三条命令但是一样的，将所以修改提交到暂存区。&lt;/li>
&lt;/ul>
&lt;h3 id="git-commit">
&lt;a href="#git-commit" class="header-anchor">#&lt;/a>
git commit
&lt;/h3>&lt;ul>
&lt;li>这个命令通常带&lt;code>-m&lt;/code>选项&lt;code>git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot;&lt;/code>提交暂存区的修改，使⽤指定的 &lt;code>&amp;lt;message&amp;gt;&lt;/code>作为提交信息，⽽不是打开⽂本编辑器输⼊提交信息。&lt;/li>
&lt;li>&lt;code>git commit -m &amp;lt;message&amp;gt; --amend&lt;/code>将当前staged修改合并到最近⼀次的commit中。&lt;/li>
&lt;/ul>
&lt;h3 id="git-status">
&lt;a href="#git-status" class="header-anchor">#&lt;/a>
git status
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git status&lt;/code>显示哪些⽂件已被staged、以及未跟踪(untracked)。&lt;/li>
&lt;/ul>
&lt;h3 id="git-reflog">
&lt;a href="#git-reflog" class="header-anchor">#&lt;/a>
git reflog
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git reflog&lt;/code>显示本地repo的所有commit⽇志。&lt;/li>
&lt;li>与&lt;code>git log&lt;/code>的区别
&lt;ol>
&lt;li>&lt;code>log&lt;/code>项目的提交历史，&lt;code>reflog&lt;/code>本地仓库的&lt;strong>引用&lt;/strong>提交日志。&lt;/li>
&lt;li>引用会保留所以的提交历史，如何重置的历史。主要目的是提供一个安全网，以便在误操作（如错误的 &lt;code>git reset&lt;/code>）后可以恢复丢失的提交或分支。&lt;/li>
&lt;li>&lt;code>git log&lt;/code> 的输出是永久性的，而 &lt;code>reflog&lt;/code> 会在一段时间后自动过期（默认是 30 天），以节省空间。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-rm">
&lt;a href="#git-rm" class="header-anchor">#&lt;/a>
git rm
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git rm fileName&lt;/code>删除指定的文件。
&lt;ul>
&lt;li>与&lt;code>rm fileName&lt;/code>的区别。
&lt;ol>
&lt;li>&lt;code>git rm&lt;/code>不能删除未跟踪的文件，&lt;/li>
&lt;li>&lt;code>git rm&lt;/code>删除之后直接到暂存区，而&lt;code>rm&lt;/code>是到工作区&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意删除之后都需要提交操作。&lt;/li>
&lt;li>撤销操作不用记，git都会有提示&lt;/li>
&lt;/ul>
&lt;h3 id="git-switch">
&lt;a href="#git-switch" class="header-anchor">#&lt;/a>
git switch
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>该命令适用于特定git版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git switch &amp;lt;branch&amp;gt;&lt;/code>切换到指定分支，&lt;/p>
&lt;ul>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>同理，但这个都适用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git switch -c &amp;lt;branch&amp;gt;&lt;/code>创建并切换指定分支&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-branch">
&lt;a href="#git-branch" class="header-anchor">#&lt;/a>
git branch
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git branch&lt;/code>显示本地repo的所有分⽀。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-v&lt;/code>显示详细信息&lt;/li>
&lt;li>带&lt;code>*&lt;/code>的为当前分支&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -r&lt;/code>显示远程仓库的所以分支。&lt;/p>
&lt;ul>
&lt;li>可以使用&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>检出远程分支，可以省略&lt;code>origin/&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -a&lt;/code>显示本地和远程的所有分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -m &amp;lt;old_branch_name&amp;gt; &amp;lt;new_branch_name&amp;gt;&lt;/code>重命名分支&lt;/p>
&lt;ul>
&lt;li>新分支名已经存在， &lt;code>-M&lt;/code> 强制重命名。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch &amp;lt;name&amp;gt;&lt;/code>创建指定分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -D &amp;lt;branch&amp;gt;&lt;/code>强制删除指定分支，无论是否合并到当前分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -d &amp;lt;branch&amp;gt;&lt;/code>删除指定的分支，如果没有合并到当前分支，git会阻止操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-merge">
&lt;a href="#git-merge" class="header-anchor">#&lt;/a>
git merge
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git merge &amp;lt;branch&amp;gt;&lt;/code>合并指定分支。将指定&lt;code>&amp;lt;branch&amp;gt;&lt;/code>分⽀合并到当前分⽀。
&lt;ul>
&lt;li>是在当前分支合并指定分支。&lt;/li>
&lt;li>合并分支可能会出现冲突。要解决冲突之后才能合并。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git merge --abort&lt;/code>放弃本次合并&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="git一般命令">
&lt;a href="#git%e4%b8%80%e8%88%ac%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git一般命令
&lt;/h2>&lt;h3 id="git-revert">
&lt;a href="#git-revert" class="header-anchor">#&lt;/a>
git revert
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git revert &amp;lt;commit&amp;gt; &lt;/code>对指定&lt;code>&amp;lt;commit&amp;gt;&lt;/code>创建⼀个undo的commit，并应⽤到当前分⽀。就是撤销指定的提交并保留记录
&lt;ul>
&lt;li>效果：撤销指定的提交，回到了撤销提交的是上个版本，&lt;strong>保留了撤销历史&lt;/strong>。&lt;strong>会打开编辑器显示具体效果&lt;/strong>&lt;/li>
&lt;li>一般不用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-reset">
&lt;a href="#git-reset" class="header-anchor">#&lt;/a>
git reset
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git reset &amp;lt;commit&amp;gt;&lt;/code>&lt;strong>重置&lt;/strong>到指定的提交，不会保留commit历史。工作区和暂存区会变成未跟踪。&lt;code>--hard&lt;/code>选项完全重置到指定提交。未跟踪的重置不了。重置历史可以通过&lt;code>git reflog&lt;/code>查看，利用这个可以重置已经重置的版本库。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;commit&amp;gt;&lt;/code>可以是：
&lt;ul>
&lt;li>&lt;code>HEAD&lt;/code>表示最新的提交或者这个&lt;strong>版本库&lt;/strong>，HEAD^、HEAD~1上上次提交或者上个版本&lt;/li>
&lt;li>或者使用&lt;code>commit_hash&lt;/code>，提交的哈希值可以使用&lt;code>git log&lt;/code>查看，只需要前几位就行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git reset&lt;/code>（重置到最新的提交）移除所有暂存区、工作区的修改，到未跟踪。这些命令其实省略了&lt;code>HEAD&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>git reset --hard&lt;/code> 重置到最新的提交，删除工作区和暂存区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git reset &amp;lt;file&amp;gt;&lt;/code>将&lt;code>&amp;lt;file&amp;gt;&lt;/code>从暂存区移除，但保持⼯作区不变。此操作不会修改⼯作区的任何⽂件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-restore">
&lt;a href="#git-restore" class="header-anchor">#&lt;/a>
git restore
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git restore &amp;lt;file&amp;gt;...&lt;/code>撤销对工作区的修改，是对以跟踪的文件当未添加到暂存区的文件。多个文件用空格分开。
&lt;ul>
&lt;li>&lt;code>git checkout -- &amp;lt;file&amp;gt;...&lt;/code>同理，&lt;code>--&lt;/code>可以省略&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git restore --staged &amp;lt;file&amp;gt;...&lt;/code>撤销对暂存区的修改到未跟踪。针对添加到暂存区的文件。
&lt;ul>
&lt;li>&lt;code>git reset HEAD &amp;lt;file&amp;gt;...&lt;/code>同理，&lt;code>HEAD&lt;/code>可以省略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>具体用哪一个，git都会有提示，不用记。&lt;/li>
&lt;/ul>
&lt;h3 id="git-checkout">
&lt;a href="#git-checkout" class="header-anchor">#&lt;/a>
git checkout
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>切换到指定的分支&lt;/p>
&lt;ul>
&lt;li>如果分支为远程分支，则检出远程分支&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -b &amp;lt;new-branch&amp;gt;&lt;/code>切换并创建指定的分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;file&amp;gt;&lt;/code>撤销工作区的修改&lt;/p>
&lt;ul>
&lt;li>&lt;code>git restore &amp;lt;file&amp;gt;&lt;/code>同理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;commit&amp;gt;&lt;/code>根据指定的提交创建一个分支,处于游离态。一般不用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -b &amp;lt;local_branch_name&amp;gt; origin/&amp;lt;remote_branch_name&amp;gt;&lt;/code>切换到远程分支&lt;/p>
&lt;ul>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>差不多，可以使用&lt;code>git fetch origin&lt;/code>获取仓库所以信息，在检出分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -&lt;/code>切换到前一个分支。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-remote">
&lt;a href="#git-remote" class="header-anchor">#&lt;/a>
git remote
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>用来管理远程仓库列表，&lt;code>origin&lt;/code>为远程仓库的默认别名。这些远端仓库的信息都被保存在&lt;code>./git/config&lt;/code> 文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote&lt;/code>列出所有已配置的远程仓库的信息。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-v&lt;/code>显示详细信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote add &amp;lt;remote_name&amp;gt; &amp;lt;remote_url&amp;gt;&lt;/code>添加远程仓库&lt;/p>
&lt;ul>
&lt;li>添加⼀个新的远程连接。添加后可使⽤ &lt;code>&amp;lt;name&amp;gt;&lt;/code>作为指定&lt;code>&amp;lt;url&amp;gt;&lt;/code>远程连接的名称。&lt;/li>
&lt;li>只有配置了这个才能推送到远程仓库。&lt;/li>
&lt;li>&lt;code>git remote rename &amp;lt;old_name&amp;gt; &amp;lt;new_name&amp;gt;&lt;/code>重命名远程仓库。&lt;/li>
&lt;li>&lt;code>git remote set-url &amp;lt;remote_name&amp;gt; &amp;lt;new_url&amp;gt;&lt;/code>修改远程仓库的url。&lt;/li>
&lt;li>&lt;code>git remote remove &amp;lt;remote_name&amp;gt;&lt;/code>或&lt;code>git remote rm &amp;lt;remote_name&amp;gt;&lt;/code>删除远程仓库。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote show &amp;lt;remote_name&amp;gt;&lt;/code>显示远程仓库的详细信息，包括 URL、跟踪的分支等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>补充如何创建远程仓库&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建远程仓库可以先在github上创建好，然后在本地pull下来，在进行修改后push上去。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以建一个&lt;strong>空白仓库&lt;/strong>，在本地push上去，但需要进行绑定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git remote add origin https://github.com/username/null-project.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -M main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="gjit-push">
&lt;a href="#gjit-push" class="header-anchor">#&lt;/a>
gjit push
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>将本地仓库推送到远程仓库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;&lt;/code>推送本地分支到指定的远程分支。如果远程分支不存在，会自动创建。&lt;code>:&lt;/code>前后不能有空格。&lt;/p>
&lt;ul>
&lt;li>当分支同名，可以简写成&lt;code>git push &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;&lt;/code>&lt;/li>
&lt;li>果无法提交的话执行，&lt;code>-f&lt;/code>、&lt;code>--force&lt;/code>选项强制推送，一般不用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push -u &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;&lt;/code>设置默认推送分支。&lt;/p>
&lt;ul>
&lt;li>作用：这样设置以后，推送到远程仓库可以简写成&lt;code>git push&lt;/code>
&lt;ul>
&lt;li>&lt;code>git push&lt;/code> 代替 &lt;code>git push origin master&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-u&lt;/code>是&lt;code>--set-upstream&lt;/code>的短形式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote_repository&amp;gt; -d &amp;lt;远程分支名&amp;gt;&lt;/code>删除远程分支 。&lt;/p>
&lt;ul>
&lt;li>&lt;code>--delete&lt;/code>长选项。&lt;/li>
&lt;li>&lt;code>git push origin :test&lt;/code>同理，没有写本地分支，就是删除远程分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;tagname&amp;gt;&lt;/code>推送指定标签到指定远程仓库，一般为`origin``&lt;/p>
&lt;/li>
&lt;li>
&lt;p>``git push &lt;remote> &amp;ndash;tags`推送所用标签到远程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-pull">
&lt;a href="#git-pull" class="header-anchor">#&lt;/a>
git pull
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git pull &amp;lt;remote_repository&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;&lt;/code>从远程仓库拉取最新代码到本地仓库。
&lt;ul>
&lt;li>&lt;code>git pull&lt;/code>会拉取并合并，出现冲突要解决之后才能合并。&lt;/li>
&lt;li>&lt;code>git fetch&lt;/code>获取当前远程仓库的最新信息，不会合并。&lt;/li>
&lt;li>通常可以简写成&lt;code>git pull&lt;/code>,远程仓库默认是&lt;code>origin&lt;/code>，分支默认是当前分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git pull --rebase&amp;lt;remote&amp;gt;&lt;/code> 抓取远程分⽀，并以rebase模式并⼊本地repo⽽不是merge。&lt;/li>
&lt;/ul>
&lt;h3 id="git-fetch">
&lt;a href="#git-fetch" class="header-anchor">#&lt;/a>
git fetch
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git fetch origin&lt;/code>获取远程仓库最新的更改。不会合并。默认仓库是&lt;code>origin&lt;/code>，分支是当前分支，这里可以省略&lt;code>origin&lt;/code>
&lt;ul>
&lt;li>&lt;code>git fetch origin &amp;lt;branch&amp;gt;&lt;/code>获取特定分支的更改.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git fetch --all&lt;/code>获取所用仓库远程仓库的最新更改。&lt;/li>
&lt;li>与&lt;code>git pull&lt;/code>的区别
&lt;ol>
&lt;li>都会获取远程仓库最新的更改。&lt;/li>
&lt;li>但是fetch不会合并，而pull会合并。可以理解为&lt;code>git pull&lt;/code> 是 &lt;code>git fetch&lt;/code> 和 &lt;code>git merge&lt;/code> 的组合&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>获取最新更改之后可以：
&lt;ol>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>检出指定分支，如果加&lt;code>origin&lt;/code>要这样&lt;code>git checkout -b &amp;lt;branch&amp;gt; origin/&amp;lt;branch&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>git merge origin/master&lt;/code>合并远程 master 分支的更改到当前的分支&lt;/li>
&lt;li>&lt;code>git rebase origin/master&lt;/code>使用 rebase 来整合更改（这可能会改变提交历史）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-stash">
&lt;a href="#git-stash" class="header-anchor">#&lt;/a>
git stash
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git stash&lt;/code>保存工作区、暂存区，可以切换分支去完成别的任务。不保存修改，未提交的修改会错乱到别的分支。并且只能保存已追踪的文件。&lt;/li>
&lt;li>&lt;code>git stash list&lt;/code>查看保存的工作区以及暂存区。&lt;/li>
&lt;li>&lt;code>git stash apply&lt;/code>恢复保存的工作区以及暂存区。
&lt;ul>
&lt;li>这个命令执行之后不会删除存储的工作区以及暂存区。&lt;/li>
&lt;li>要用&lt;code>git stash drop&lt;/code>才能删除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git stash pop&lt;/code>恢复并删除保存的工作区以及暂存区。&lt;/li>
&lt;li>默认都是保存、恢复第一个stash即&lt;code>stash@{0}&lt;/code>。若要指定第几个在后面加&lt;code>stash@{num}&lt;/code>。
&lt;ul>
&lt;li>如恢复第二个stash：&lt;code>git stash pop stash@{1}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每个分支共用一个stash。&lt;/li>
&lt;/ul>
&lt;h3 id="git-tag">
&lt;a href="#git-tag" class="header-anchor">#&lt;/a>
git tag
&lt;/h3>&lt;ul>
&lt;li>作用：用于标记项目的版本发布或重要的里程碑。&lt;/li>
&lt;li>分类
&lt;ol>
&lt;li>&lt;code>git tag &amp;lt;tagname&amp;gt; &amp;lt;commit ID&amp;gt;&lt;/code>轻量标签
&lt;ul>
&lt;li>&lt;code>git tag vn.n.n&lt;/code>打标签，&lt;code>n.n.n&lt;/code>表示对应的版本号，版本号前面一般加&lt;code>v&lt;/code>，遵循一定的命名规范，如&lt;code>v1.0.1&lt;/code>。
&lt;ul>
&lt;li>默认是打在最新的一次提交。&lt;/li>
&lt;li>后面跟提交的哈希值可以指定给那次提交打标签。如&lt;code>git tag v0.9.0 f52c633&lt;/code>。
&lt;ul>
&lt;li>哈希值可以通过&lt;code>git log&lt;/code>查看&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;&amp;lt;tag message&amp;gt;&amp;quot; &amp;lt;commit ID&amp;gt;&lt;/code>附注标签
&lt;ol>
&lt;li>如&lt;code>git tag -a v0.1 -m &amp;quot;version 0.1 released&amp;quot; 1094adb&lt;/code>&lt;/li>
&lt;li>推荐id省略默认最新提交。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>查看标签
&lt;ol>
&lt;li>&lt;code>git tag&lt;/code>显示所有的本地tag列表，按照字母顺序排序。如果tag数量较多，可能会显示不全。省略选项&lt;code>-l&lt;/code>、&lt;code>--list&lt;/code>&lt;/li>
&lt;li>&lt;code>git show &amp;lt;tagname&amp;gt;&lt;/code>显示指定tag的详细信息，包括提交的作者、提交时间、提交信息等。&lt;/li>
&lt;li>&lt;code>git tag -n&lt;/code>：显示tag列表，并同时显示每个tag对应的提交信息。&lt;/li>
&lt;li>&lt;code>git ls-remote --tags origin&lt;/code>：显示远程仓库中的所有tag信息。更推荐这种。
&lt;ol>
&lt;li>或者先&lt;code>git fetch&lt;/code>获取最新的更改，然后&lt;code>git tag&lt;/code>检出所有标签。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>删除标签
&lt;ol>
&lt;li>&lt;code>git tag -d &amp;lt;tagname&amp;gt;&lt;/code>删除本地标签&lt;/li>
&lt;li>删除远程标签：首先需要在本地删除标签，然后推送到远程仓库 &lt;code>git push origin :refs/tags/&amp;lt;tagname&amp;gt;&lt;/code>
&lt;ol>
&lt;li>远程标签是&lt;code>refs/tags/v0.0.1&lt;/code>这样存在的，跟删除远程分支差不多。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>标签一旦创建，就不能直接修改,如果需要修改标签，通常需要删除原标签，并重新创建一个新标签。&lt;/li>
&lt;li>推送标签
&lt;ol>
&lt;li>打的标签不会自动推送到远程仓库，需要手动推送。&lt;/li>
&lt;li>&lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;tagname&amp;gt;&lt;/code>推送指定标签到指定远程仓库，一般为&lt;code>origin&lt;/code>&lt;/li>
&lt;li>&lt;code>git push &amp;lt;remote&amp;gt; --tags&lt;/code>推送所用标签到远程&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="git复杂命令">
&lt;a href="#git%e5%a4%8d%e6%9d%82%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git复杂命令
&lt;/h2>&lt;h3 id="git-log">
&lt;a href="#git-log" class="header-anchor">#&lt;/a>
git log
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git log&lt;/code>以缺省格式显示全部commit历史。更多⾃定义参数请参考后续部分。&lt;code>q&lt;/code>退出，&lt;code>空格&lt;/code>下一页，&lt;code>h&lt;/code>查看帮助
&lt;ul>
&lt;li>&lt;code>git log --stat&lt;/code>：显示详细的commit历史。&lt;/li>
&lt;li>&lt;code>git log -&amp;lt;limit&amp;gt;&lt;/code>限制log的显示数量。例如：”git log -5”仅显示最新5条commit。&lt;/li>
&lt;li>&lt;code>git log --oneline&lt;/code>每⾏显示⼀条commit，简化信息。与&lt;code>--pretty=oneline&lt;/code>等效&lt;/li>
&lt;li>&lt;code>git log --author= &amp;quot;&amp;lt;pattern&amp;gt;&amp;quot;&lt;/code>按提交者名字搜索并显示commit。&lt;/li>
&lt;li>&lt;code>git log --grep= &amp;quot;&amp;lt;pattern&amp;gt;&amp;quot;&lt;/code>按指定内容搜索并显示commit。&lt;/li>
&lt;li>&lt;code>git log &amp;lt;since&amp;gt;..&amp;lt;until&amp;gt;&lt;/code>显示指定范围的commit。范围参数可以是commit ID、分⽀名称、HEAD或任意相对位置。&lt;/li>
&lt;li>&lt;code>git log -- &amp;lt;file&amp;gt;&lt;/code>仅显示包含指定⽂件修改的commit。&lt;/li>
&lt;li>&lt;code>git log --graph&lt;/code>使⽤&amp;ndash;graph参数显示图形化的branch信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-diff">
&lt;a href="#git-diff" class="header-anchor">#&lt;/a>
git diff
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git diff&lt;/code>⽐较⼯作区和暂存区的修改。&lt;/li>
&lt;li>&lt;code>git diff HEAD&lt;/code>⽐较⼯作区和上⼀次commit后的修改。
&lt;ul>
&lt;li>HEAD指向当前分支最新的commit版本库&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git diff --cached&lt;/code>⽐较暂存区和上⼀次commit后的修改。&lt;/li>
&lt;li>&lt;code>git diff --stashed&lt;/code>查看暂存区与最新提交的差异，与上面一样&lt;/li>
&lt;li>&lt;code>git diff &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt;&lt;/code>查看两个提交之间的差异。&lt;/li>
&lt;li>&lt;code>git diff &amp;lt;filename&amp;gt;&lt;/code>后面指定文件，只查看该文件的修改情况，没有参数查询全部&lt;/li>
&lt;li>用&lt;code>git diff HEAD -- readme.txt&lt;/code>命令可以查看版本库和工作区里面最新版本的区别&lt;/li>
&lt;/ul>
&lt;h3 id="git-config">
&lt;a href="#git-config" class="header-anchor">#&lt;/a>
git config
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>作用：通过&lt;code>git config&lt;/code>命令配置git的配置文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git配置文件级别分为：&lt;/p>
&lt;ol>
&lt;li>仓库级别 &lt;code>--local&lt;/code> 【优先级最高】。文件所在位置仓库下的&lt;code>.git/config&lt;/code>&lt;/li>
&lt;li>当前用户级别 &lt;code>--global&lt;/code>【优先级次之】&lt;strong>一般配置它&lt;/strong>。文件所在位置用户家目录下的&lt;code>.gitconfig&lt;/code>&lt;/li>
&lt;li>系统所有用户级别 &lt;code>--system&lt;/code>【优先级最低】。文件所在位置git安装目录下的&lt;code> ./etc/gitconfig&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-l&lt;/code>、&lt;code>--list&lt;/code>查看配置。&lt;strong>常用&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>git config -l&lt;/code>查看所有的配置信息，依次是系统级别、用户级别、仓库级别&lt;/li>
&lt;li>&lt;code>git config --local -l&lt;/code> 查看仓库级别配置。必须要进入到具体的目录下。&lt;/li>
&lt;li>&lt;code>git config --global -l&lt;/code> 查看当前用户配置&lt;/li>
&lt;li>&lt;code>git config --system -l&lt;/code> 查看系统所有用户配置&lt;/li>
&lt;li>可以与&lt;code>--show-origin&lt;/code> 显示文件位置，&lt;code>--show-scope&lt;/code>显示文件级别&lt;strong>组合使用&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-e&lt;/code>、&lt;code>--edit&lt;/code>打开编辑器编辑&lt;strong>指定级别&lt;/strong>的配置文件，没有指定默认仓库级别，会使用默认编辑器打开编辑。安装的时候设置的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加配置、修改配置：直接配置对应的配置参数就行。一般配置用户级别就行。省略了&lt;code>--add&lt;/code>选项。没有指定级别，默认仓库基本。常用的添加配置命令:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>用户邮箱和用户名。安装git之后&lt;strong>必设置的配置&lt;/strong>&lt;/p>
&lt;p>&lt;code>git config --global user.email &amp;quot;Your mail&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global user.name &amp;quot;Your name&amp;quot;&lt;/code>&lt;/p>
&lt;p>如果我们没有配置，在提交代码时会有如下错误：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">xxx@DESKTOP-MD21325 MINGW64 /d/test/test &lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git commit -m &lt;span class="s2">&amp;#34;feature: add readme&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author identity unknown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Please tell me who you are.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.email &lt;span class="s2">&amp;#34;you@example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.name &lt;span class="s2">&amp;#34;Your Name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">to &lt;span class="nb">set&lt;/span> your account&lt;span class="s1">&amp;#39;s default identity.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Omit --global to set the identity only in this repository.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">fatal: unable to auto-detect email address (got &amp;#39;&lt;/span>xxx@DESKTOP-MD21325.&lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置自己的代理。网速慢&lt;strong>必设置的配置&lt;/strong>&lt;/p>
&lt;p>&lt;code>git config --global http.proxy &amp;quot;http://proxy_ip:port&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global https.proxy &amp;quot;https://proxy_ip:port&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--unset&lt;/code>取消配置，注意要指定取消的配置级别。常用取消配置命令：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>取消代理配置&lt;/p>
&lt;p>&lt;code>git config --global --unset http.proxy&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global --unset https.proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--get&lt;/code>查看指定级别、指定配置项的配置，默认仓库级别。如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>查看代理配置&lt;/p>
&lt;p>&lt;code>git config --global --get http.proxy&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global --get https.proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git config --global alias.&amp;lt;alias-name&amp;gt; &amp;lt;git-command&amp;gt;&lt;/code>配置⼀个git命令的快捷⽅式。例如：配置”alias.glog log &amp;ndash;graph &amp;ndash;oneline”使”git glog”相当于”git log &amp;ndash;graph &amp;ndash;oneline”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git config --global core.editor &amp;lt;editor&amp;gt;&lt;/code>配置⽂本编辑器，例如vi，在必要时⾃动打开此⽂本编辑器。安装的时候也可以指定默认编辑器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-submodule">
&lt;a href="#git-submodule" class="header-anchor">#&lt;/a>
git submodule
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git submodule init&lt;/code>初始化子模块，将子模块的配置信息存储在父仓库中。&lt;/p>
&lt;ul>
&lt;li>通常执行之后再执行更新子模块使用，如克隆带有子模块的仓库，没有加&lt;code>--recursive&lt;/code>，是不会克隆子模块的&lt;/li>
&lt;li>初始化子模块之后，执行更新子模块就会根据配置信息下载子模块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git submodule update&lt;/code>根据父仓库子模块的配置信息更新子模块，如果没有初始化子模块可以加参数&lt;code>--init&lt;/code>，会下载与父项目绑定版本的子模块，若要更新加&lt;code>--remote&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>--init&lt;/code>初识化子模块&lt;/li>
&lt;li>&lt;code>--recursive&lt;/code>会递归下载子模块的子模块&lt;/li>
&lt;li>&lt;code>--remote&lt;/code>根据子模块远程仓库的配置信息更新子模块，会下载最新版本的子模块
&lt;ul>
&lt;li>注意更新之后要提交更新的版本，否则当在执行更新命令没有加&lt;code>--remote&lt;/code>时会退回与父仓库绑定的版本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git submodule add &amp;lt;repository&amp;gt; &amp;lt;path&amp;gt;&lt;/code>添加子模块。其中，&lt;code>&amp;lt;repository&amp;gt;&lt;/code>是子模块的远程仓库地址，&lt;code>&amp;lt;path&amp;gt;&lt;/code>是子模块在主项目中的路径。&lt;/p>
&lt;ul>
&lt;li>子模块可以当正常仓库使用。创建时&lt;code>&amp;lt;path&amp;gt;&lt;/code>路径不能存在文件，更克隆差不多。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-subtree">
&lt;a href="#git-subtree" class="header-anchor">#&lt;/a>
git subtree
&lt;/h3>&lt;ul>
&lt;li>作用：将一个仓库中的目录作为另一个仓库，可以指定分支&lt;/li>
&lt;li>用途：搭建项目网站时，将项目网站资源推送到gh-pages分支上
&lt;ul>
&lt;li>&lt;code>git subtree push --prefix=dist origin gh-pages&lt;/code>将目录添加到&lt;code>gh-pages&lt;/code>分支上，&lt;code>dist&lt;/code>为项目网站的目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git subtree push --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>将子目录的内容推送到远程仓库。它会将当前仓库中子目录的修改推送到指定的远程仓库和分支中。
&lt;ul>
&lt;li>注意：以这种推送的方式添加的&lt;code>subtree&lt;/code>不能执行&lt;code>subtree pull&lt;/code>命令，只有通过&lt;code>subtree add&lt;/code>添加的&lt;strong>才能都执行&lt;/strong>，但能够执行&lt;code>subtree push&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git subtree pull --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>这个命令用于从远程仓库更新子目录的内容。它会拉取远程仓库的最新代码，并更新到当前仓库的子目录中。&lt;/li>
&lt;li>&lt;code>git subtree add --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>这个命令用于将远程仓库的内容作为子目录添加到当前仓库中。&lt;code>&amp;lt;prefix&amp;gt;&lt;/code>是子目录的名称，&lt;code>&amp;lt;repository&amp;gt;&lt;/code>是远程仓库的地址，&lt;code>&amp;lt;branch&amp;gt;&lt;/code>是要合并的分支。&lt;/li>
&lt;/ul>
&lt;h3 id="git-rebase">
&lt;a href="#git-rebase" class="header-anchor">#&lt;/a>
git rebase
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>作用：rebase翻译成变基，顾名思义：改变基准点。可以使提交历史更加清晰和线性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>原因：通过合并两个不同的分支，提交历史会很错乱。而通过变基，会使得提交历史更加整洁和可读。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何实现：就是修改创建分支的起点（基准点），到最新的提交。起点变了，提交历史就简化了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>git rebase &amp;lt;base&amp;gt;&lt;/code>基于&lt;code>&amp;lt;base&amp;gt;&lt;/code>对当前分⽀进⾏rebase&lt;code>。&amp;lt;base&amp;gt;&lt;/code>可以是commit、分⽀名称、tag或相对于HEAD的commit。&lt;/li>
&lt;li>&lt;code>git rebase -i &amp;lt;base&amp;gt;&lt;/code>以交互模式对当前分⽀做rebase。&lt;/li>
&lt;li>rebase的过程中可能会出现冲突，解决冲突之后需要使用&lt;code>git add&lt;/code>命令将解决冲突后的文件标记为已解决，然后，使用&lt;code>git rebase --continue&lt;/code>命令继续rebase过程。Git会尝试继续应用剩余的提交。如果再次出现冲突，你需要重复上述解决冲突和继续rebase的步骤。&lt;/li>
&lt;li>如果在rebase过程中出现了问题，或者你决定放弃rebase操作，你可以使用&lt;code>git rebase --abort&lt;/code>命令来撤销整个rebase操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>git rebase的注意事项&lt;/p>
&lt;ul>
&lt;li>&lt;strong>避免对已经推送到远程仓库的提交执行rebase操作&lt;/strong>：这可能会导致提交历史的不一致，给其他协作者带来困扰。&lt;/li>
&lt;li>&lt;strong>保持工作目录干净&lt;/strong>：在执行rebase之前，确保你的工作目录中没有未提交的更改。&lt;/li>
&lt;li>&lt;strong>谨慎使用&lt;/strong>：由于rebase会改变提交历史，因此在与他人共享分支时要特别小心。通常，在公共分支上应该使用merge而不是rebase。&lt;/li>
&lt;/ul>
&lt;p>通过掌握git rebase的用法和注意事项，你可以更有效地管理你的Git仓库，保持代码的清晰和整洁。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;hr>
&lt;h2 id="扩展">
&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">#&lt;/a>
扩展
&lt;/h2>&lt;h3 id="gitignore文件">
&lt;a href="#gitignore%e6%96%87%e4%bb%b6" class="header-anchor">#&lt;/a>
.gitignore文件
&lt;/h3>&lt;p>Git提供了&lt;code>.gitignore&lt;/code>文件，用于指定哪些文件或目录应该被Git忽略，不纳入版本控制系统中。&lt;code>.gitignore&lt;/code>文件是一个文本文件，可以包含一些简单的规则，指定应该忽略哪些文件或目录。以下是一些.gitignore文件的示例规则：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>忽略所有以.tmp结尾的文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">*.tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的log文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">*.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的.idea目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.idea/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的build目录及其内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">build/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略根目录下的config.json文件，但不忽略子目录中的config.json文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的node_modules目录及其内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">node_modules/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的DS_Store文件（Mac OS X系统中的文件）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.DS_Store
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>可以将这些规则写入.gitignore文件中，并将该文件添加到Git仓库中，以使Git忽略这些文件或目录。需要注意的是，即使某些文件或目录已经被添加到Git仓库中，也可以通过修改.gitignore文件来让Git忽略它们，但需要执行以下命令才能使.gitignore文件生效：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git rm -r --cached .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;update .gitignore&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些命令会删除Git缓存中已经添加的文件，然后重新添加文件并提交更改，以使.gitignore文件生效。&lt;/p>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>当Git执行提交操作时，它会检查.gitignore文件中列出的文件和目录，并将它们从提交中排除。这是非常有用的，因为有些文件或目录不应该被纳入版本控制系统中，例如编译生成的文件、日志文件、临时文件等。&lt;/p>
&lt;p>.gitignore文件的语法是基于模式匹配的，其中的特殊字符有：&lt;/p>
&lt;ul>
&lt;li>*：匹配任意字符，但不包括路径分隔符（/）。&lt;/li>
&lt;li>?：匹配任意单个字符，但不包括路径分隔符（/）。&lt;/li>
&lt;li>/：路径分隔符，用于指定目录。&lt;/li>
&lt;li>!：用于否定模式，即不忽略指定的文件或目录。&lt;/li>
&lt;/ul>
&lt;p>可以在.gitignore文件中使用通配符、路径、注释等语法，以更精确地指定需要忽略的文件或目录。同时，可以在仓库的根目录下创建一个.gitignore文件，也可以在子目录中创建独立的.gitignore文件。&lt;/p>
&lt;hr>
&lt;h3 id="git账户认证">
&lt;a href="#git%e8%b4%a6%e6%88%b7%e8%ae%a4%e8%af%81" class="header-anchor">#&lt;/a>
git账户认证
&lt;/h3>&lt;ul>
&lt;li>当我们对远程仓库就行修改时，需要对应的权限，不是什么人都能够修改仓库。只有通过了git账户认证，才能修改对应的仓库。&lt;/li>
&lt;li>常见git账户认证的方式：
&lt;ul>
&lt;li>&lt;strong>SSH秘钥认证&lt;/strong>
&lt;ul>
&lt;li>这是Git中最常见的认证方式之一。用户首先生成一对公钥和私钥，然后将&lt;strong>公钥&lt;/strong>添加到Git服务器上的用户帐户中。当用户尝试与Git服务器进行通信时，Git将使用私钥进行身份验证。这种方式相对安全，因为私钥是保存在用户本地机器上的，不会被传输到Git服务器。&lt;/li>
&lt;li>秘钥生成命令：bash中运行&lt;code>ssh-keygen&lt;/code>,一直回车就行，秘钥位置：主目录下的&lt;code>.ssh&lt;/code>目录&lt;/li>
&lt;li>公钥设置位置：github账户&lt;code>Settings&lt;/code>-&amp;gt;&lt;code>SSH and GPG keys&lt;/code>-&amp;gt;&lt;code>New SSH key&lt;/code>将公钥复制粘贴保存就行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>HTTPS认证&lt;/strong>
&lt;ul>
&lt;li>在这种方式中，用户需要提供&lt;strong>用户名&lt;/strong>和&lt;strong>密码&lt;/strong>进行身份验证。用户需要在Git服务器上创建一个用户帐户，并将其关联到本地的Git仓库中。当用户执行需要身份验证的操作时，Git会要求输入用户名和密码。这种方式相对简单，适用于个人项目或小型团队。&lt;/li>
&lt;li>设置位置：在使用Git进行操作时，如push或pull，系统会提示你输入用户名和密码进行身份验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>访问令牌（Personal Access Token）认证&lt;/strong>：不常用
&lt;ul>
&lt;li>访问令牌提供了一种更安全、更灵活的身份验证方式，因为它可以限制令牌的使用权限，并且可以随时撤销或重新生成令牌。&lt;/li>
&lt;li>设置位置：github账户&lt;code>Settings&lt;/code>-&amp;gt;&lt;code>Developer Settings&lt;/code>-&amp;gt;&lt;code>Personal access tokens&lt;/code>-&amp;gt;&lt;code>Tokens (classic)&lt;/code>-&amp;gt;&lt;code>Generate new token&lt;/code>，然后根据自己的需求设置token的权限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="ssh-keygen">
&lt;a href="#ssh-keygen" class="header-anchor">#&lt;/a>
ssh-keygen
&lt;/h4>&lt;p>&lt;code>ssh-keygen&lt;/code>命令是一个用于生成、管理和转换SSH认证密钥的工具。它支持RSA和DSA两种认证密钥类型，并且提供了多种选项和参数，以满足不同的需求。&lt;/p>
&lt;p>使用&lt;code>ssh-keygen&lt;/code>命令，你可以生成新的密钥对，指定密钥的长度、类型以及保存的文件名。生成的私钥将保存在本地，而公钥则用于在SSH服务器上进行身份验证。&lt;/p>
&lt;p>以下是一些常用的&lt;code>ssh-keygen&lt;/code>命令选项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-t&lt;/code>：指定要创建的密钥类型，默认为RSA。&lt;/li>
&lt;li>&lt;code>-b&lt;/code>：指定密钥长度（以位为单位）。对于RSA密钥，最小要求是768位，默认是2048位。对于DSA密钥，长度必须是1024位（根据FIPS 1862标准规定）。&lt;/li>
&lt;li>&lt;code>-f&lt;/code>：指定用于保存密钥的文件名。如果不指定，将使用默认值&lt;code>id_rsa&lt;/code>（对于私钥）和&lt;code>id_rsa.pub&lt;/code>（对于公钥）。&lt;/li>
&lt;li>&lt;code>-C&lt;/code>：提供一个新注释，通常用于标识密钥的用途或所有者。&lt;/li>
&lt;li>&lt;code>-P&lt;/code> 和 &lt;code>-N&lt;/code>：分别用于提供旧密码和新密码，以保护私钥文件。如果留空，则表示不需要密码。&lt;/li>
&lt;/ul>
&lt;p>在生成密钥对后，你可以将公钥复制到需要访问的SSH服务器上，通常是将公钥内容追加到服务器的&lt;code>~/.ssh/authorized_keys&lt;/code>文件中。这样，当你使用SSH客户端连接到服务器时，客户端将使用私钥进行身份验证，如果验证成功，你将能够无需输入密码即可登录到服务器。&lt;/p>
&lt;p>请注意，私钥的安全性至关重要。私钥应该妥善保管，并且不应该与其他人共享。同时，定期更换密钥对也是保持安全性的好习惯。&lt;/p>
&lt;p>除了生成和管理密钥对，&lt;code>ssh-keygen&lt;/code>还提供了其他功能，如转换密钥格式、读取密钥文件等。你可以通过查看&lt;code>ssh-keygen&lt;/code>的帮助文档或手册页（通过运行&lt;code>man ssh-keygen&lt;/code>命令）来获取更详细的信息和用法示例。&lt;/p></description></item></channel></rss>