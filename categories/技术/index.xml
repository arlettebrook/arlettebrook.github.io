<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on Arlettebrook's blog</title><link>https://arlettebrook.github.io/categories/%E6%8A%80%E6%9C%AF/</link><description>Recent content in 技术 on Arlettebrook's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Arlettebrook</copyright><lastBuildDate>Thu, 30 May 2024 21:52:12 +0800</lastBuildDate><atom:link href="https://arlettebrook.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim Introduction</title><link>https://arlettebrook.github.io/p/vim-introduction/</link><pubDate>Thu, 30 May 2024 21:52:12 +0800</pubDate><guid>https://arlettebrook.github.io/p/vim-introduction/</guid><description>&lt;hr>
&lt;h2 id="安装vim">
&lt;a href="#%e5%ae%89%e8%a3%85vim" class="header-anchor">#&lt;/a>
安装vim
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/vim/vim" target="_blank" rel="noopener"
>Vim&lt;/a> （&lt;a class="link" href="https://www.vim.org/" target="_blank" rel="noopener"
>官网&lt;/a>） 是一个非常流行的文本编辑器，可以在多种操作系统上安装和使用。下面是如何在不同系统上安装 Vim 的方法：&lt;/p>
&lt;h3 id="在-linux-上安装-vim">
&lt;a href="#%e5%9c%a8-linux-%e4%b8%8a%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
在 Linux 上安装 Vim
&lt;/h3>&lt;p>大多数 Linux 发行版都在其软件包管理器中包含 Vim。可以使用包管理器来安装它。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Debian/Ubuntu 系列&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>CentOS&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo yum install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="在-macos-上安装-vim">
&lt;a href="#%e5%9c%a8-macos-%e4%b8%8a%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
在 macOS 上安装 Vim
&lt;/h3>&lt;p>macOS 通常预装了 Vim，但可能不是最新版本。你可以使用 Homebrew 来安装或更新 Vim。&lt;/p>
&lt;p>使用 Homebrew 安装&lt;/p>
&lt;ul>
&lt;li>
&lt;p>确保 Homebrew 已安装。你可以在终端中运行以下命令来安装 Homebrew：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">/bin/bash -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 Homebrew 安装 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="在-windows-上安装-vim">
&lt;a href="#%e5%9c%a8-windows-%e4%b8%8a%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
&lt;strong>在 Windows 上安装 Vim&lt;/strong>
&lt;/h3>&lt;p>在 Windows 上，你可以通过以下方法安装 Vim：&lt;/p>
&lt;p>&lt;strong>直接下载安装程序&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>访问 &lt;a class="link" href="https://www.vim.org/download.php" target="_blank" rel="noopener"
>Vim 官方下载页面&lt;/a>。推荐&lt;a class="link" href="https://github.com/vim/vim-win32-installer/releases/latest" target="_blank" rel="noopener"
>vim-win32-installer&lt;/a>（会及时提供最新编译版）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &amp;ldquo;PC: MS-DOS and MS-Windows&amp;rdquo; 部分，下载适用于 Windows 的安装程序（通常是 &lt;code>gvim&lt;/code> 安装程序）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行下载的安装程序，按照提示完成安装。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完成之后建议添加如下两个环境变量。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Path环境变量：添加的值为vim安装路径里面的具体版本。如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>D:\Vim\vim91&lt;/code> or &lt;code>%VIM%\vim91&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080.png"
width="930"
height="375"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080_hu05a0e34d1eba5ad560312f13394693eb_30274_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080_hu05a0e34d1eba5ad560312f13394693eb_30274_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240531122127080"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>环境变量VIM：值为vim的安装路径。如&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284.png"
width="930"
height="375"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284_hua4ef87cb928a3886ca7ee8a8cfe7fb50_18966_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284_hua4ef87cb928a3886ca7ee8a8cfe7fb50_18966_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240531122015284"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Windows版本的vim提供了卸载程序。在程序和功能中找到即可卸载。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Windows安装结束后，你会发现开始菜单中有好多Vim，而且名字都不一样。&lt;/p>
&lt;p>他们的区别如下：&lt;/p>
&lt;ol>
&lt;li>有g和没有g
gVim 是在windows下的Gui图形用户界面的的 vim (GUI Vim)，支持windows的一些快捷方式，支持鼠标操作
vim 是在windows下的类似linux vi 编辑的界面，只能用键盘操作。
vim的操作指令同时适用于gVim&lt;/li>
&lt;li>Vim, Vim Diff, Vim Easy, Vim Read-only
Diff 是用来对比两个文件内容用的，直接打开挺没用的，不过直接拖2个文件到快捷方式上倒是可行；
Easy启动的时候是insert模式，适合普通windows用户的习惯；
Read-Only的用途：比如用read-only打开已经用vim打开过的文件，就不会提示让人烦躁的.swp文件存在的问题；&lt;/li>
&lt;/ol>
&lt;h3 id="通用方法编译安装-vim">
&lt;a href="#%e9%80%9a%e7%94%a8%e6%96%b9%e6%b3%95%e7%bc%96%e8%af%91%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
通用方法：编译安装 Vim
&lt;/h3>&lt;p>如果你希望安装最新版本的 Vim 或自定义编译选项，可以从源代码编译安装。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装必要的依赖项（以 Ubuntu 为例）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install git make ncurses-dev gcc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>克隆 Vim 的源代码仓库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/vim/vim.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置并编译 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./configure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="在ide中安装vim插件">
&lt;a href="#%e5%9c%a8ide%e4%b8%ad%e5%ae%89%e8%a3%85vim%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
在IDE中安装vim插件
&lt;/h3>&lt;p>许多现代集成开发环境（IDE）提供了 Vim 模拟插件。我们在享受 IDE 强大功能的同时，可以继续使用Vim的编辑风格。&lt;/p>
&lt;p>要在IDE中安装vim插件，只需要在对应IDE的插件市场搜索安装即可，我常用的：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>JetBrains系列&lt;/strong>：IdeaVim
&lt;ul>
&lt;li>可以配置 &lt;code>~/.ideavimrc&lt;/code> 文件来个性化设置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Visual Studio Code (VS Code)&lt;/strong>：Vim
&lt;ul>
&lt;li>可通过 &lt;code>settings.json&lt;/code> 文件进行配置和自定义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Sublime Text&lt;/strong>：Vintageous
&lt;ul>
&lt;li>可以通过 Sublime Text 的设置进行配置和自定义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="配置vim">
&lt;a href="#%e9%85%8d%e7%bd%aevim" class="header-anchor">#&lt;/a>
配置vim
&lt;/h2>&lt;p>Vim 是一个高度可配置的文本编辑器，可以通过编辑其配置文件来调整和扩展其功能。&lt;/p>
&lt;h3 id="配置文件介绍">
&lt;a href="#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e4%bb%8b%e7%bb%8d" class="header-anchor">#&lt;/a>
配置文件介绍
&lt;/h3>&lt;p>Vim没有提供图形化的配置界面，配置Vim都是通过配置文件（&lt;code>.vimrc&lt;/code>）实现的：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在 Unix 或 Linux 系统中，&lt;code>.vimrc&lt;/code> 文件通常位于用户的主目录中，例如 &lt;code>~/.vimrc&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 Windows 系统中，&lt;code>.vimrc&lt;/code> 文件可以放在用户主目录下，例如 &lt;code>C:\Users\&amp;lt;username&amp;gt;\_vimrc&lt;/code>，或者 &lt;code>C:\Users\&amp;lt;username&amp;gt;\.vimrc&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**总结：Vim配置文件都在用户的家目录下，名称都可以用&lt;code>.vimrc&lt;/code>表示。**没有手动创建一个空文件，直接使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>要修改配置，就在&lt;code>.vimrc&lt;/code>文件中修改就行。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>注意事项&lt;/strong>&lt;/em>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>注释是以&lt;code>&amp;quot;&lt;/code>开头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部分vim插件版的配置文件名并不是&lt;code>.vimrc&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>如ideavim：&lt;code>~/.ideavimr&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这里总结一下git bash内置的vim插件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>该vim版本也可以用&lt;code>~/.vimrc&lt;/code>进行配置值。&lt;/p>
&lt;ul>
&lt;li>默认的配置文件在&lt;code>git安装位置/etc/vimrc&lt;/code>。只读。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>如果期望git bash不使用内置的vim插件&lt;/strong>，使用的是自己安装的vim版本：&lt;/p>
&lt;ul>
&lt;li>可以修改git bash的配置文件&lt;code>.bashrc&lt;/code>，添加vim的安装位置。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/d/vim/vim91:&lt;/span>&lt;span class="nv">$PATH&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>原理：使自己安装的vim版本优先级最高。先加载。尽管我在PATH变量中添加了自己安装的vim版本路径，但是无法保证谁的优先级高，所以使用了上面办法，使自己安装的vim版本优先级最高。先加载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="常见的-vim-配置项">
&lt;a href="#%e5%b8%b8%e8%a7%81%e7%9a%84-vim-%e9%85%8d%e7%bd%ae%e9%a1%b9" class="header-anchor">#&lt;/a>
常见的 Vim 配置项
&lt;/h3>&lt;p>&lt;code>.vimrc&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>基本设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">filetype on &lt;span class="s2">&amp;#34;开启文件类型侦测
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">filetype indent on &amp;#34;&lt;/span>适应不同语言的缩进
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">syntax &lt;span class="nb">enable&lt;/span> &lt;span class="s2">&amp;#34;开启语法高亮功能
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">syntax on &amp;#34;&lt;/span>允许使用用户配色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>显示设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">shortmess&lt;/span>&lt;span class="o">=&lt;/span>atI &lt;span class="s2">&amp;#34;不显示启动提示信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set laststatus=2 &amp;#34;&lt;/span>总是显示状态栏,命令行（在状态行下）的高度，默认为1，这里是2。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 我的状态行显示的内容（包括文件类型和解码）后续用插件美化。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">statusline&lt;/span>&lt;span class="o">=&lt;/span>%F%m%r%h%w&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">FORMAT&lt;/span>&lt;span class="o">=&lt;/span>%&lt;span class="o">{&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>ff&lt;span class="o">}]&lt;/span>&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">TYPE&lt;/span>&lt;span class="o">=&lt;/span>%Y&lt;span class="o">]&lt;/span>&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">POS&lt;/span>&lt;span class="o">=&lt;/span>%l,%v&lt;span class="o">][&lt;/span>%p%%&lt;span class="o">]&lt;/span>&lt;span class="se">\ &lt;/span>%&lt;span class="o">{&lt;/span>strftime&lt;span class="o">(&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>%d/%m/%y&lt;span class="se">\ &lt;/span>-&lt;span class="se">\ &lt;/span>%H:%M&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="o">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">cmdheight&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="s2">&amp;#34; 命令行（在状态行下）的高度，默认为1，这里是2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set ruler &amp;#34;&lt;/span>显示光标位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> number &lt;span class="s2">&amp;#34;显示行号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> cursorline &lt;span class="s2">&amp;#34;高亮显示当前行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> cursorcolumn &lt;span class="s2">&amp;#34;高亮显示当前列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set hlsearch &amp;#34;&lt;/span> 高亮搜索结果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> incsearch &lt;span class="s2">&amp;#34;边输边高亮
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set ignorecase &amp;#34;&lt;/span>搜索时忽略大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> smartcase &lt;span class="s2">&amp;#34; 智能大小写匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> relativenumber &lt;span class="s2">&amp;#34;其他行显示相对行号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set scrolloff=5 &amp;#34;&lt;/span>垂直滚动时光标距底部位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>编码设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">fileencodings&lt;/span>&lt;span class="o">=&lt;/span>utf-8,gb2312,gbk,gb18030,cp936 &lt;span class="s2">&amp;#34; 检测文件编码,将fileencoding设置为最终编码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set fileencoding=utf-8 &amp;#34;&lt;/span> 保存时的文件编码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">termencoding&lt;/span>&lt;span class="o">=&lt;/span>utf-8 &lt;span class="s2">&amp;#34; 终端的输出字符编码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set encoding=utf-8 &amp;#34;&lt;/span> VIM打开文件使用的内部编码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>编辑设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> expandtab &lt;span class="s2">&amp;#34;扩展制表符为空格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set tabstop=4 &amp;#34;&lt;/span>制表符占空格数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">softtabstop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="s2">&amp;#34;将连续数量的空格视为一个制表符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set shiftwidth=4 &amp;#34;&lt;/span>自动缩进所使用的空格数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">textwidth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span> &lt;span class="s2">&amp;#34;设置一行内容的宽度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set linebreak &amp;#34;&lt;/span>防止单词内部折行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">wrapmargin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="s2">&amp;#34;指定折行处与右边缘空格数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set smarttab &amp;#34;&lt;/span>使用智能制表符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> smartindent &lt;span class="s2">&amp;#34;智能缩进(好处是修改代码时会根据代码规则自动缩进，坏处是当用`:n,m&amp;gt;`对齐左侧的注释将不会被移动)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> autoindent &lt;span class="s2">&amp;#34;自动缩进(这两个差不多，感觉在大括号自动配对时，用智能缩进好点)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set wildmenu &amp;#34;&lt;/span>vim命令自动补全
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> autochdir &lt;span class="s2">&amp;#34;自动定位当前目录。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set wrap &amp;#34;&lt;/span>启用自动换行&lt;span class="s2">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set autoread &amp;#34;&lt;/span>文件改动时自动载入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">t_Co&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">256&lt;/span> &lt;span class="s2">&amp;#34;terminal Color 支持256色(默认是8色)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">hi comment ctermfg=6 &amp;#34;&lt;/span>设置注释颜色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> magic &lt;span class="s2">&amp;#34; 设置魔术
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guioptions-=T &amp;#34;&lt;/span> 隐藏gui工具栏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> guioptions-&lt;span class="o">=&lt;/span>m &lt;span class="s2">&amp;#34; 隐藏gui菜单栏
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guioptions-=r &amp;#34;&lt;/span> 删去gui滚动条&lt;span class="s2">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 使用更友好的颜色方案
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">colorscheme desert
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 设置背景色
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set background=dark
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 显示命令输入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> showcmd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;设置gui字体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guifont=Courier\ New:h20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 设置宽高
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;set lines=15 columns=50
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 启用真彩色颜色支持，让配色方案显示更好。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> termguicolors
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意配置了上面大部分设置，在大多数主题中只需要在&lt;code>vim-plug&lt;/code>后面选择颜色方案&lt;code>colorscheme&lt;/code>即可。&lt;/p>
&lt;hr>
&lt;h2 id="插件使用">
&lt;a href="#%e6%8f%92%e4%bb%b6%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
插件使用
&lt;/h2>&lt;p>Vim 的功能可以通过插件进一步扩展。使用插件可以增强Vim的功能，如语法高亮、代码补全、文件浏览器、版本控制集成、模糊搜索等。&lt;/p>
&lt;p>为了方便安装，更新，删除插件，我们一般使用插件管理器进行插件管理。&lt;/p>
&lt;p>推荐使用的插件管理器是&lt;a class="link" href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener"
>vim-plug&lt;/a>。与其他插件管理器（如 Vundle 和 Pathogen）相比，&lt;code>vim-plug&lt;/code> 提供了更快的性能和更多的功能，如并行安装插件、延迟加载插件、使用简单等。&lt;/p>
&lt;h3 id="安装-vim-plug">
&lt;a href="#%e5%ae%89%e8%a3%85-vim-plug" class="header-anchor">#&lt;/a>
安装 &lt;code>vim-plug&lt;/code>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>下载并安装 &lt;code>vim-plug&lt;/code>&lt;/strong>： 在终端中运行以下命令，这会将 &lt;code>vim-plug&lt;/code> 下载到你的 Vim 自动加载目录下：&lt;/p>
&lt;p>Linux：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Windows：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -fLo ~/vimfiles/autoload/plug.vim --create-dirs &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：需要拥有curl命令，并且终端能够访问外网。&lt;/p>
&lt;p>如果没有，可以手动下载&lt;a class="link" href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" target="_blank" rel="noopener"
>plug.vim&lt;/a>，并将文件放在 windows 中的 &lt;code>~/vimfiles/autoload&lt;/code> 或 Linux 中的 &lt;code>~/.vim/autoload&lt;/code> 文件夹内，没有手动创建。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="插件推荐">
&lt;a href="#%e6%8f%92%e4%bb%b6%e6%8e%a8%e8%8d%90" class="header-anchor">#&lt;/a>
插件推荐
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>状态栏和主题&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/itchyny/lightline.vim" target="_blank" rel="noopener"
>lightline.vim&lt;/a>：轻量级状态栏插件。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener"
>vim-airline&lt;/a>：高级状态栏插件，提供丰富的功能和美观的主题。&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/dracula/dracula-theme" target="_blank" rel="noopener"
>dracula-theme&lt;/a>**主题&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/kaicataldo/material.vim" target="_blank" rel="noopener"
>material.vim&lt;/a>**主题&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/tribela/vim-transparent" target="_blank" rel="noopener"
>vim-transparent&lt;/a>**&lt;strong>终端透明&lt;/strong>。
&lt;ul>
&lt;li>这个插件，可以配置让其他插件也透明。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ajmwagar/vim-deus" target="_blank" rel="noopener"
>vim-deus&lt;/a>主题&lt;/li>
&lt;li>配置主题建议都配置&lt;code>set termguicolors&lt;/code>&amp;quot; &lt;strong>启用真彩色颜色支持&lt;/strong>，&lt;strong>让配色方案显示更好。会让终端透明效果更好。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如果喜欢用gvim(我用sublme的&lt;a class="link" href="#%e5%9c%a8IDE%e4%b8%ad%e5%ae%89%e8%a3%85vim%e6%8f%92%e4%bb%b6" >Vim插件&lt;/a>)。可以：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>全屏显示：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/derekmcloughlin/gvimfullscreen_win32" target="_blank" rel="noopener"
>gvimfullscreen_win32&lt;/a>
32位系统:
- 下载&lt;code>gvimfullscreen.dll&lt;/code>
- 将其放入&lt;code>gvim.exe&lt;/code>同目录的文件夹下
- 配置文件中&lt;code>map &amp;lt;F11&amp;gt; &amp;lt;Esc&amp;gt;:call libcallnr(&amp;quot;gvimfullscreen.dll&amp;quot;, &amp;quot;ToggleFullScreen&amp;quot;, 0)&amp;lt;CR&amp;gt;&lt;/code>&lt;/p>
&lt;p>64位系统同上, 用&lt;code>gvimfullscreen_64&lt;/code>代替&lt;/p>
&lt;p>现在你就可以用&lt;code>&amp;lt;F11&amp;gt;&lt;/code>来进行全屏操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>透明显示&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mattn/vimtweak" target="_blank" rel="noopener"
>vimtweak&lt;/a>&lt;/p>
&lt;p>方法基本同上, 选择&lt;code>vimtweak32.dll&lt;/code>或&lt;code>vimtweak64.dll&lt;/code>放入文件夹, 在vimrc中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">au GUIEnter * call libcallnr&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;vimtweak64.dll&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;SetAlpha&amp;#34;&lt;/span>, 200&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中数值200可以选择0-255, 255为不透明&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>一组默认配置（每个人都同意默认的配置）：&lt;a class="link" href="https://github.com/tpope/vim-sensible" target="_blank" rel="noopener"
>vim-sensible&lt;/a>：插件的功能：&lt;/p>
&lt;ol>
&lt;li>&lt;code>'backspace'&lt;/code>：在插入模式下按退格键可删除任何内容。默认只能删除新添加的。&lt;/li>
&lt;li>&lt;code>'incsearch'&lt;/code>：按回车键之前开始搜索。&lt;/li>
&lt;li>&lt;code>'listchars'&lt;/code>：使&lt;code>:set list&lt;/code>（可见空白）更漂亮。&lt;/li>
&lt;li>&lt;code>'scrolloff'&lt;/code>：始终在光标上方/下方显示至少一行。&lt;/li>
&lt;li>&lt;code>'autoread'&lt;/code>：自动加载文件更改。您可以按 撤消&lt;code>u&lt;/code>。&lt;/li>
&lt;li>&lt;code>runtime! macros/matchit.vim&lt;/code>：加载 Vim 附带的 matchit.vim 版本。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文件浏览和导航&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/preservim/nerdtree" target="_blank" rel="noopener"
>NERDTree&lt;/a>：文件系统浏览器，提供树状目录视图。
&lt;ul>
&lt;li>也可以用内置的&lt;code>:Vex&lt;/code>浏览目录。它没有目录树结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/junegunn/fzf.vim" target="_blank" rel="noopener"
>fzf.vim&lt;/a>：模糊查找工具，基于 &lt;code>fzf&lt;/code> 命令行工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语法高亮和语法检查&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/sheerun/vim-polyglot" target="_blank" rel="noopener"
>vim-polyglot&lt;/a>：支持多种编程语言的语法高亮。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/dense-analysis/ale" target="_blank" rel="noopener"
>ALE&lt;/a>：异步语法检查和修复工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码补全&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/ycm-core/YouCompleteMe" target="_blank" rel="noopener"
>YouCompleteMe&lt;/a>：强大的代码补全插件，支持多种编程语言。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/neoclide/coc.nvim" target="_blank" rel="noopener"
>coc.nvim&lt;/a>：基于 VSCode 插件的代码补全和语言服务器支持。&lt;/li>
&lt;li>&lt;strong>没打算用vim写代码，没花时间去配置&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>版本控制&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-fugitive" target="_blank" rel="noopener"
>vim-fugitive&lt;/a>：Git 集成插件，提供强大的 Git 操作支持。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/airblade/vim-gitgutter" target="_blank" rel="noopener"
>gitgutter&lt;/a>：在编辑器中显示 Git 的改动信息。&lt;/li>
&lt;li>都是在终端中使用git，我没有配置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其他实用插件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/machakann/vim-highlightedyank" target="_blank" rel="noopener"
>vim-highlightedyank&lt;/a>：让复制区域高亮。（ideavim内置插件。）&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/jiangmiao/auto-pairs" target="_blank" rel="noopener"
>auto-pairs&lt;/a>：成对添加、删除、高亮括号。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener"
>surround.vim&lt;/a>：轻松操作成对符号（例如引号、括号）。
&lt;ul>
&lt;li>auto-pairs的扩展。成对修改括号为别的括号。如&lt;code>cs&amp;quot;'&lt;/code>将成对&lt;code>&amp;quot;&lt;/code>改为&lt;code>'&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-commentary" target="_blank" rel="noopener"
>commentary.vim&lt;/a>：快速注释和取消注释代码。
&lt;ul>
&lt;li>在普通模式下，移动光标到要注释的行，然后使用 &lt;code>gcc&lt;/code> 注释/取消注释当前行。&lt;/li>
&lt;li>在可视模式下，选择要注释的代码块，然后使用 &lt;code>gc&lt;/code> 注释/取消注释选定的代码。&lt;/li>
&lt;li>&lt;strong>很智能，好用。&lt;/strong>（ideavim内置插件。）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="配置插件">
&lt;a href="#%e9%85%8d%e7%bd%ae%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
配置插件
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>编辑 &lt;code>.vimrc&lt;/code> 文件，添加插件管理器配置&lt;/strong>：&lt;/p>
&lt;p>windwos为例，将插件安装位置保存在&lt;code>$VIM/vimfiles/plugged&lt;/code>，将下面代码追加到&lt;code>.vimrc&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>插件vim-plug&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 初始化 vim-plug
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Linux上默认
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; call plug#begin()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> windows上自定义插件安装位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#begin&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;$VIM/vimfiles/plugged&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; The default plugin directory will be as follows:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - Vim &lt;span class="o">(&lt;/span>Linux/macOS&lt;span class="o">)&lt;/span>: &lt;span class="s1">&amp;#39;~/.vim/plugged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - Vim (Windows): &amp;#39;~/vimfiles/plugged&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - Neovim &lt;span class="o">(&lt;/span>Linux/macOS/Windows&lt;span class="o">)&lt;/span>: stdpath&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> . &lt;span class="s1">&amp;#39;/plugged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; You can specify a custom plugin directory by passing it as the argument
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - e.g. &lt;span class="sb">`&lt;/span>call plug#begin&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;~/.vim/plugged&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - Avoid using standard Vim directory names like &amp;#39;plugin&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 添加插件列表,确保使用的是单引号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; Plug &amp;#39;tpope/vim-sensible&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Plug &lt;span class="s1">&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; Plug &amp;#39;itchyny/lightline.vim&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Call plug#end to update &lt;span class="p">&amp;amp;&lt;/span>runtimepath and initialize the plugin system.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - It automatically executes `filetype plugin indent on` and `syntax enable`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 结束插件配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#end&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; You can revert the settings after the call like so:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> filetype indent off &lt;span class="s2">&amp;#34; Disable file-type-specific indentation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> syntax off &lt;span class="s2">&amp;#34; Disable syntax highlighting
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;插件vim-plug结束&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>添加插件&lt;/strong>：我们只需要将插件添加到&lt;code>Plug ''&lt;/code>里面即可，别忘记取消注释。插件名一般为为&lt;code>github作者/仓库名&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安装插件&lt;/strong>：打开vim运行&lt;code>:PlugInstall&lt;/code>命令来安装 &lt;code>.vimrc&lt;/code> 中定义的插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>更新插件&lt;/strong>： 要更新所有插件，运行：&lt;code>:PlugUpdate&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>清除未使用的插件&lt;/strong>： 如果你从配置中移除了一些插件，可以运行&lt;code>:PlugClean&lt;/code>命令来删除未使用的插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查插件状态&lt;/strong>： 要检查插件的状态和版本，运行&lt;code>:PlugStatus&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Done&lt;/code>表示成功，&lt;code>:q&lt;/code>退出插件管理器。失败退出重试。或R重试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插件安装成功示例：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059_huee49f788443b9dc26c2bb4e8763bb219_1388323_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059_huee49f788443b9dc26c2bb4e8763bb219_1388323_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=":PlugInstall"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="效果展示">
&lt;a href="#%e6%95%88%e6%9e%9c%e5%b1%95%e7%a4%ba" class="header-anchor">#&lt;/a>
&lt;strong>效果展示&lt;/strong>
&lt;/h2>&lt;p>vim配置效果：&lt;/p>
&lt;p>material：default：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165_huee49f788443b9dc26c2bb4e8763bb219_1505492_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165_huee49f788443b9dc26c2bb4e8763bb219_1505492_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="material：default"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>material：palenight：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541_huee49f788443b9dc26c2bb4e8763bb219_1509648_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541_huee49f788443b9dc26c2bb4e8763bb219_1509648_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="material：palenight"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>区别不是很大。&lt;/p>
&lt;p>deus：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263_huee49f788443b9dc26c2bb4e8763bb219_1510375_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263_huee49f788443b9dc26c2bb4e8763bb219_1510375_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="deus"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>我的&lt;a class="link" href="https://github.com/arlettebrook/arlettebrook/tree/main/vim.cfg" target="_blank" rel="noopener"
>完整配置&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="扩展">
&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">#&lt;/a>
扩展
&lt;/h2>&lt;h3 id="自定义快捷键">
&lt;a href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%bf%ab%e6%8d%b7%e9%94%ae" class="header-anchor">#&lt;/a>
自定义快捷键
&lt;/h3>&lt;p>在Vim中自定义快捷键，其实就创建快捷键与命令之间的映射关系。&lt;/p>
&lt;p>用到的命令是&lt;code>map&lt;/code>或&lt;code>noremap&lt;/code>。注意：要将命令配置在&lt;code>.vimrc&lt;/code>中。&lt;/p>
&lt;p>格式：&lt;code>映射命令 快捷键 命令&lt;/code>，中间用空格分隔开。&lt;/p>
&lt;p>前面有&lt;code>n, i, v, c&lt;/code>中的任意一个字符表示对应的模式。如&lt;code>nmap&lt;/code>或&lt;code>nnoremap&lt;/code>表示Normal模式下的映射关系。没有表示所有模式的映射关系。&lt;/p>
&lt;p>&lt;strong>二者区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>map&lt;/code>会递归解析映射。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>noremap&lt;/code>不会递归解析映射。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>意思是如果命令中有别的映射，一个会解析，一个不会。如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">nmap yy dd &lt;span class="c1"># 修改了默认映射。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap ,y &lt;span class="s2">&amp;#34;*yy # 会执行复制一行命令到剪切板。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">nmap ,d &amp;#34;&lt;/span>*yy &lt;span class="c1"># 会删除一行命令到剪切板。解析了yy映射。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>看需求使用，是否需要递归映射。没有需求推荐使用&lt;code>noremap&lt;/code>创建映射，防止映射多了，递归解析，导致无限循环或意外行为。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>常用键表示法&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>普通字符&lt;/strong>：
&lt;ul>
&lt;li>直接输入字母、数字、符号。例如：&lt;code>a&lt;/code>, &lt;code>b&lt;/code>, &lt;code>1&lt;/code>, &lt;code>2&lt;/code>, &lt;code>#&lt;/code>, &lt;code>*&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>控制键&lt;/strong>：
&lt;ul>
&lt;li>使用 &lt;code>&amp;lt;Ctrl&amp;gt;&lt;/code>（或 &lt;code>&amp;lt;C&amp;gt;&lt;/code>）表示控制键。例如：&lt;code>&amp;lt;C-a&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>功能键&lt;/strong>：
&lt;ul>
&lt;li>使用 &lt;code>&amp;lt;F1&amp;gt;&lt;/code> 到 &lt;code>&amp;lt;F12&amp;gt;&lt;/code> 表示功能键。例如：&lt;code>&amp;lt;F2&amp;gt;&lt;/code> 表示功能键 &lt;code>F2&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>特殊键&lt;/strong>：
&lt;ul>
&lt;li>使用尖括号包围的特殊键表示法。例如：
&lt;ul>
&lt;li>&lt;code>&amp;lt;Esc&amp;gt;&lt;/code>：Escape 键&lt;/li>
&lt;li>&lt;code>&amp;lt;CR&amp;gt;&lt;/code>：回车键（Enter）&lt;/li>
&lt;li>&lt;code>&amp;lt;Tab&amp;gt;&lt;/code>：制表符键（Tab）&lt;/li>
&lt;li>&lt;code>&amp;lt;Space&amp;gt;&lt;/code>：空格键（Space）&lt;/li>
&lt;li>&lt;code>&amp;lt;BS&amp;gt;&lt;/code>：退格键（Backspace）&lt;/li>
&lt;li>&lt;code>&amp;lt;Del&amp;gt;&lt;/code>：删除键（Delete）&lt;/li>
&lt;li>&lt;code>&amp;lt;Up&amp;gt;&lt;/code>：上箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Down&amp;gt;&lt;/code>：下箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Left&amp;gt;&lt;/code>：左箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Right&amp;gt;&lt;/code>：右箭头键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>组合键&lt;/strong>：
&lt;ul>
&lt;li>可以组合使用。例如：&lt;code>&amp;lt;C-Space&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+Space&lt;/code>，&lt;code>&amp;lt;C-Left&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+Left&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>示例：在vim中没有快捷键删除光标后面的字符。我们来自定义映射实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; ctrl-k：删除光标后面的字符，部分版本不支持
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">nnoremap &amp;lt;C-k&amp;gt; D
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">inoremap &amp;lt;C-k&amp;gt; &amp;lt;Esc&amp;gt;lC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">vnoremap &amp;lt;C-k&amp;gt; d
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 定义删除光标后所有字符的函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span>! DeleteAfterCursor&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34; 获取当前光标在命令行中的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> let current_pos = getcmdpos()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&lt;/span> 获取当前命令行的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">let&lt;/span> &lt;span class="nv">cmdline&lt;/span> &lt;span class="o">=&lt;/span> getcmdline&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34; 截取字符串，获取光标前的部分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> let new_cmdline = strpart(cmdline, 0, current_pos - 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&lt;/span> 设置新的命令行内容，只保留光标前的部分，去掉光标位置及其后的所有字符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call setcmdline&lt;span class="o">(&lt;/span>new_cmdline&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">endfunction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 在命令行模式下映射 &amp;lt;C-k&amp;gt; 为删除光标后的所有字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 用表达式寄存器调用删除函数，最后回车
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cnoremap &amp;lt;C-k&amp;gt; &amp;lt;C-r&amp;gt;&lt;span class="o">=&lt;/span>DeleteAfterCursor&lt;span class="o">()&lt;/span>&amp;lt;CR&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过上面的命令，我们实现了终端在Emacs模式下的&lt;code>ctrl-k&lt;/code>快捷键。但是只能在vim中使用，并且vim版本需要支持表达式寄存器。&lt;/p>
&lt;p>如果终端的编辑模式为vi，依旧不能解决问题。在insert模式下不能使用&lt;code>ctl-k&lt;/code>快捷键。需要修改终端的映射关系&lt;code>.inputrc&lt;/code>。不过够用了。&lt;/p></description></item><item><title>Terminal And Shell Introduction</title><link>https://arlettebrook.github.io/p/terminal-and-shell-introduction/</link><pubDate>Mon, 27 May 2024 15:17:13 +0800</pubDate><guid>https://arlettebrook.github.io/p/terminal-and-shell-introduction/</guid><description>&lt;hr>
&lt;h2 id="概念">
&lt;a href="#%e6%a6%82%e5%bf%b5" class="header-anchor">#&lt;/a>
概念
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>终端&lt;/strong>：命令行&lt;strong>交互界面&lt;/strong>。如：
&lt;ul>
&lt;li>windows terminal、windterm、FinalShell。PowerShell。&lt;/li>
&lt;li>控制台：一种特殊的终端。范围更广，既可以指硬件也可以指软件工具，常用于&lt;strong>系统管理&lt;/strong>和&lt;strong>监控&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>TTY&lt;/strong>：终端的&lt;strong>文本输入输出接口&lt;/strong>。可以理解为就是终端。不深入了解😂。&lt;/li>
&lt;li>&lt;strong>Shell&lt;/strong>：命令行&lt;strong>解释器&lt;/strong>。如：
&lt;ul>
&lt;li>Bash、Zsh、PowerShell、git bash。&lt;/li>
&lt;li>终端通过TTY与Shell通信。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://prinsss.github.io/the-difference-between-cli-terminal-shell-tty/" target="_blank" rel="noopener"
>命令行界面 (CLI)、终端 (Terminal)、Shell、TTY，傻傻分不清楚？&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="zsh安装">
&lt;a href="#zsh%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
zsh安装
&lt;/h2>&lt;p>Bash是Linux系统内置的shell，提供了强大的命令行编辑、脚本编写和命令历史功能，广泛用于 Linux 和 macOS 系统中。是目前最流行的 Shell 之一。&lt;/p>
&lt;p>而&lt;strong>Zsh&lt;/strong> 是一个功能强大的 Shell，具有比 Bash 更多的特性，如更高级的自动补全、更强大的脚本能力和更丰富的配置选项，还提供了诸如共享历史、拼写校正、主题支持和插件系统等&lt;strong>增强功能&lt;/strong>，使其成为高级用户和开发者的首选。&lt;/p>
&lt;p>接下来介绍如何安装：&lt;/p>
&lt;h3 id="windows上安装">
&lt;a href="#windows%e4%b8%8a%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
windows上安装
&lt;/h3>&lt;blockquote>
&lt;p>注意：windows上安装zsh是建立在git bash基础上的。&lt;/p>
&lt;p>所以只有安装了git，我们才能在windows上使用zsh。&lt;/p>
&lt;p>安装git：&lt;a class="link" href="https://git-scm.com/downloads" target="_blank" rel="noopener"
>git官网&lt;/a>。&lt;/p>
&lt;p>个人体验：利用上面方法在windows上使用zsh，效果不是特别好，不知道是不是我电脑配置低的原因：每次利用git bash启动zsh都很慢。所以windows上我用的shell一直都是git bash。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>下载zsh对应的windows版本，官方并没有提供，由MSYS2提供。（官方下载需要用包管理工具）&lt;/p>
&lt;ol>
&lt;li>&lt;em>MSYS2&lt;/em> 是针对Windows 的软件分发和构建平台。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>windows上如果没有包管理工具，只能去这里下载：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://packages.msys2.org/package/zsh?repo=msys&amp;amp;variant=x86_64" target="_blank" rel="noopener"
>地址&lt;/a>、&lt;a class="link" href="https://arlettebrook.github.io/docs/zsh-5.9-2-x86_64.pkg.tar.zst" >备用&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752.png"
width="1805"
height="1004"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752_hub9924f94a57f81d5a3f9ba3704840859_162646_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752_hub9924f94a57f81d5a3f9ba3704840859_162646_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318211226752"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>后续教程是以文件下载为例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载完成之后将压缩包解压，用rar就可以解压。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将解压的内容全部剪切到git的安装目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要权限的话就授权（可能需要多次授权），重名的话直接覆盖。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512.png"
width="1123"
height="569"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512_hu0d0d9fcf86c988e4e9d5ae9475f1bc04_305509_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512_hu0d0d9fcf86c988e4e9d5ae9475f1bc04_305509_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="zsh安装"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开 &lt;code>Git Bash&lt;/code> 标签页或者直接右键打开 &lt;code>Git bash&lt;/code> 输入 &lt;code>zsh&lt;/code>，出现下图则安装成功：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689.png"
width="1464"
height="619"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689_hu888a0765c6558b2f5b304f38d42d14d9_183280_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689_hu888a0765c6558b2f5b304f38d42d14d9_183280_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="zsh安装成功"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>暂时先不进行其他设置，直接输入 &lt;code>0&lt;/code> 结束并生成 &lt;code>.zshrc&lt;/code> 配置文件即可。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>该文件在当前用户的家目录，win+r输入.回车进入就是。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于现在没有安装 &lt;code>zsh&lt;/code> 主题，可以这样区分 &lt;code>bash&lt;/code> 和 &lt;code>zsh&lt;/code>，&lt;code>bash&lt;/code>的光标在第二行，&lt;code>zsh&lt;/code>的光标在同一行：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004.png"
width="1122"
height="353"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004_huaa3a3d2a895f8ba462c747670bfa2bbe_107053_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004_huaa3a3d2a895f8ba462c747670bfa2bbe_107053_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318212921004"
class="gallery-image"
data-flex-grow="317"
data-flex-basis="762px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设置默认启动&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每次打开 &lt;code>Git Bash&lt;/code> 终端，你会发现默认还是 &lt;code>Bash&lt;/code> ，而不是 &lt;code>Zsh&lt;/code>，可以通过编辑 &lt;code>Bash&lt;/code> 终端的配置文件 &lt;code>.bashrc&lt;/code> 来实现默认使用 &lt;code>Zsh&lt;/code>，在 &lt;code>Git Bash&lt;/code> 终端中输入命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Vim&lt;/code> 默认是命令模式，你可以直接用文本编辑器打开将配置内容粘贴进去：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -t &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="c1">#1表示标准输出，用于判断标准输出是否连接到终端（tty），如果是，则执行 zsh 命令来切换为 Zsh Shell。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exec&lt;/span> zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476.png"
width="512"
height="81"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476_hu1e5990fd6da39c6510ea70d89bf2b8f4_6754_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476_hu1e5990fd6da39c6510ea70d89bf2b8f4_6754_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318213908476"
class="gallery-image"
data-flex-grow="632"
data-flex-basis="1517px"
>&lt;/p>
&lt;p>后面是vim的常用命令，&lt;code>a、shift+insert、esc、+:wq&lt;/code>最后按回车键，保存退出&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109.png"
width="688"
height="574"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109_hu931784de102814e41646c4d584a25f97_58094_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109_hu931784de102814e41646c4d584a25f97_58094_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318214206109"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>注意：注释（#）调这三行代码，启动git bash时就不会启用zsh。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>之后再打开 &lt;code>Git Bash&lt;/code> 终端，默认就会使用 &lt;code>Zsh&lt;/code> 了。第一次可能有一个警告：大概是找不到 &lt;code>~/bash_profile&lt;/code> 等一些文件，可以忽略，以后不会再出现了。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006.png"
width="1354"
height="303"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006_hufd137b992942db01eb4ba2ae0522f34e_39071_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006_hufd137b992942db01eb4ba2ae0522f34e_39071_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318214357006"
class="gallery-image"
data-flex-grow="446"
data-flex-basis="1072px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>至此windows上安装zsh完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="linux上安装">
&lt;a href="#linux%e4%b8%8a%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
Linux上安装
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>准备：&lt;/p>
&lt;p>查看当前 shell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$SHELL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$0&lt;/span> &lt;span class="c1"># or&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575.png"
width="504"
height="94"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575_hu6eabb1d7bd44ae1fe519b45cc99cdfaf_10368_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575_hu6eabb1d7bd44ae1fe519b45cc99cdfaf_10368_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318234623575"
class="gallery-image"
data-flex-grow="536"
data-flex-basis="1286px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 zsh&lt;/p>
&lt;p>CentOS：要管理员身份&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yum install -y zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ubuntu：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt install -y zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316.png"
width="1449"
height="636"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316_hu2bed67af52d98caf3d11136dc6de7739_97734_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316_hu2bed67af52d98caf3d11136dc6de7739_97734_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318235111316"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>将zsh替换为默认shell&lt;/em>&lt;/p>
&lt;ol>
&lt;li>为 root 设置默认 shell&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">chsh -s /bin/zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回结果如下，表示切换完成（下载安装 oh-my-zsh 成功后也会提示切换）&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1.png"
width="837"
height="139"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1_huf140ac723ea08623c53dd917a2bbf634_32603_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1_huf140ac723ea08623c53dd917a2bbf634_32603_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318235425237"
class="gallery-image"
data-flex-grow="602"
data-flex-basis="1445px"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>为特定用户设置默认 shell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo chsh -s /bin/zsh &amp;lt;username&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;username&amp;gt; 替换为实际用户名&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;em>在 CentOS 8 中可能报错 Command not found，执行&lt;/em> &lt;code>sudo dnf install util-linux-user&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>重新登录shell之后，默认就是zsh&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682.png"
width="1055"
height="150"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682_hu41e05cc99389c4a9c4d54b707fa6ef54_27255_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682_hu41e05cc99389c4a9c4d54b707fa6ef54_27255_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240319000037682"
class="gallery-image"
data-flex-grow="703"
data-flex-basis="1688px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>至此Linux安装zsh完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="安装-oh-my-zsh">
&lt;a href="#%e5%ae%89%e8%a3%85-oh-my-zsh" class="header-anchor">#&lt;/a>
安装 Oh My Zsh
&lt;/h3>&lt;blockquote>
&lt;blockquote>
&lt;p>成功安装了zsh，还需要安装Oh My Zsh，它对zsh进行了扩展，这也是为什么要使用zsh了，而不是bash的原因。&lt;/p>
&lt;/blockquote>
&lt;p>注意：以下方法同适用于安装了zsh的环境，如Linux。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>在安装好 &lt;code>Zsh&lt;/code> 终端之后，看起来跟 &lt;code>Bash&lt;/code> 终端并无太大的区别，我们也没有进行设置。而 &lt;code>Oh My Zsh&lt;/code> 可以用于管理 &lt;code>Zsh&lt;/code>配置。它捆绑了数千个有用的功能、助手、插件、主题等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>官方： &lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener"
>https://github.com/ohmyzsh/ohmyzsh&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在命令行输入命令并按回车执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>这条命令国内需要开代理，且模式为Tun终端才能访问。官方有提供国内的下载地址，失败多试几次。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://install.ohmyz.sh/&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>还需要有curl以及git工具，我MinGW默认安装了curl命令，如果失败可以下载ohmyzsh安装脚本本地运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh ./install.sh &lt;span class="c1">#离线安装,注意要进入脚本的下载位置&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>出现下图的内容就是安装成功了，如果出现错误，或长时间没有响应，多试几次即可：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028.png"
width="1139"
height="591"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028_huad0b7df38215d3d38bab2d1533fb0332_323810_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028_huad0b7df38215d3d38bab2d1533fb0332_323810_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="windows成功安装ohmyzsh"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;blockquote>
&lt;p>最后一行的 &lt;code>ERROR&lt;/code> 可以忽略，windows正常，Linux没有&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971.png"
width="1453"
height="680"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971_huabb79a28aae75544a980d294d720869d_182993_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971_huabb79a28aae75544a980d294d720869d_182993_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Linux成功安装ohmyzsh"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p>
&lt;h4 id="配置-zsh">
&lt;a href="#%e9%85%8d%e7%bd%ae-zsh" class="header-anchor">#&lt;/a>
配置 zsh
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code>的配置文件在用户的家目录，文件名是 &lt;code>.zshrc&lt;/code>，编辑配置文件，可以对 &lt;code>Zsh&lt;/code>进行一些定制化配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑并保存配置文件之后，并不会立即生效，可以关闭所有终端重新打开，或者使用命令让配置生效：&lt;/p>
&lt;p>source可以替换成.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">. ~/.zshrc &lt;span class="c1"># or&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h5 id="配置主题">
&lt;a href="#%e9%85%8d%e7%bd%ae%e4%b8%bb%e9%a2%98" class="header-anchor">#&lt;/a>
&lt;strong>配置主题&lt;/strong>
&lt;/h5>&lt;ol>
&lt;li>
&lt;p>就是对.zshrc配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Oh My Zsh&lt;/code> 安装默之后，默认使用主题是 &lt;code>robbyrussell&lt;/code>，可以修改 &lt;code>.zshrc&lt;/code> 配置中的 &lt;code>ZSH_THEME&lt;/code> 字段，所有可用主题可参考&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" target="_blank" rel="noopener"
>ohmyzsh官方主题页面&lt;/a>，这里先配置一下我个人比较喜欢的主题：gentoo or eastwood or daveverwer or bira&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165.png"
width="1416"
height="645"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165_huef769454bc107dc852ce76255764dbbe_224565_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165_huef769454bc107dc852ce76255764dbbe_224565_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="修改主题"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira.jpg"
width="1650"
height="1110"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira_hu1442ac57ea79dc6d09823129d334f3f8_101939_480x0_resize_q75_box.jpg 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira_hu1442ac57ea79dc6d09823129d334f3f8_101939_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="bira主题"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注意：&lt;code>ZSH_THEME&lt;/code>只能修改为官方提供的主题名，然后重新加载&lt;code>.zshrc&lt;/code>文件，就能修改为指定的主题。&lt;/p>
&lt;ol>
&lt;li>官方提供的主题都保存在&lt;code>~/.oh-my-zsh/themes&lt;/code>目录，你也可以自定义主题。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h5 id="配置插件">
&lt;a href="#%e9%85%8d%e7%bd%ae%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
&lt;strong>配置插件&lt;/strong>
&lt;/h5>&lt;ol>
&lt;li>
&lt;p>插件Oh My Zsh 附带了大量插件供您使用。您可以查看&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins" target="_blank" rel="noopener"
>插件&lt;/a>目录和/或&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins" target="_blank" rel="noopener"
>wiki&lt;/a>，了解当前可用的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过使用插件，可以让 &lt;code>Zsh&lt;/code> 的功能更加强大，&lt;code>Zsh&lt;/code> 和 &lt;code>Oh My Zsh&lt;/code> 自带了一些实用的插件，也可以下载其他的插件。 如 &lt;code>Zsh&lt;/code> 自带 &lt;code>Git&lt;/code> 插件，可以在命令行显示 &lt;code>Git&lt;/code> 相关的信息，并提供了一些操作 &lt;code>Git&lt;/code> 的别名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gaa&lt;/span> &lt;span class="o">=&lt;/span> git add --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gcmsg&lt;/span> &lt;span class="o">=&lt;/span> git commit -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ga&lt;/span> &lt;span class="o">=&lt;/span> git add
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gst&lt;/span> &lt;span class="o">=&lt;/span> git status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gp&lt;/span> &lt;span class="o">=&lt;/span> git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061.png"
width="1005"
height="193"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061_hu25160011d60cf4d886eefedb303c67fd_51614_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061_hu25160011d60cf4d886eefedb303c67fd_51614_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318230853061"
class="gallery-image"
data-flex-grow="520"
data-flex-basis="1249px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h6 id="自动补全">
&lt;a href="#%e8%87%aa%e5%8a%a8%e8%a1%a5%e5%85%a8" class="header-anchor">#&lt;/a>
&lt;strong>自动补全&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>zsh-autosuggestions&lt;/code> 插件，可以在你历史指令中找到与你当前输入指令匹配的记录，并高亮显示，如果想直接使用，可以直接通过右方向键补全。 安装插件，在终端分别执行下面两条命令：官方&lt;a class="link" href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener"
>zsh-autosuggestions&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/.oh-my-zsh/custom/plugins
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#指定了克隆的位置，就是什么切换的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>插件下载完成之后，编辑 &lt;code>~/.zshrc&lt;/code> 配置文件，修改插件相关配置项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>插件下载完成之后，编辑 &lt;code>~/.zshrc&lt;/code> 配置文件，修改插件相关配置项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520.png"
width="1030"
height="276"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520_hu60e5cfc85ad4aa44992b56b8a46f4def_60716_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520_hu60e5cfc85ad4aa44992b56b8a46f4def_60716_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318232212520"
class="gallery-image"
data-flex-grow="373"
data-flex-basis="895px"
>&lt;/p>
&lt;p>&lt;em>请注意，插件由空格（空格、制表符、换行符&amp;hellip;）分隔。&lt;strong>请勿&lt;/strong>在它们之间使用逗号，否则会损坏。&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存退出之后，记得使用命令 &lt;code>source ~/.zshrc&lt;/code> 重载配置。该插件生效之后，在使用命令的时候，就会匹配我们使用的命令，右键可以直接补全：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528.png"
width="719"
height="65"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528_hu33a13ebc7a5392d3e95df131e5ca4c30_6189_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528_hu33a13ebc7a5392d3e95df131e5ca4c30_6189_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318232512528"
class="gallery-image"
data-flex-grow="1106"
data-flex-basis="2654px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你不喜欢提示默认的浅灰色，可以在 &lt;code>~/.zshrc&lt;/code> 中修改（没有配置项就添加），更多配置可以参考&lt;a class="link" href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fzsh-users%2Fzsh-autosuggestions%23suggestion-highlight-style" target="_blank" rel="noopener"
>zsh-autosuggestions官方文档&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;fg=#9fc5e8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h6 id="目录跳转">
&lt;a href="#%e7%9b%ae%e5%bd%95%e8%b7%b3%e8%bd%ac" class="header-anchor">#&lt;/a>
&lt;strong>目录跳转&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code> 自带有一个插件 &lt;code>z&lt;/code>，可以让我们在访问过的目录中快速跳转，将该插件配置到 &lt;code>~/.zshrc&lt;/code> 文件中即可使用：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685.png"
width="827"
height="417"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685_hu52be7fb4b48f942c9e20043399c70353_68900_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685_hu52be7fb4b48f942c9e20043399c70353_68900_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318232841685"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存退出之后，重载配置，随意进入一些目录，之后再使用命令 &lt;code>z&lt;/code> 就可以实现快速跳转，支持模糊匹配：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252.png"
width="985"
height="194"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252_hu1605e0b8e4c38e2a71d1cb2b9776b308_70157_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252_hu1605e0b8e4c38e2a71d1cb2b9776b308_70157_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318233202252"
class="gallery-image"
data-flex-grow="507"
data-flex-basis="1218px"
>&lt;/p>
&lt;blockquote>
&lt;p>或许相比于 &lt;code>z&lt;/code>，更多人会选择使用 &lt;code>autojump&lt;/code>，如果是 &lt;code>Mac&lt;/code> 或者 &lt;code>Linux&lt;/code> 没什么问题，&lt;code>Windows&lt;/code> 就不太建议折腾了。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h6 id="其他插件">
&lt;a href="#%e5%85%b6%e4%bb%96%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
&lt;strong>其他插件&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>zsh-syntax-highlighting&lt;/code>：这个插件可以识别的 &lt;code>shell&lt;/code> 命令并高亮显示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-syntax-highlighting
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060.png"
width="1010"
height="455"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060_hu53735137fd792790a8c7ae0e70edb371_83209_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060_hu53735137fd792790a8c7ae0e70edb371_83209_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240319002900060"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/zsh-users/zsh-completions" target="_blank" rel="noopener"
>zsh-completions&lt;/a>：额外的自动补全功能，用于补充 zsh 中尚不支持的命令补全，该项目将在完善时合并到 zsh。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> git clone https://github.com/zsh-users/zsh-completions &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-completions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在&lt;code>.zshrc&lt;/code>文件里面的&lt;code>source &amp;quot;$ZSH/oh-my-zsh.sh&amp;quot;&lt;/code>这一行前添加以下代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">fpath&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-completions/src
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240.png"
width="1342"
height="553"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240_huf5e790ff3f5b1ccb45b3ad89c80b769a_128207_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240_huf5e790ff3f5b1ccb45b3ad89c80b769a_128207_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240319004250240"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>Note: adding it as a regular Oh My ZSH! plugin will not work properly (see &lt;a class="link" href="https://github.com/zsh-users/zsh-completions/issues/603" target="_blank" rel="noopener"
>#603&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Incremental completion on zsh：增强的实时自动命令补全插件：&lt;a class="link" href="https://mimosa-pudica.net/zsh-incremental.html" target="_blank" rel="noopener"
>Incremental completion on zsh&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>*该插件对性能似乎有一点点影响，请根据需要启用。*其实使用默认的自动补齐（tab）够用了。&lt;/p>
&lt;/blockquote>
&lt;p>作用如图：&lt;/p>
&lt;p>​ &lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh.gif"
width="404"
height="204"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh_hu5636cf9d5e0f936b681997f757b3864e_42534_480x0_resize_box_1.gif 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh_hu5636cf9d5e0f936b681997f757b3864e_42534_1024x0_resize_box_1.gif 1024w"
loading="lazy"
alt="incr"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置别名&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code> 的 &lt;code>alias&lt;/code> 配置项可以自定义命令别名，在使用一些比较复杂的命令时，使用别名可以提高效率，这里举例添加一个 &lt;code>Git&lt;/code> 日志的别名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gli&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;git log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意等号两边不要有空格&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="shell使用">
&lt;a href="#shell%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
Shell使用
&lt;/h2>&lt;p>在不同的终端中我们可以指定不同的Shell来使用。如：&lt;/p>
&lt;ol>
&lt;li>在&lt;a class="link" href="#Linux%e4%b8%8a%e5%ae%89%e8%a3%85" >Linux安装zsh&lt;/a>中我们就指定了Linux终端的默认Shell为zsh。&lt;/li>
&lt;li>在稍后介绍的[Windows Terminal](#Windows Terminal)中，也会指定Windows Terminal终端的默认Shell为Git bash。&lt;/li>
&lt;li>下面介绍在IDE终端中设置自己的Shell。&lt;/li>
&lt;/ol>
&lt;h3 id="设置ide终端的shell为git-bash">
&lt;a href="#%e8%ae%be%e7%bd%aeide%e7%bb%88%e7%ab%af%e7%9a%84shell%e4%b8%bagit-bash" class="header-anchor">#&lt;/a>
设置IDE终端的Shell为git bash
&lt;/h3>&lt;p>如果你按照上面的教程成功在windows上安装了zsh，那么设置Shell为git bash，也就是设置为zsh。&lt;/p>
&lt;p>注意：没有安装zsh的情况下也能设置为git bash。&lt;strong>优点：高亮、个人爱好&lt;/strong>。&lt;/p>
&lt;p>这里以goland开发工具为例，jetBrains全系列差不多：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>进入设置找到终端&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766.png"
width="800"
height="471"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766_huf6661fe7348dbc56cdcf4082cea67043_42129_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766_huf6661fe7348dbc56cdcf4082cea67043_42129_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318220456766"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318.png"
width="1472"
height="1069"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318_hu2734f748d7e96269c0f105fe59f8f0bc_156571_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318_hu2734f748d7e96269c0f105fe59f8f0bc_156571_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318220625318"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Shell path为git安装路径里面的&lt;code>bin\bash.exe&lt;/code>,&lt;strong>注意不是git-bash&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>注意：还需要为&lt;code>bash.exe&lt;/code>命令指定启动参数&lt;code>--login -i&lt;/code>：&lt;/p>
&lt;p>图中没有加入，后期发现的问题。&lt;/p>
&lt;p>意思是启动登录Shell，并且交互运行。&lt;/p>
&lt;p>作用：这个环境下git bash不会出现乱码，文件、目录高亮。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>最后应用即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>其他类似的IDE配置差不多：&lt;/p>
&lt;ol>
&lt;li>vscode&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747.png"
width="1907"
height="577"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747_huf882f54ccc6ea14d13611a8e87d42e56_61223_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747_huf882f54ccc6ea14d13611a8e87d42e56_61223_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318221601747"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="793px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366.png"
width="1220"
height="320"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366_hucdeb05991bdd3b9b060ad7f96779cb43_53500_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366_hucdeb05991bdd3b9b060ad7f96779cb43_53500_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318221642366"
class="gallery-image"
data-flex-grow="381"
data-flex-basis="915px"
>&lt;/p>
&lt;p>vscode默认为git bash设置了启动参数，很方便。&lt;/p>
&lt;hr>
&lt;h2 id="terminal使用">
&lt;a href="#terminal%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
Terminal使用
&lt;/h2>&lt;h3 id="windows-terminal">
&lt;a href="#windows-terminal" class="header-anchor">#&lt;/a>
Windows Terminal
&lt;/h3>&lt;p>&lt;strong>Windows Terminal&lt;/strong>可以理解为：是cmd窗口和PowerShell终端的增强版，它将windows环境下的终端（cmd、PowerShell）都集成在了一起。我们只需要指定对应的Shell（cmd、PowerShell、git bash），即可使用。&lt;a class="link" href="https://learn.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;p>&lt;strong>主要特性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>多选项卡支持&lt;/strong>：
&lt;ul>
&lt;li>一个窗口管理多个Shell。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>丰富的自定义选项&lt;/strong>：
&lt;ul>
&lt;li>提供了多种自定义选项，包括更改背景颜色、字体、透明度、主题等，允许用户根据个人喜好定制界面。&lt;/li>
&lt;li>同一套配置应用于不同Shell。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>GPU 加速的文本渲染&lt;/strong>：
&lt;ul>
&lt;li>利用 DirectWrite 和 DirectX 提供 GPU 加速的文本渲染，确保快速、流畅的文本显示和滚动体验。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>支持多种命令行工具和 Shell&lt;/strong>：
&lt;ul>
&lt;li>支持 PowerShell、CMD（Command Prompt）、Windows Subsystem for Linux（WSL）以及任何其他你喜欢的命令行工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Unicode 和 UTF-8 字符支持&lt;/strong>:
&lt;ul>
&lt;li>完整支持 Unicode 和 UTF-8 字符集，包括 emoji 和复杂字符。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>JSON 配置文件&lt;/strong>：
&lt;ul>
&lt;li>使用 JSON 文件进行配置，允许用户灵活地定义设置，如启动命令、默认 Shell、外观等。
&lt;ul>
&lt;li>当然也提供了图形化界面修改配置(没有需要在Microsoft Store中升级到最新版)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>可扩展性和第三方工具支持&lt;/strong>：
&lt;ul>
&lt;li>可以通过扩展和插件进一步增强功能，支持第三方工具集成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="安装">
&lt;a href="#%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
安装
&lt;/h4>&lt;p>Win11系统自带Windows Terminal终端，并且从Windows 11 22H2 版本开始，Windows Terminal 将&lt;a class="link" href="https://devblogs.microsoft.com/commandline/windows-terminal-is-now-the-default-in-windows-11/" target="_blank" rel="noopener"
>正式成为&lt;/a> Windows 11 的&lt;strong>默认终端&lt;/strong>。&lt;/p>
&lt;p>对于Win10系统需要额外安装，最低要求是Windows 10 2004（内部版本 19041）或更高版本。&lt;/p>
&lt;p>安装方法：&lt;/p>
&lt;ul>
&lt;li>推荐从Microsoft Store中下载安装。会自动更新。&lt;/li>
&lt;li>如果无法从 Microsoft Store 安装 Windows Terminal，可以从&lt;a class="link" href="https://github.com/microsoft/terminal" target="_blank" rel="noopener"
>github仓库&lt;/a>的&lt;a class="link" href="https://github.com/microsoft/terminal/releases" target="_blank" rel="noopener"
>发布页面&lt;/a>手动下载已发布的版本。
&lt;ul>
&lt;li>可以下载MSIX Bundle 文件，双击安装。这种方式不能指定安装位置。&lt;/li>
&lt;li>或者根据自己的操作系统选择对应的压缩包，一般x64。
&lt;ul>
&lt;li>解压到哪里就安装到哪里，需要手动配置path环境变量，值为安装目录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>启动：在运行框中输入&lt;code>wt&lt;/code>，能正常启动，证明安装成功。&lt;/p>
&lt;p>在安装成功之后，建议将Windows Terminal设置为默认的终端应用程序。由Windows决定，一般启动的也是wt。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889.png"
width="1670"
height="884"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889_hu5c28ba441e20ef93d783c5969675f06c_104476_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889_hu5c28ba441e20ef93d783c5969675f06c_104476_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Windows Terminal"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://blog.csdn.net/2201_75372778/article/details/131342522" target="_blank" rel="noopener"
>Windows终端（windows terminal）从下载到运行&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="修改默认shell为git-bash">
&lt;a href="#%e4%bf%ae%e6%94%b9%e9%bb%98%e8%ae%a4shell%e4%b8%bagit-bash" class="header-anchor">#&lt;/a>
修改默认Shell为Git Bash
&lt;/h4>&lt;p>可以根据自己的爱好判断是否修改。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每次打开 &lt;code>Windows Terminal&lt;/code> 默认使用的是 &lt;code>Windows PowerShell&lt;/code>，要改为默认使用 &lt;code>Git Bash&lt;/code>，在设置里面进行设置即可。在更多选项中点击设置，或者右键标题栏空白处再点击设置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>滚动到底部，点击添加新配置文件——新建空配置文件，然后填入你的git bash所在位置。示例：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919.png"
width="1670"
height="884"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919_hue33feb461e1b62e1666cdf423128b31a_100869_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919_hue33feb461e1b62e1666cdf423128b31a_100869_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="git bash"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>指定的git bash是&lt;code>bin&lt;/code>目录下的bash.exe。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>并且需要指定启动参数&lt;code>--login -i&lt;/code>&lt;/p>
&lt;p>意思是启动登录Shell，并且交互运行。&lt;/p>
&lt;p>作用：这个环境下git bash不会出现乱码，文件、目录高亮。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>最后，在启动选项卡中设置 &lt;code>Git Bash&lt;/code> 为默认终端并保存配置：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385.png"
width="1134"
height="574"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385_hu06bad4b213c0bb8ac286672d2aa6ada1_171583_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385_hu06bad4b213c0bb8ac286672d2aa6ada1_171583_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318215555385"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="美化">
&lt;a href="#%e7%be%8e%e5%8c%96" class="header-anchor">#&lt;/a>
美化
&lt;/h4>&lt;p>我在windows环境下使用的Shell一般是git bash，可定制化并不高，配置的zsh也没有使用，不过对我来说够用了。&lt;/p>
&lt;p>效果如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406_hu46ee813704bb24e925e0f9e86ec4586f_1485751_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406_hu46ee813704bb24e925e0f9e86ec4586f_1485751_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240527230837406"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>这里就不详细介绍如何实现的了，Windows Terminal都提供了图形化配置。&lt;/p>
&lt;p>我遇到的问题：总结一下：Windows terminal集成git-bash，删除到头的时候窗口总是闪烁：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>解决办法：新建一个~/.inputrc 文件，输入set bell-style none（可以什么都不写也起作用），保存；重启terminal，问题解决。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>.inputrc&lt;/code>是控制命令行界面（终端）行为的配置文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>神奇的是我只要创建了这个空文件，Windows terminal的git bash，删除到头之后就不会闪烁了。&lt;/p>
&lt;ul>
&lt;li>&lt;code>set bell-style none&lt;/code>：关闭终端提示音。&lt;/li>
&lt;li>&lt;code>set bell-style visible&lt;/code>：使用可见提示而不是声音。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>set editing-mode vi&lt;/code>：将编辑模式设置为 Vi 模式。默认为： Emacs 模式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>终端的编辑模式主要有vi和emacs两种模式，区别就是快捷键不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果你会vim，强烈建议修改为vi模式。&lt;/p>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://arlettebrook.github.io/p/vim-common-commands/" target="_blank" rel="noopener"
>vim-common-commands&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>修改之后在insert模式下Emacs模式的部分快捷键&lt;strong>依然可以使用&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Emacs模式常用命令：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：&lt;strong>不同终端部分快捷键可用。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>光标移动&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + A&lt;/code>：移动到行首&lt;/li>
&lt;li>&lt;code>Ctrl + E&lt;/code>：移动到行尾&lt;/li>
&lt;li>&lt;code>Ctrl + B&lt;/code>：向左移动一个字符&lt;/li>
&lt;li>&lt;code>Ctrl + F&lt;/code>：向右移动一个字符&lt;/li>
&lt;li>&lt;code>Alt + B&lt;/code>：向左移动一个词&lt;/li>
&lt;li>&lt;code>Alt + F&lt;/code>：向右移动一个词&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>文本编辑&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + K&lt;/code>：删除从光标位置到行尾的文本&lt;/li>
&lt;li>&lt;code>Ctrl + U&lt;/code>：删除从光标位置到行首的文本&lt;/li>
&lt;li>&lt;code>Ctrl + W&lt;/code>：删除光标位置之前的一个词&lt;/li>
&lt;li>&lt;code>Alt + D&lt;/code>：删除光标位置之后的一个词&lt;/li>
&lt;li>&lt;code>Ctrl + Y&lt;/code>：粘贴（恢复）上次删除的文本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他操作&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + L&lt;/code>：清屏并重新显示当前行&lt;/li>
&lt;li>&lt;code>Ctrl + R&lt;/code>：搜索命令历史&lt;/li>
&lt;li>&lt;code>esc+backspace&lt;/code>：删除一个单词。&lt;/li>
&lt;li>&lt;code>ctrl+P&lt;/code>：上一条历史命令&lt;/li>
&lt;li>&lt;code>ctrl+n&lt;/code>:下一条历史命令&lt;/li>
&lt;li>&lt;code>ctrl+j&lt;/code>：回车&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>这里就不详细介绍控制终端行为的选项了。能配置终端的编辑模式、提示音、补缺行为、快捷键等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>此外如果你喜欢使用PowerShell也可以使用&lt;a class="link" href="https://ohmyposh.dev/" target="_blank" rel="noopener"
>Oh My Posh&lt;/a>美化它，跟前面介绍的Oh My Zsh差不多。&lt;/p>
&lt;p>推荐文章：&lt;a class="link" href="https://blog.sunguoqi.com/posts/oh-my-posh/" target="_blank" rel="noopener"
>Oh My Posh | Windows Terminal 美化指南&lt;/a>&lt;/p>
&lt;h3 id="windterm">
&lt;a href="#windterm" class="header-anchor">#&lt;/a>
WindTerm
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/kingToolbox/WindTerm" target="_blank" rel="noopener"
>WindTerm&lt;/a>是一款跨平台的终端应用，同时也是 SSH/Telnet/Serial/Shell/Sftp 客户端。通常用于&lt;strong>远程连接&lt;/strong>。类似于FinalShell，它有的功能，WindTerm同样支持，并且拥有更多的配色方案，直接上图：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark.png"
width="2560"
height="1520"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark_huab2f69f062de70eaa15c1469f0e2930e_435465_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark_huab2f69f062de70eaa15c1469f0e2930e_435465_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="WindTerm-dark"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme.png"
width="2560"
height="1520"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme_hu7fdcaec243e45adecf0edd95a0d6522f_339075_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme_hu7fdcaec243e45adecf0edd95a0d6522f_339075_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="WindTerm_DigeWhite_Theme"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;h4 id="安装-1">
&lt;a href="#%e5%ae%89%e8%a3%85-1" class="header-anchor">#&lt;/a>
安装
&lt;/h4>&lt;p>WindTerm是一款部分开源的软件，现目前(2024/5/28)仍存在部分小问题，不过不影响正常使用。&lt;/p>
&lt;p>安装可以从&lt;a class="link" href="https://github.com/kingToolbox/WindTerm" target="_blank" rel="noopener"
>github仓库&lt;/a>的&lt;a class="link" href="https://github.com/kingToolbox/WindTerm/releases" target="_blank" rel="noopener"
>发布页面&lt;/a>根据自己的操作系统手动下载已发布的版本。&lt;/p>
&lt;h4 id="使用">
&lt;a href="#%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
使用
&lt;/h4>&lt;p>使用WindTerm也很简单，语言支持中文。花点时间就能学会。&lt;/p>
&lt;p>WindTerm在windows环境下建议将默认的shell修改为git bash。个人爱好。&lt;/p>
&lt;p>Windows Terminal和WindTerm两款终端应用都建议安装，各有各的优点和用图。不过我一般使用WindTerm多一点，因为Windows Terminal有的功能WindTerm都有，并且后者有更好的配色方案，支持文件传输，内置远程连接。&lt;/p>
&lt;p>安装Windows Terminal主要是因为Windows Terminal集成了Win10的cmd、PowerShell终端。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ul>
&lt;li>原文地址: &lt;a class="link" href="https://juejin.cn/post/7229507721795993661" target="_blank" rel="noopener"
>https://juejin.cn/post/7229507721795993661&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Vim Common Commands</title><link>https://arlettebrook.github.io/p/vim-common-commands/</link><pubDate>Mon, 27 May 2024 00:43:37 +0800</pubDate><guid>https://arlettebrook.github.io/p/vim-common-commands/</guid><description>&lt;hr>
&lt;h2 id="简介">
&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">#&lt;/a>
简介
&lt;/h2>&lt;p>Vim是一个高度可配置的文本编辑器，主要用于编写和编辑文本和源代码。它最初由Bram Moolenaar在1991年发布，至今已经成为了许多程序员和系统管理员的首选工具。&lt;/p>
&lt;p>Vim的特点包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>高度可配置：Vim具有大量的命令和选项，可以根据用户的需求进行定制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令模式（COMMAND)：Vim在默认情况下处于命令模式，用户需要通过键盘输入命令来进行文本编辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入模式(INSERT)：在插入模式下，用户可以输入文本内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通模式(NORMAL)：普通模式是Vim的默认模式，可以进行光标移动、删除字符等操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>（&lt;strong>补充&lt;/strong>）可视模式（VISUAL)：允许用户以可视方式选择和操作文本。Visual 模式有三种类型：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>字符模式（Visual mode）&lt;/strong>：用于选择字符。&lt;code>v&lt;/code>命令进入。&lt;/li>
&lt;li>&lt;strong>行模式（Visual Line mode）&lt;/strong>：用于选择整行。&lt;code>V&lt;/code>命令进入。&lt;/li>
&lt;li>&lt;strong>块模式（Visual Block mode）&lt;/strong>：用于选择文本块（矩形区域）。&lt;code>ctrl+v&lt;/code>命令进入。&lt;/li>
&lt;li>可以与&lt;code>p, y, d, c, r, &amp;lt;, &amp;gt;, ~, gU, gu&lt;/code>等命令组合使用。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>大量快捷键：Vim具有大量的快捷键，可以提高编辑效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宏记录：Vim支持宏记录，可以录制一系列键盘操作并重复执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插件支持：Vim支持大量的插件，可以扩展其功能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在Linux和Unix系统中，Vim通常已经预装。Windows系统则需要手动安装。对于初次使用Vim的用户，建议先学习一些基础操作命令，并通过互联网上的资源来深入了解它的使用方法和高级功能。&lt;/p>
&lt;blockquote>
&lt;p>提示：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>阅读本文需要&lt;strong>有一定的vim了解&lt;/strong>，还要拥有vim环境，并且你应该一边阅读，&lt;strong>一边实操&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你觉得本教程啰嗦，你可以运行&lt;code>vimtutor&lt;/code>学习官方提供的tutor教程。有的vim版本是中文教程。如果你的不是可以网上搜索。&lt;a class="link" href="https://arlettebrook.github.io/docs/vimtutor.txt" >备用(1.7中文版）&lt;/a>（下载之后用vim打开阅读）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当然强烈建议你学习完本教程之后去过一边&lt;code>vimtutor&lt;/code>，它可以让你边学边练。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="史上最好用的文本编辑器vim">
&lt;a href="#%e5%8f%b2%e4%b8%8a%e6%9c%80%e5%a5%bd%e7%94%a8%e7%9a%84%e6%96%87%e6%9c%ac%e7%bc%96%e8%be%91%e5%99%a8vim" class="header-anchor">#&lt;/a>
史上最好用的文本编辑器VIM
&lt;/h3>&lt;p>对于vi/vim只是点评一点：这是一个你不需要使用鼠标，不需使用小键盘，只需要使用大键盘就可以完成很多复杂功能文本编辑的编辑器。不然主流IDE也不会有vim插件，如：jetbrains全系列都支持的&lt;a class="link" href="https://github.com/JetBrains/ideavim" target="_blank" rel="noopener"
>ideavim插件&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>学习 &lt;a class="link" href="http://www.vim.org/" target="_blank" rel="noopener"
>vim&lt;/a> 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim的学习曲线相当的大（参看&lt;a class="link" href="http://coolshell.cn/articles/3125.html" target="_blank" rel="noopener"
>各种文本编辑器的学习曲线&lt;/a>），所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下面的文章翻译自《&lt;a class="link" href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="noopener"
>Learn Vim Progressively&lt;/a>》，我觉得这是给新手最好的VIM的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。非常不错。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>警告：&lt;/p>
&lt;ul>
&lt;li>学习vim在开始时是痛苦的。&lt;/li>
&lt;li>需要时间&lt;/li>
&lt;li>需要不断地练习，就像你学习一个乐器一样。&lt;/li>
&lt;li>不要期望你能在3天内把vim练得比别的编辑器更有效率。&lt;/li>
&lt;li>事实上，你需要2周时间的苦练，而不是3天。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>将常用命令总结为四个步骤：&lt;/p>
&lt;ol>
&lt;li>存活&lt;/li>
&lt;li>感觉良好&lt;/li>
&lt;li>觉得更好，更强，更快&lt;/li>
&lt;li>使用VIM的超能力&lt;/li>
&lt;/ol>
&lt;p>当你走完这篇文章，你会成为一个vim的 superstar。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div align="center" style='color:red'>
——————————正文开始——————————
&lt;/div>
&lt;h2 id="vim常用命令总结">
&lt;a href="#vim%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4%e6%80%bb%e7%bb%93" class="header-anchor">#&lt;/a>
vim常用命令总结
&lt;/h2>&lt;h3 id="第一级--存活">
&lt;a href="#%e7%ac%ac%e4%b8%80%e7%ba%a7--%e5%ad%98%e6%b4%bb" class="header-anchor">#&lt;/a>
第一级 – 存活
&lt;/h3>&lt;p>在Normal模式下【用vim正常打开的文件都会进入该普通模式】的常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">i &lt;span class="c1">#进入Insert 模式，按 ESC 回到 Normal 模式，光标处插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># I: 行首插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a &lt;span class="c1">#进入Insert 模式，按 ESC 回到 Normal 模式，光标后插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># A：行尾插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x &lt;span class="c1">#删除光标后的一个字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># X：删除光标前的一个字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dd &lt;span class="c1">#删除光标所在行，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># D：删除光标后面的所有字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p &lt;span class="c1">#粘贴剪切板，在光标后粘贴，P：光标处粘贴。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:q！ &lt;span class="c1"># 强制退出vim。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">esc &lt;span class="c1"># 退出命令、回到normal模式。输入的命令没效果，就点它，直到起作用为止。与ctrl+c等效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#推荐&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hjkl &lt;span class="c1">#强例推荐使用其移动光标，但不必需，你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>块光标，所在的位置由头部决定。头部就是光标所在位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>光标后是指隔一个字符，就是块光标的尾部。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除命令都会将删除的存到剪切板里，但&lt;strong>只有vim命令删除的，粘贴p命令才能粘贴（与vim版本有关）。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如果要粘贴系统的剪切板内容用&lt;code>shift+insert&lt;/code>：将在光标处粘贴系统剪切板内容。
&lt;ul>
&lt;li>其他可能终端需要进入INSERT模式。&lt;/li>
&lt;li>注意不同的终端启动不同的vim版本，p粘贴命令效果可能不一样。删除命令有的会进剪切板，有的不会，但是p能粘贴。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我的环境：ideavim插件。&lt;/li>
&lt;li>补充：（后面学习之后知道：粘贴效果是与默认&lt;a class="link" href="#%e5%af%84%e5%ad%98%e5%99%a8" >寄存器&lt;/a>有关系）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>粘贴命令在粘贴一行内容时（ideavim）：&lt;/p>
&lt;ul>
&lt;li>如果光标所在位置是空行，将粘贴到该行。p与P效果一样&lt;/li>
&lt;li>如果光标所以位置不为空行，p将粘贴到下一行，P将粘贴到上一行。&lt;/li>
&lt;li>也就是以行为单位：p：在光标后粘贴，P：光标处粘贴。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Windows版本vim粘贴命令行，无论是不是空行，p会粘贴到下一行，P会粘贴到上一行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>你能在vim幸存下来只需要上述的那几个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。&lt;/p>
&lt;p>在命令模式【输入&lt;code>:&lt;/code>进入该模式，输入的命令都需要敲回车】下的常用命令（扩展）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用vim提供的在线帮助系统&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:help &amp;lt;command&amp;gt; &lt;span class="c1"># 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。或者键盘上的HELP。或者F1。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果打开的是vim内置的帮助文档，可以用ctrl+w w在文档和vim编辑窗口之间跳转。不起作用多点几下。其实是分屏切换快捷键。后续介绍。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选中帮助文档:q退出。选择编辑窗口:q!将会关闭所有窗口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:q &lt;span class="c1"># 只退出命令，可以退出未修改的文件、退出帮助等退出作用。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第二级--感觉良好">
&lt;a href="#%e7%ac%ac%e4%ba%8c%e7%ba%a7--%e6%84%9f%e8%a7%89%e8%89%af%e5%a5%bd" class="header-anchor">#&lt;/a>
第二级 – 感觉良好
&lt;/h3>&lt;p>vim常用命令（难度一下就上来了）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1.各种插入模式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> o &lt;span class="c1">#在光标所在行后插入一个空行，从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> O &lt;span class="c1">#在光标所在行前插入一个空行，从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cw &lt;span class="c1">#向后剪切光标所在字符的同类型字符。可以是一个字符串，或者一串标点符号，并从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s &lt;span class="c1"># 该命令与x命令功能一样，区别：会进入insert模式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2.简单的移动光标&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="c1">#数字0到所在行头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ &lt;span class="c1">#到所在行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ^ &lt;span class="c1">#到所在行首不是空白的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> g_ &lt;span class="c1">#到所在行尾不是空白的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 匹配搜索跳转 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /pattern &lt;span class="c1">#回车搜索 pattern 的字符串,如果搜索出多个匹配，可按n键到下一个，N上一个。匹配之后一直存在。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ?pattern &lt;span class="c1"># 逆向搜索跳转到指定字符，ctrl+o相对于大写的N&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hls &lt;span class="c1"># 开启高亮显示：have light search。默认关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hlsearch &lt;span class="c1"># 开启高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nohls &lt;span class="c1"># 关闭高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :nohlsearch &lt;span class="c1"># 临时关闭高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :nohls &lt;span class="c1">#临时关闭高亮显示，在次搜索或者n会出现高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set incsearch &lt;span class="c1"># 动态显示搜索结果，通常配合高亮使用。默认关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set is &lt;span class="c1"># 动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set noincsearch &lt;span class="c1"># 关闭动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nois &lt;span class="c1"># 关闭动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hls is
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nohls nois
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 可以将set命令保存到vim的配置文件中让其永久生效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 匹配的时候：默认没有有忽略大小写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set ic &lt;span class="c1"># ignore case&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set noic &lt;span class="c1"># no ignore case 不忽略大小写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /搜索的字符&lt;span class="se">\c&lt;/span> &lt;span class="c1"># 临时忽略大小写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#3.拷贝/粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> p &lt;span class="c1">#光标后粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> P &lt;span class="c1">#光标出粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> yy &lt;span class="c1">#复制光标所在行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Y &lt;span class="c1"># 与yy等效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#4.撤销/恢复&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> u &lt;span class="c1">#撤销 相对于ctrl+z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrl+r &lt;span class="c1"># 恢复撤销，相对于ctrl+shift+z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#5.打开/保存/退出/另存为/清空&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e &amp;lt;path/to/file&amp;gt; &lt;span class="c1">#打开指定文件，不存在会创建，e是edit的缩写。ideavim版本不存在打不开。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e! &lt;span class="c1"># 放弃所有的更改，重新加载当前文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :bn &lt;span class="c1">#你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :bp &lt;span class="c1">#上一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#冒号后可以加数字，:2bn表示下2个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :w &lt;span class="c1">#保存，w死write的缩写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#指定文件名就是另存为，后面加!: 强制保存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :sav &amp;lt;path/to/file&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#二者区别：后者将修改保存到指定文件，并打开指定文件，可以继续编辑&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 旧文件的修改会被抛弃掉，sav是saveas的缩写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wq &lt;span class="c1">#保存退出，随便那个都行。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wq! &lt;span class="c1"># 强制保存并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wa &lt;span class="c1"># 保存所有打开的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wqa &lt;span class="c1"># 保存所有打开的文件并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 后面加！都是强制&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :x &lt;span class="c1">#保存退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ZZ &lt;span class="c1">#保存退出，效果一样&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zz &lt;span class="c1"># 如果可能，将该行水平居中。等于与M。m是标记。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :q &lt;span class="c1">#退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :q! &lt;span class="c1">#强制退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :qa! &lt;span class="c1">#强行退出所有的正在编辑的文件，就算别的文件有更改。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :%d &lt;span class="c1">#删除文件所有内容&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很好，花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>c&lt;/code>命令是一个组合命令，与d命令类似，都是删除命令，区别是c命令使用之后会&lt;strong>进入insert模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>C&lt;/code>与&lt;code>D&lt;/code>命令一样，从光标位置删除到行尾部，区别D不会进入insert模式。&lt;/li>
&lt;li>&lt;code>cc&lt;/code>清空光标所在行并进入insert，与&lt;code>dd&lt;/code>区别：不会删除该行，只是清空到剪切板。&lt;/li>
&lt;li>&lt;code>w&lt;/code>光标移动到不同类字符的头部（对空格字符会忽略，&lt;strong>就是移动到下一个单词的开头&lt;/strong>），
&lt;ul>
&lt;li>有大写命令，移动字符范围更广。就是对同类型字符判断更广。&lt;/li>
&lt;li>&lt;code>cw&lt;/code>从光标处&lt;strong>删除到不同类字符的头部&lt;/strong>（不会忽略空格字符）。&lt;code>dw&lt;/code>会忽略空格。
&lt;ul>
&lt;li>推荐使用&lt;code>de&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ciw&lt;/code>删除光标所在的同类字符，并进入insert模式。&lt;code>diw&lt;/code>不会进入insert模式。
&lt;ul>
&lt;li>&lt;code>caw&lt;/code>删除光标所在的同类字符，并删除后面的所以空格。&lt;/li>
&lt;li>&lt;strong>这种类型&lt;/strong>，都是删除一个单词，但是不能与e组合。如cae。三个的不能与e组合，用w。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>e&lt;/code>移动到不同类字符的尾部（忽略空格字符），如果自身不在同类字符的尾部会先移动到尾部，在往下跳转。
&lt;ul>
&lt;li>注意：尾部是指光标在同类字符的最后一个单词前面。&lt;/li>
&lt;li>&lt;code>ce&lt;/code>删除单词并进入insert模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>c0&lt;/code>从光标位置删除到行头部。&lt;/li>
&lt;li>&lt;code>c$&lt;/code>从光标位置删除到行尾部。
&lt;ul>
&lt;li>当然也可以组合&lt;code>c^&lt;/code>, &lt;code>cg_&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ct字符&lt;/code>删除光标到第一个指定字符之间的字符（删除到指定的字符），并进入insert模式。&lt;/li>
&lt;li>&lt;code>%&lt;/code>会在最近括号之间来回跳转。
&lt;ul>
&lt;li>&lt;code>d%&lt;/code>光标在括号上，会删除括号及括号内的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>意味着d命令也可以和上面组合，区别就是不会进入insert模式。
&lt;ul>
&lt;li>前面加数字表示重复几次。
&lt;ul>
&lt;li>&lt;code>2w&lt;/code>光标移动两次不同类字符。注意w命令没有其他命令组合时会忽略空格。加数字也会忽略。&lt;/li>
&lt;li>&lt;code>2dd&lt;/code>类型删除两行。&lt;code>2cc&lt;/code>删除之后进入insert模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>y&lt;/code>命令也是一个组合命令，用于与复制相关的命令。需要配合其他命令使用，如：：&lt;/p>
&lt;ul>
&lt;li>&lt;code>yy&lt;/code>复制光标所在行。
&lt;ul>
&lt;li>&lt;code>3yy&lt;/code>表示连续复制三行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>yw&lt;/code>复制到不同类字符的前面，不会忽略空格。空格属于字符（就是复制一个单词）。
&lt;ul>
&lt;li>&lt;code>yiw&lt;/code>复制所在的字符，就是复制完整单词。&lt;/li>
&lt;li>&lt;code>yaw&lt;/code>复制完整单词包括单词后面的空格，不包括前面的，不能与e组合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>y0&lt;/code>: 从光标位置复制到行头，&lt;code>y^&lt;/code>不包括空格。&lt;/li>
&lt;li>&lt;code>y$&lt;/code>: 从光标位置复制到行尾，&lt;code>yg_&lt;/code>不包括空格。&lt;/li>
&lt;li>&lt;code>v&lt;/code>进入可视模式之后移动光标，选择文本之后，&lt;code>y&lt;/code>命令可以复制选中的文本，自动返回normal。&lt;code>c&lt;/code>会进入insert模式。
&lt;ul>
&lt;li>意味着前面的组合命令都可以与visual模式配合使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>yt字符&lt;/code>从光标位置复制到指定字符之间的字符。&lt;/li>
&lt;li>&lt;code>y%&lt;/code>如果光标在括号上，将复制括号及括号内的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>u&lt;/code>命令相对于&lt;code>ctrl+z&lt;/code>撤销命令：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>u&lt;/code>命令会将光标移动到最近修改的地方，如果光标所在位置正是最近修改的地方，将执行撤销操作。(与vim版本有关，有的直接撤销)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>U&lt;/code>撤销对当前行的所有更改,以行为单位，&lt;strong>撤销到insert之前的状态&lt;/strong>。部分vim版本不能使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+u&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>normal模式下：光标向上移动半页。&lt;/li>
&lt;li>insert模式下：与Emacs模式一样。&lt;/li>
&lt;li>command模式下：与Emacs模式一样，但是不会删除&lt;code>:&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="第三级--更好更强更快">
&lt;a href="#%e7%ac%ac%e4%b8%89%e7%ba%a7--%e6%9b%b4%e5%a5%bd%e6%9b%b4%e5%bc%ba%e6%9b%b4%e5%bf%ab" class="header-anchor">#&lt;/a>
第三级 – 更好，更强，更快
&lt;/h3>&lt;p>先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。&lt;/p>
&lt;p>这里你将会学到以下常用vim常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1.重复命令【更好】&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> . &lt;span class="c1">#重复上一次命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> N&amp;lt;command&amp;gt; &lt;span class="c1">#数字N重复后面的命令N词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#演示：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2dd &lt;span class="c1">#删除两行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3p &lt;span class="c1">#粘贴剪切板3次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 10iide &lt;span class="o">[&lt;/span>Esc&lt;span class="o">]&lt;/span> &lt;span class="c1">#光标所在字符前插入10个ide字符串，可以换成a就是后面，效果更好&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> . &lt;span class="c1">#重复上一次插入10ide命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3. &lt;span class="c1">#插入3个ide，这里不是30个ide，要注意。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2.光标移动【更强】：你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :N &lt;span class="c1">#光标到数字N行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NG &lt;span class="c1">#同理光标到数字N行，等同于Ngg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrl+g &lt;span class="c1"># 显示文件的信息，包括行号，百分比，部分vim版本起作用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gg &lt;span class="c1">#光标到第一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> G &lt;span class="c1">#光标到最后一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> w &lt;span class="c1">#光标移动到下一个不同类型的字符的开头，就是移动到不同类型的字符前，忽略空格字符。就是跳转到下一个单词前。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> e &lt;span class="c1">#光标移动到 当前 或者 下一个 不同类型的最后一个字符上。效果：移动到当前同类型字符的末尾 或者 移动到下一个不同类型字符的末尾。【跳过单词】忽略空格字符。就是跳转到本单词或下一个单词末尾。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 他们的大写命令，移动范围更广，就是对同类型字符判断更广。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#最强的光标移动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> % &lt;span class="c1">#匹配括号移动，自己体会，超级好用。支持(, {, [。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * &lt;span class="c1"># 匹配光标当前所在的单词，移动到下一个单词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="se">\#&lt;/span> &lt;span class="c1"># 匹配光标当前所在的单词，移动到上一个单词，实际\没有，这里是转义作用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#二者匹配之后都可以重复使用，起到切换的作用，n下一个同理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#更快&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;start position&amp;gt;&amp;lt;command&amp;gt;&amp;lt;end position&amp;gt; &lt;span class="c1">#光标的移动与命令的联动，组合命令通常与光标移动命令组合使用，官方解释是操作加动作。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#演示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0y$ &lt;span class="c1">#拷贝当前行，一般用yy，0行首，y拷贝，$行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ye &lt;span class="c1">#拷贝当前同类型字符的末尾，y拷贝，e跳到同类型字符末尾，与yw效果一样&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 注意这两个要考虑光标的位置，光标必须在单词的头部。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 用yiw,无论光标在哪里，只要在单词上，就能复制整个单词。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># yaw复制完整单词包括单词后面的空格，不包括前面的，不能与e组合。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dw &lt;span class="c1">#删除当前同类型字符&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d$ &lt;span class="c1">#从当前删除到行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d0 &lt;span class="c1">#从当前删除到行首&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dgg &lt;span class="c1">#从当前删除到文件开头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dG &lt;span class="c1">#从当前删除到文件末尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :%d &lt;span class="c1"># 清空整个文件内容。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e! &lt;span class="c1"># 忽略所有修改，重新加载当前文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#更多可组合命令d (删除 )、v (可视化的选择)、gU (变大写)、gu (变小写)、y（复制）、c（删除进入insert）等等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 示例：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y2/apple &lt;span class="c1"># 复制两个apple之间的内容，不包括最后一个apple。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gUiw &lt;span class="c1"># 将光标所在单词转大写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> diw &lt;span class="c1"># 删除当前光标所在单词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#d上面演示了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#注意变大小写要有对象才能变，不然出错。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>补充&lt;/strong>（这部分可以最后在看，或看vimtutor在来）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>r字符&lt;/code>：替换光标后的字符为指定字符。&lt;/p>
&lt;ol>
&lt;li>&lt;code>R&lt;/code>连续替换光标后的字符。esc退出。&lt;/li>
&lt;li>&lt;code>:r 输入流&lt;/code>可以提取文件（指定路径），或者输入流的内容到光标位置后面，如：&lt;code>:r !ls&lt;/code>：将在光标后插入&lt;code>ls&lt;/code>命令的输出。
&lt;ol>
&lt;li>用于提取文件内容到光标后&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>输入 &lt;strong>:s/old/new/g&lt;/strong> 可以替换光标所在行的old字符串为new字符串。g表示替换区全部，没有只替换第一个&lt;/p>
&lt;p>要替换两行之间出现的每个匹配串，请
输入 :#,#s/old/new/g 其中 #,# 代表的是替换操作的若干行中首尾两行的行号。
输入 :%s/old/new/g 则是替换整个文件中的每个匹配串。
输入 :%s/old/new/gc 会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:!外部命令&lt;/code>执行外部命令，如&lt;code>:!ls&lt;/code>，支持所有的外部命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim支持保存一个文件的部分内容：&lt;/p>
&lt;ol>
&lt;li>进入可视模式之后，选中要保存的部分，然后按 : 字符。将看到屏幕底部会出现 :&amp;rsquo;&amp;lt;,&amp;rsquo;&amp;gt; 。在后面输入另存为文件命令即可&lt;code>w 文件名&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在命令模式下，可以使用&lt;code>tab&lt;/code>键补全命令，&lt;code>ctrl+d&lt;/code>显示能补全的命令。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ctrl+u&lt;/code>清空光标前的字符，除了&lt;code>:&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>f字符&lt;/code>光标向前移动到指定字符前。&lt;code>F字符&lt;/code>反向。&lt;/p>
&lt;ol>
&lt;li>&lt;code>t字符&lt;/code>光标向前移动到指定字符的前一个字符前。&lt;code>T字符&lt;/code>反向。&lt;/li>
&lt;li>在使用这个两个命令之后&lt;code>;&lt;/code>光标跳转到下一个相同字符，&lt;code>,&lt;/code>上一个。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gf&lt;/code>将光标所在行文本内容作为文件打开，会自动光标当前文件（前提已经保存）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>H&lt;/code>光标移动到光标去过的屏幕最高行，&lt;code>L&lt;/code>屏幕的最低行。（与版本有关）&lt;/p>
&lt;ol>
&lt;li>&lt;code>J&lt;/code>删除末尾的换行符，&lt;code>ctrl-j&lt;/code>换行、回车的意思，（重要）寄存器中用&lt;code>^J&lt;/code>表示。&lt;/li>
&lt;li>&lt;code>K&lt;/code>查看光标所在单词的&lt;code>man&lt;/code>页面。（ideavim不支持）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>b&lt;/code>与&lt;code>w&lt;/code>命令反向。&lt;code>B&lt;/code>范围更广。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ge&lt;/code>与&lt;code>e&lt;/code>命令反向。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+u&lt;/code>normal模式下光标&lt;strong>向上移动半页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+b&lt;/code>光标&lt;strong>向上移动差不多一页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+f&lt;/code>&lt;strong>向下移动一页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+d&lt;/code>&lt;strong>向下移动半页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M&lt;/code>光标移动到屏幕中间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>{&lt;/code>向上移动一个段落。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>}&lt;/code>向下移动一个段落。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;gt;&amp;gt;&lt;/code>向后缩进光标所在行。&lt;/p>
&lt;ol>
&lt;li>&lt;code>&amp;lt;&amp;lt;&lt;/code>反向缩进&lt;/li>
&lt;li>&lt;code>.&lt;/code>命令重复上一次命令。（部分命令不可重复：如&lt;code>2j&lt;/code>)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gU移动光标命令&lt;/code>选中的字符转大写。&lt;/p>
&lt;ol>
&lt;li>&lt;code>gu移动光标命令&lt;/code>选中的字符转小写&lt;/li>
&lt;li>&lt;code>~&lt;/code>将光标后的字符大小写互转，可以选中多个互转。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在insert模式下&lt;code>ctrl-o&lt;/code>会临时进入Normal模式，执行别的命令之后会，自动返回insert模式。&lt;/p>
&lt;ol>
&lt;li>可用于删除光标后的单词继续编辑：如：&lt;code>ctrl-o de&lt;/code>&lt;/li>
&lt;li>vi模式中不可以使用。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在insert模式下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>ctrl-w&lt;/code>向光标前删除到同类字符。忽略空格，就是删除一个单词。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ctrl-u&lt;/code>全部删除。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl-h&lt;/code>等同于退格键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim在insert模式下没有提供向后删除字符的命令&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="第四级--vim-超能力">
&lt;a href="#%e7%ac%ac%e5%9b%9b%e7%ba%a7--vim-%e8%b6%85%e8%83%bd%e5%8a%9b" class="header-anchor">#&lt;/a>
第四级 – Vim 超能力
&lt;/h3>&lt;p>你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。&lt;/p>
&lt;p>其实是对上面的命令再次复习😂（不在解释其作用，如果你还看不懂，证明练得还不够。）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">g_
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">f&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="c1"># F&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">, or &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">t， &lt;span class="c1"># T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">, or &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3f,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dt,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ct,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ye
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yt&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dt&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ce
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ct&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">P
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">diw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">daw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ciw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yiw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yaw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果你搞不明白上面的复杂组合命令，可以看v模式选择的是那个部分。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">viw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vaw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>补充&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>&amp;lt;motion&amp;gt;i&amp;lt;option&amp;gt;&lt;/code>、&lt;code>&amp;lt;motion&amp;gt;a&amp;lt;object&amp;gt;&lt;/code>根据动作（motion）、范围（i、a）操作对象（object）。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>motion动作：常用：d, c, v, y,&lt;/p>
&lt;ul>
&lt;li>
&lt;p>i与a的区别：&lt;/p>
&lt;ul>
&lt;li>对于空格i会忽略，a会保留&lt;strong>后面&lt;/strong>的使用空格。&lt;/li>
&lt;li>其他字符：i不包括，a包括。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>object：操作对象，常用：&lt;/p>
&lt;ul>
&lt;li>w：一个单词。&lt;/li>
&lt;li>s：一个句子（不包括缩进、前后空白）。&lt;/li>
&lt;li>p：一个段落（包括缩进，前后空白）。&lt;/li>
&lt;li>其他字符：&lt;code>&amp;quot;, ', (, ), {, }, [, ].&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注意：是向后搜索包裹光标的对象。没有，只有&lt;code>&amp;quot;&lt;/code>对象会向内查找。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>示例：假设你有一个字符串 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>而光标键在第一个 &lt;code>o &lt;/code>的位置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>vi&amp;quot;&lt;/code> → 会选择 &lt;code>foo&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>va&amp;quot;&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vi)&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>va(&lt;/code> → 会选择&lt;code>(&amp;quot;foo&amp;quot;)&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>v2i)&lt;/code> → 会选择 &lt;code>map (+) (&amp;quot;foo&amp;quot;)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>v2a)&lt;/code> → 会选择 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>光标在&lt;code>a&lt;/code>位置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>vi&amp;quot;&lt;/code> → 会选择 &lt;code>foo&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>va&amp;quot;&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vi)&lt;/code> → 会选择 &lt;code>map (+) (&amp;quot;foo&amp;quot;)&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>va(&lt;/code> → 会选择 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/li>
&lt;li>&lt;code>v2i)&lt;/code>、&lt;code>v2a)&lt;/code>两个无法选中，不会向内查找。只有&lt;code>&amp;quot;&lt;/code>会。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>可视（VISUAL)模式操作：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ctrl+v&lt;/code>进入可视模式的块模式（Windows占用，用&lt;code>ctrl+q&lt;/code>代替）。&lt;code>v&lt;/code>字符模式，&lt;code>V&lt;/code>行模式。&lt;/li>
&lt;li>以上模式可以配合其他移动动作使用，如&lt;code>0&lt;/code>, &lt;code>ctrl+f&lt;/code> , &lt;code>$&lt;/code>方便选择。如：
&lt;ul>
&lt;li>选择多行，&lt;code>J&lt;/code>命令批量&lt;strong>移除选择行的换行符&lt;/strong>。&lt;/li>
&lt;li>向后缩进&lt;code>&amp;gt;&lt;/code>选中的文本，&lt;code>&amp;lt;&lt;/code>向前。
&lt;ul>
&lt;li>选中之后&lt;code>=&lt;/code>自动给缩进。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>块模式还可以批量修改多行。典型的操作，如：
&lt;ul>
&lt;li>&lt;strong>添加注释&lt;/strong>： &lt;code>0 ctrl+v ctrl+d 选中要注释的 I # ESC&lt;/code>
&lt;ul>
&lt;li>注释只能用行首插入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>末尾添加分号：&lt;code>$ ctrl+v ctrl+d 选择要修改的 A ; esc &lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意：只有块模式可以批量修改。并且只有在块头或者块尾可以修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自动补全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在insert模式下，输入一个词的开头，然后按&lt;code>ctrl+n&lt;/code>or&lt;code>ctrl+p&lt;/code>自动补全就出现了。&lt;/li>
&lt;li>如果有多个，n是下一个，p是上一个。&lt;/li>
&lt;li>在ideavim中是代码提示。&lt;/li>
&lt;li>选中之后，继续输入，不用回车确定。ideavim代码中需要回车确定。&lt;/li>
&lt;li>具体看情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="标记">
&lt;a href="#%e6%a0%87%e8%ae%b0" class="header-anchor">#&lt;/a>
标记
&lt;/h4>&lt;p>在 Vim 中，&lt;code>m&lt;/code> 命令用于设置标记（mark）。标记是 Vim 提供的一种功能，用于在文件中记住特定的位置，以便以后快速跳转到这些位置。标记可以是局部标记（仅在当前文件中有效）或全局标记（在所有文件中有效）。以下是 &lt;code>m&lt;/code> 命令的详细使用方法：&lt;/p>
&lt;p>&lt;strong>设置标记&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>设置局部标记&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，按 &lt;code>m&lt;/code> 然后按一个小写字母（例如 &lt;code>a&lt;/code>）。&lt;/li>
&lt;li>例子：按 &lt;code>ma&lt;/code> 在当前光标位置设置标记 &lt;code>a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>设置全局标记&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，按 &lt;code>m&lt;/code> 然后按一个大写字母（例如 &lt;code>A&lt;/code>）。&lt;/li>
&lt;li>例子：按 &lt;code>mA&lt;/code> 在当前光标位置设置全局标记 &lt;code>A&lt;/code>。&lt;/li>
&lt;li>在ideavim中会有高亮。&lt;/li>
&lt;li>0-9字符也表示全局标记。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>m&lt;/code>命令是&lt;code>:mark 标记字符&lt;/code>的快捷键。
&lt;ol>
&lt;li>区别是&lt;code>m&lt;/code>会记录光标的列位置，&lt;code>:mark&lt;/code>不会，它的列号始终为0。&lt;/li>
&lt;li>所以&lt;code>:mark&lt;/code>跳转只会到标记行的头部。不会跳转到标记行光标的位置。&lt;/li>
&lt;li>一般使用&lt;code>m&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>注意：
&lt;ol>
&lt;li>标记字符只有一个。
&lt;ol>
&lt;li>标记字符常用的字母、数字。其他的部分能用。不用考虑。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>标记信息包括标记字符、光标的行号、列号以及行的文本内容。&lt;/li>
&lt;li>后续设置存在的标记会覆盖。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>跳转到标记&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>' 标记字符&lt;/code>：自动跳转到标记行的行头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>`` 标记字符`：自动跳转到标记行的光标位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>'a&lt;/code>：跳转到局部标记a的行头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>``A`跳转到全局标记A所在行光标的位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跳转标记的开头如何有空格，都会忽略。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>查看标记&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>:marks&lt;/code>：显示所有已设置的标记及其光标位置、行文本内容。&lt;/li>
&lt;li>使用&lt;code>:mark&lt;/code>标记的行，光标的列号为0。所以`` `也只能跳到标记行头。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>删除标记&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>删除指定标记：&lt;code>:delmarks ...标记字符&lt;/code>&lt;/p>
&lt;ol>
&lt;li>后面可以跟多个标记字符，用不用空格隔开都行。如： &lt;code>:delmarks ab&lt;/code> 删除标记 &lt;code>a&lt;/code> 和 &lt;code>b&lt;/code>。&lt;/li>
&lt;li>还可以删除范围内标记：如： &lt;code>:delmarks a-d&lt;/code> 删除标记 &lt;code>a&lt;/code> 到 &lt;code>d&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>删除所有标记：&lt;code>:delmarks!&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>注意该命令只能删除用户设置的所有本地标记，并且内置的特殊标记、全局标记不能删除。如&lt;code>', &amp;lt;, &amp;gt;&lt;/code>。（我快崩溃了😭）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>上面的三个内置特殊标记，不建议用来做标记。他们具有特殊的含义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>他们是动态生成的内置特殊标记，无法删除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>含义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;lt; # 可表示上次visual模式选择的行头。还可表示标记的行头。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&lt;/span>&amp;gt; &lt;span class="c1"># 可表示上次visual模式选择的末尾的行头。还可以表示标记的行头。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>&amp;lt; &lt;span class="c1"># 可表示上次visual模式选择开始的位置。还可表示标记行鼠标的位置。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>&amp;gt; &lt;span class="c1"># 可表示上次visual模式选择的末尾。还可表示标记行鼠标的位置。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">不用他们做标记。通常用在visual模式中，会动态自动生成。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">例子：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:&lt;span class="s1">&amp;#39;&amp;lt;,&amp;#39;&lt;/span>&amp;gt;y 复制上次选择的内容。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:&lt;span class="s1">&amp;#39;&amp;lt;,&amp;#39;&lt;/span>&amp;gt;d 删除上次选择的内容。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="c1"># 跳到光标上次所在的行头。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">配合标记可以实现来回两个标记行头之间跳转
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">``&lt;/span> &lt;span class="c1"># 跳转到光标上次所在的确切位置（行和列）。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">配合标记可以实现来回两个标记光标确切位置之间跳转
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">意味着：&lt;span class="sb">`&lt;/span> &lt;span class="err">&amp;#39;&lt;/span> 做的标记会随时改变。不用他们做标记，会动态自动生成。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类似命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl-o&lt;/code>：跳转到上一个位置。&lt;/li>
&lt;li>&lt;code>Ctrl-i&lt;/code>：跳转到下一个位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>全局标记需要指定标记字符才能删除。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Vim 内置的特殊标记是 Vim 自动管理的，用于记录特定的编辑位置和选择范围。这些标记不能手动删除，因为它们是为特定功能设计的，并且在相应操作时会动态更新。用户可以删除自己设置的标记，但不能删除这些内置特殊标记。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="寄存器">
&lt;a href="#%e5%af%84%e5%ad%98%e5%99%a8" class="header-anchor">#&lt;/a>
寄存器
&lt;/h4>&lt;p>在 Vim 中，寄存器（register）是一个&lt;strong>临时存储位置&lt;/strong>，用于&lt;strong>存储和检索文本、命令、宏等&lt;/strong>。寄存器的使用可以大大提高编辑效率。以下是对寄存器的详细介绍和使用方法：&lt;/p>
&lt;p>&lt;strong>寄存器的分类&lt;/strong>：&lt;/p>
&lt;p>Vim 中有多种类型的寄存器，每种类型都有特定的用途：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>无名寄存器&lt;/strong>（&lt;code>&amp;quot;&lt;/code>）Unnamed Register：
&lt;ul>
&lt;li>默认寄存器，所有的删除（&lt;code>d&lt;/code>）、复制（&lt;code>y&lt;/code>）、粘贴（&lt;code>p&lt;/code>）操作都与此寄存器关联。&lt;strong>缓存最后一次操作内容&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>具名寄存器&lt;/strong>（&lt;code>a&lt;/code> 到 &lt;code>z&lt;/code> 和 &lt;code>A&lt;/code> 到 &lt;code>Z&lt;/code>）Named Register：
&lt;ul>
&lt;li>用于存储用户指定的文本或宏。&lt;/li>
&lt;li>小写字母（&lt;code>a&lt;/code> 到 &lt;code>z&lt;/code>）：&lt;strong>覆盖存储&lt;/strong>。&lt;/li>
&lt;li>大写字母（&lt;code>A&lt;/code> 到 &lt;code>Z&lt;/code>）：&lt;strong>追加存储&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>剪贴板寄存器&lt;/strong>（&lt;code>*&lt;/code> 或 &lt;code>+&lt;/code>）selection and drop：
&lt;ul>
&lt;li>用于与系统剪贴板交互。二者可以画等号，区别：&lt;/li>
&lt;li>&lt;code>*&lt;/code>：与选择剪贴板（primary selection）交互（在 X Window 系统中）。&lt;/li>
&lt;li>&lt;code>+&lt;/code>：与系统剪贴板（clipboard）交互。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>数字寄存器&lt;/strong>（&lt;code>0&lt;/code> 到 &lt;code>9&lt;/code>）numbered：
&lt;ul>
&lt;li>自动存储最近的删除文本。&lt;/li>
&lt;li>&lt;code>0&lt;/code>：最近的复制（&lt;code>yank&lt;/code>）操作。&lt;/li>
&lt;li>&lt;code>1&lt;/code> 到 &lt;code>9&lt;/code>：最近的删除（&lt;code>delete&lt;/code>）操作，&lt;code>1&lt;/code> 是最新的，&lt;code>9&lt;/code> 是最旧的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>读取（命令）寄存器&lt;/strong>（&lt;code>:&lt;/code>）：
&lt;ul>
&lt;li>存储最近的命令行输入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>搜索寄存器&lt;/strong>（&lt;code>/&lt;/code>）last search pattern：
&lt;ul>
&lt;li>存储最近的搜索模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>小删除寄存器&lt;/strong>（&lt;code>-&lt;/code>）small delete：
&lt;ul>
&lt;li>用于存储小于一行的删除操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>黑洞寄存器&lt;/strong>（&lt;code>_&lt;/code>）black hole：
&lt;ul>
&lt;li>丢弃写入其中的任何内容，不对其进行存储。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>表达式寄存器&lt;/strong>（&lt;code>=&lt;/code>）expression：
&lt;ul>
&lt;li>允许你输入数学运算进行计算。&lt;/li>
&lt;li>只能在Insert和Command模式使用，且部分版本不支持。&lt;/li>
&lt;li>如：insert模式下：&lt;code>ctrl-r =2+2 enter&lt;/code>结果为4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>只读寄存器&lt;/strong>read only：
&lt;ul>
&lt;li>命令寄存器&lt;code>:&lt;/code>&lt;/li>
&lt;li>点寄存器&lt;code>.&lt;/code>：上次insert模式插入的文本内容。&lt;/li>
&lt;li>搜索寄存器&lt;code>/&lt;/code>&lt;/li>
&lt;li>当前文件名寄存器&lt;code>%&lt;/code>&lt;/li>
&lt;li>上一个文件名寄存器&lt;code>#&lt;/code>&lt;/li>
&lt;li>这些寄存器都只能读。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>使用寄存器&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>查看寄存器内容&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>:reg&lt;/code> 或 &lt;code>:registers&lt;/code>&lt;/strong>：查看所有寄存器的内容。
&lt;ul>
&lt;li>例子：输入 &lt;code>:reg&lt;/code> 查看所有寄存器的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;code>:reg {register}&lt;/code>&lt;/strong>：查看指定寄存器的内容。
&lt;ul>
&lt;li>寄存器可以有多个，用不用空格隔开都行。&lt;code>:reg 01 2&lt;/code>查看寄存器0, 1, 2的内容。&lt;/li>
&lt;li>例子：输入 &lt;code>:reg a&lt;/code> 查看寄存器 &lt;code>a&lt;/code> 的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>引用寄存器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在Nomal模式下寄存器可以通过&lt;strong>在名字前加双引号来引用&lt;/strong>。例如，我们可以通过 &lt;code>&amp;quot;a&lt;/code> 来访问在 &lt;code>a&lt;/code> 寄存器中的内容。&lt;/li>
&lt;li>在Command或Insert模式下寄存器可以通过&lt;code>ctrl-r 名字&lt;/code>来引用。
&lt;ul>
&lt;li>注意在这两个模式下引用的寄存器会&lt;strong>立即输出其存储的内容&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复制到寄存器&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}y{motion}&lt;/code>：复制文本到指定寄存器。
&lt;ul>
&lt;li>例子：输入 &lt;code>&amp;quot;ayiw&lt;/code> 将当前单词复制到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>粘贴寄存器内容&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}p&lt;/code> 或 &lt;code>&amp;quot;{register}P&lt;/code>：粘贴寄存器内容。
&lt;ul>
&lt;li>&lt;code>p&lt;/code> 在光标后粘贴，&lt;code>P&lt;/code> 在光标前粘贴。&lt;/li>
&lt;li>例子：输入 &lt;code>&amp;quot;ap&lt;/code> 将寄存器 &lt;code>a&lt;/code> 的内容粘贴到光标后。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除到寄存器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}d{motion}&lt;/code>：删除文本并存储到指定寄存器。
&lt;ul>
&lt;li>例子：输入 &lt;code>&amp;quot;adiw&lt;/code> 删除当前单词并将其存储到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="#%e5%ae%8f%e5%bd%95%e5%88%b6" >录制宏&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>注意事项：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>无名寄存器：是默认的寄存器。d、c、s、x，y，p这些操作的文本，都在&lt;code>&amp;quot;&amp;quot;&lt;/code>无名寄存器中（&lt;strong>存储最后一次操作内容&lt;/strong>）。除非修改默认寄存器。&lt;/p>
&lt;ol>
&lt;li>意味着删除的可以使用p命令粘贴，因为默认从无名寄存器取值。&lt;/li>
&lt;li>默认寄存器如果是无名寄存器，p粘贴命令不能粘贴剪切板内容。要引用剪切板寄存器&lt;code>*&lt;/code>或&lt;code>+&lt;/code>才能粘贴。&lt;/li>
&lt;li>自然在vim中复制、删除的也就不能进剪切板。需要指定剪切板寄存器。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>数字寄存器：用于存储最近复制、删除的内容，删除的要以行为单位才会存储，否则删除的存储到&lt;code>-&lt;/code>寄存器。复制的不影响。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>复制用0存储。复制的只有0和无名寄存器存储。后者很快失效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除用1-9存储。数字越大，删除的时间越久。&lt;/p>
&lt;ul>
&lt;li>意味着指定寄存器，可以访问删除的内容:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;2p # 粘贴第二条删除的内容。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>数字寄存器不可以被自定义的具名也就是字母寄存器替代。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具名也就是字母寄存器存在的意义是固化需要频繁剪切的内容，不会因为操作频繁被覆盖。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>我们一般操作具名寄存器：复制，粘贴，删除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器只可以覆盖，不可以删除，由vim自身管理生命周期。不是永久存在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可跨文件使用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>寄存器的意义&lt;/strong>：&lt;/p>
&lt;p>首先，寄存器是可以&lt;strong>跨文本文件使用&lt;/strong>的，只有&lt;strong>有删除动作都会自动记录到1-9数字寄存器&lt;/strong>，&lt;strong>0存储复制动作&lt;/strong>，而这些寄存器是动态的，会变化的，如果操作动作很多，有一些操作是需要频繁使用的，那么，使用&lt;strong>自定义具名寄存器会大大的提高我们的效率&lt;/strong>，因为字母寄存器是不会改变的，除非你删除了这个寄存器。&lt;/p>
&lt;p>再次，我们如果有某些文件误修改了，或者有非法入侵，如果恶意闯入者没有删除所有寄存器的内容，我们有可能追踪到它的修改轨迹。&lt;/p>
&lt;p>最后，多说一句，寄存器的生命周期是很长的，即使服务器重启什么的，只要能正常进入系统，寄存器里的内容都是一直存在的。&lt;/p>
&lt;/blockquote>
&lt;p>Vim 的寄存器功能强大而灵活，通过熟练掌握寄存器的使用，可以极大地提升编辑效率。寄存器不仅可以用于基本的复制和粘贴，还可以存储宏、命令等，更好地管理和重用编辑内容。&lt;/p>
&lt;h4 id="宏录制">
&lt;a href="#%e5%ae%8f%e5%bd%95%e5%88%b6" class="header-anchor">#&lt;/a>
宏录制
&lt;/h4>&lt;p>在 Vim 中，宏是一组记录的&lt;strong>按键序列&lt;/strong>，可以重复执行以自动化重复性的任务。以下是使用宏的详细步骤和相关命令：&lt;/p>
&lt;p>&lt;strong>宏录制&lt;/strong>其实就是记录宏到&lt;a class="link" href="#%e5%af%84%e5%ad%98%e5%99%a8" >寄存器&lt;/a>（都是在&lt;strong>普通模式&lt;/strong>下开始、结束）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>&lt;code>q{register}&lt;/code>&lt;/strong>：在Normal模式下，开始录制宏到指定寄存器。&lt;/p>
&lt;ul>
&lt;li>例子：按 &lt;code>qa&lt;/code> 开始录制宏到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>开始录制之后可以任意执行vim命令。进行你希望录制的所有按键操作。Vim 会记录这些按键。&lt;/p>
&lt;ul>
&lt;li>例子：输入一系列编辑命令，如插入文本、删除文本、移动光标等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>q&lt;/code>&lt;/strong>：结束录制宏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>@{register}&lt;/code>&lt;/strong>：执行存储在寄存器中的宏。&lt;/p>
&lt;ul>
&lt;li>例子：按 &lt;code>@a&lt;/code> 执行寄存器 &lt;code>a&lt;/code> 中的宏。&lt;/li>
&lt;li>（ideavim目前不支持执行宏）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>@@&lt;/code>&lt;/strong>：重复执行上一次执行的宏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多次执行宏：&lt;/p>
&lt;ul>
&lt;li>操作：在普通模式下，输入一个数字，然后按 &lt;code>@&lt;/code> 和寄存器字母键。
&lt;ul>
&lt;li>&lt;code>10@@&lt;/code>执行10上次执行的宏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>例子：按 &lt;code>10@a&lt;/code> 将宏 &lt;code>a&lt;/code> 执行 10 次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>编辑和查看宏&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>查看宏内容&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，输入 &lt;code>:reg&lt;/code> 查看所有寄存器的内容，包括宏。&lt;/li>
&lt;li>例子：输入 &lt;code>:reg a&lt;/code> 查看寄存器 &lt;code>a&lt;/code> 的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>编辑宏内容&lt;/strong>：
&lt;ul>
&lt;li>操作：将宏内容复制到一个缓冲区进行编辑，然后将其粘贴回寄存器。&lt;/li>
&lt;li>例子：
&lt;ol>
&lt;li>输入 &lt;code>:let @a='your edited macro'&lt;/code>，将 &lt;code>'your edited macro'&lt;/code> 替换为编辑后的宏内容。&lt;/li>
&lt;li>或者，先用 &lt;code>:put a&lt;/code> 将寄存器内容粘贴到缓冲区，编辑后用 &lt;code>:let @a=join(getline(1, &amp;quot;$&amp;quot;), &amp;quot;\n&amp;quot;)&lt;/code> 保存修改。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>实例1&lt;/strong>：&lt;/p>
&lt;p>假设你想录制一个宏，用于在每行的末尾添加一个分号：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>开始录制&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>qa&lt;/code> 开始录制宏到寄存器 &lt;code>a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>进行操作&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>$&lt;/code> 移动到行尾。&lt;/li>
&lt;li>按 &lt;code>a;&lt;/code> 在行尾插入分号。&lt;/li>
&lt;li>按 &lt;code>Esc&lt;/code> 退出插入模式。&lt;/li>
&lt;li>按 &lt;code>j&lt;/code> 移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>结束录制&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>q&lt;/code> 结束宏录制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>执行宏&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>@a&lt;/code> 执行宏，在当前行末尾添加分号并移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>多次执行宏&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>10@a&lt;/code> 执行宏 10 次，每次在行末尾添加分号并移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>ctrl-a&lt;/code>会对光标所在数字加1.&lt;/p>
&lt;p>示例2：&lt;/p>
&lt;p>在一个只有一行且这一行只有“1”的文本中，键入如下命令：&lt;/p>
&lt;p>&lt;code>qaYp&amp;lt;C-a&amp;gt;q&lt;/code>&lt;/p>
&lt;p>解释：&lt;/p>
&lt;ul>
&lt;li>&lt;code>qa&lt;/code> 开始录制。&lt;/li>
&lt;li>&lt;code>Yp&lt;/code> 复制行并粘贴。&lt;/li>
&lt;li>&lt;code>&amp;lt;C-a&amp;gt;&lt;/code> 增加1。&lt;/li>
&lt;li>&lt;code>q&lt;/code> 停止录制。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>@a&lt;/code> → 在1下面写下 2&lt;/p>
&lt;p>&lt;code>@@&lt;/code> → 在2 正面写下3&lt;/p>
&lt;p>现在做 &lt;code>100@@&lt;/code> 会创建新的100行，并把数据增加到 103.&lt;/p>
&lt;p>通过使用宏，你可以在 Vim 中有效地自动化重复性任务，提高编辑效率。录制、执行和编辑宏的灵活性使得它们成为强大的工具，适用于各种编辑场景。&lt;/p>
&lt;h4 id="分屏">
&lt;a href="#%e5%88%86%e5%b1%8f" class="header-anchor">#&lt;/a>
分屏
&lt;/h4>&lt;p>在 Vim 中，分屏（split screen）功能非常强大，允许你在同一个 Vim 会话中同时查看和编辑多个文件或同一个文件的不同部分。以下是 Vim 分屏操作的详细介绍：&lt;/p>
&lt;p>&lt;strong>分类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>水平分屏：命令：&lt;code>:sp [file]&lt;/code>or&lt;code>:split [file]&lt;/code>：
&lt;ul>
&lt;li>指定文件水平分屏，没有指定为当前文件。&lt;/li>
&lt;li>快捷键：&lt;code>ctrl+w s&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>垂直分屏：命令：&lt;code>:vsp [file]&lt;/code>or &lt;code>:vsplit [file]&lt;/code> ：
&lt;ul>
&lt;li>指定文件重置分屏，没有指定默认为当前文件。&lt;/li>
&lt;li>快捷键：&lt;code>ctrl+w v&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>操作（最后一个快捷键可以分开按）：&lt;/p>
&lt;ul>
&lt;li>分屏窗口跟普通窗口一模一样，可以执行vim的所有的命令。
&lt;ul>
&lt;li>分屏的窗口还可以继续分屏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>切换到其他窗口&lt;/strong>
&lt;ul>
&lt;li>&lt;code>ctrl+w w&lt;/code>不同分屏窗口之间来回切换。&lt;/li>
&lt;li>&lt;code>Ctrl-w h&lt;/code>：切换到左边的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w j&lt;/code>：切换到下面的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w k&lt;/code>：切换到上面的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w l&lt;/code>：切换到右边的窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>调整窗口高度&lt;/strong>（部分vim版本不起作用）：
&lt;ul>
&lt;li>&lt;code>Ctrl-w +&lt;/code>：增加当前窗口高度。&lt;/li>
&lt;li>&lt;code>Ctrl-w -&lt;/code>：减少当前窗口高度。&lt;/li>
&lt;li>&lt;code>Ctrl-w =&lt;/code>：使所有窗口等高。&lt;/li>
&lt;li>&lt;code>ctrl-w _&lt;/code>：最大化当前水平窗口。&lt;/li>
&lt;li>&lt;code>ctrl-w |&lt;/code>：最大化当前垂直窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>调整窗口宽度&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl-w &amp;gt;&lt;/code>：增加当前窗口宽度。&lt;/li>
&lt;li>&lt;code>Ctrl-w &amp;lt;&lt;/code>：减少当前窗口宽度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关闭当前窗口&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:q&lt;/code> 或 &lt;code>:quit&lt;/code>：关闭当前窗口。&lt;/li>
&lt;li>&lt;strong>快捷键&lt;/strong>：&lt;code>Ctrl-w c&lt;/code> 或 &lt;code>Ctrl-w q&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关闭其他窗口&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:only&lt;/code>：关闭除了当前窗口之外的所有窗口。&lt;/li>
&lt;li>&lt;strong>快捷键&lt;/strong>：&lt;code>Ctrl-w o&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>交换窗口位置&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl-w r&lt;/code>：旋转窗口布局。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>拆分到标签页&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:tab split&lt;/code>：在新标签页中水平分屏当前文件。&lt;/li>
&lt;li>&lt;code>:tab vsplit&lt;/code>：在新标签页中垂直分屏当前文件。&lt;/li>
&lt;li>我测试二者效果一样，就是将指定文件，默认当前文件拆分到标签页中。跟浏览器标签页类似。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>vim打开多个文件，默认不会分屏，是以多窗口的方式打开，可以使用&lt;code>bn, bp&lt;/code>切换。
&lt;ul>
&lt;li>&lt;code>-o[n]&lt;/code>选项:指定打开的分屏窗口数量，默认n为1个，默认水平分屏。
&lt;ul>
&lt;li>可以不用指定n，根据后面的文件数来确定分屏。&lt;/li>
&lt;li>如果n与文件数不等，n有几个就分几屏，多出的文件到分别一个完整的窗口中。&lt;/li>
&lt;li>&lt;code>-O&lt;/code>垂直分屏。后面有几个文件，就几个垂直分屏。（n与文件数相等的情况）。不等分屏数由n决定，多的文件分别单独一个窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="结束语">
&lt;a href="#%e7%bb%93%e6%9d%9f%e8%af%ad" class="header-anchor">#&lt;/a>
结束语
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>上面是作者最常用的90%的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我建议你每天都学1到2个新的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在两到三周后，你会感到vim的强大的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有时候，学习VIM就像是在死背一些东西。&lt;/p>
&lt;ul>
&lt;li>官方建议：要在使用中学习，而不是在记忆中学习。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>幸运的是，vim有很多很不错的工具和优秀的文档。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行vimtutor直到你熟悉了那些基本命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其实在线帮助文档中你应该要仔细阅读的是 &lt;code>:help usr_02.txt&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你会学习到诸如 &lt;code>!，&lt;/code> 目录，寄存器，插件等很多其它的功能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>学习vim就像学弹钢琴一样，一旦学会，受益无穷。&lt;/p>
&lt;div align="center" style='color:red'>
——————————正文结束——————————
&lt;/div>
&lt;h2 id="扩展">
&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">#&lt;/a>
扩展
&lt;/h2>&lt;p>更多内容参考&lt;a class="link" href="https://arlettebrook.github.io/p/vim-introduction/" target="_blank" rel="noopener"
>vim-introduction&lt;/a>。&lt;/p>
&lt;h3 id="目录操作">
&lt;a href="#%e7%9b%ae%e5%bd%95%e6%93%8d%e4%bd%9c" class="header-anchor">#&lt;/a>
目录操作
&lt;/h3>&lt;p>Vim 自带的 &lt;code>netrw&lt;/code> 插件提供了文件浏览器功能，可以用来&lt;strong>浏览、操作目录和文件&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>打开目录浏览&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Explore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Ex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>会关闭当前文件。&lt;/li>
&lt;li>用vim移动命令移动，回车打开文件或命令。&lt;/li>
&lt;li>&lt;code>:q&lt;/code>退出浏览。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在垂直分屏窗口中打开目录浏览器&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Vexplore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Vex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>分屏命令都可以用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在水平分屏窗口中打开目录浏览器&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Sexplore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Sex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>浏览指定目录&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">:Explore /path/to/directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Vex /path/to/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>部分vim版本不带该目录浏览插件。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>原文地址&lt;a class="link" href="https://blog.csdn.net/niushuai666/article/details/7275406" target="_blank" rel="noopener"
>Vim简明教程【CoolShell】&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.51cto.com/u_15966109/6082781" target="_blank" rel="noopener"
>vim的寄存器详解&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://segmentfault.com/a/1190000038477576" target="_blank" rel="noopener"
>(译)Vim 寄存器：由浅入深&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Openapi And Swagger Introduction</title><link>https://arlettebrook.github.io/p/openapi-and-swagger-introduction/</link><pubDate>Wed, 22 May 2024 21:43:36 +0800</pubDate><guid>https://arlettebrook.github.io/p/openapi-and-swagger-introduction/</guid><description>&lt;hr>
&lt;blockquote>
&lt;p>作为一名开发者，往往需要编写程序的 API 文档，尤其是 Web 后端开发者，在跟前端对接 HTTP 接口的时候，一个好的 API 文档能够大大提高协作效率，降低沟通成本，本文就来聊聊如何使用 OpenAPI 构建 HTTP 接口文档。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="openapi">
&lt;a href="#openapi" class="header-anchor">#&lt;/a>
OpenAPI
&lt;/h2>&lt;h3 id="什么是-openapi">
&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af-openapi" class="header-anchor">#&lt;/a>
什么是 OpenAPI
&lt;/h3>&lt;p>OpenAPI 是规范化描述 API 领域应用最广泛的&lt;strong>行业标准&lt;/strong>，由 &lt;a class="link" href="https://www.openapis.org/" target="_blank" rel="noopener"
>OpenAPI Initiative(OAI)&lt;/a> 定义并维护，同时也是 Linux 基金会下的一个开源项目。通常我们所说的 OpenAPI 全称应该是 OpenAPI Specification(OpenAPI 规范，简称 OSA)，它使用规定的格式来描述 HTTP RESTful API 的定义，以此来规范 RESTful 服务开发过程。使用 JSON 或 YAML 来描述一个标准的、与编程语言无关的 HTTP API 接口。OpenAPI 规范最初基于 SmartBear Software 在 2015 年捐赠的 &lt;a class="link" href="https://swagger.io/resources/open-api/" target="_blank" rel="noopener"
>Swagger 规范&lt;/a>演变而来，目前最新的版本是 &lt;a class="link" href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md" target="_blank" rel="noopener"
>v3.1.0&lt;/a>。&lt;/p>
&lt;p>简单来说，OpenAPI 就是用来定义 HTTP 接口文档的一种规范，大家都按照同一套规范来编写接口文档，能够极大的减少沟通成本。&lt;/p>
&lt;h3 id="openapi-规范基本信息">
&lt;a href="#openapi-%e8%a7%84%e8%8c%83%e5%9f%ba%e6%9c%ac%e4%bf%a1%e6%81%af" class="header-anchor">#&lt;/a>
OpenAPI 规范基本信息
&lt;/h3>&lt;p>OpenAPI 规范内容包含非常多的细节，本文无法一一讲解，这里仅介绍常见的基本信息，以 YAML 为例进行说明。YAML 是 JSON 的超集，在 OpenAPI 规范中定义的所有语法，两者之间是可以互相转换的，如果手动编写，建议编写 YAML 格式，更为易读。&lt;/p>
&lt;p>OpenAPI 文档编写在一个 &lt;code>.json&lt;/code> 或 &lt;code>.yaml&lt;/code> 中，推荐将其命名为 &lt;code>openapi.json&lt;/code> 或 &lt;code>openapi.yaml&lt;/code>，OpenAPI 文档其实就是一个单一的 JSON 对象，其中包含符合 &lt;a class="link" href="https://spec.openapis.org/oas/latest.html" target="_blank" rel="noopener"
>OpenAPI 规范&lt;/a>中定义的结构字段。&lt;/p>
&lt;p>OpenAPI 规范基本信息如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段名&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>openapi&lt;/td>
&lt;td>string&lt;/td>
&lt;td>必选，必须是 OpenAPI 已发布的合法版本，如 &lt;code>3.0.1&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>info&lt;/td>
&lt;td>object&lt;/td>
&lt;td>必选，此字段提供 API 相关的元数据（如描述、作者和联系信息）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>servers&lt;/td>
&lt;td>array[object]&lt;/td>
&lt;td>这是一个 Server 对象的数组，提供到服务器的连接信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>paths&lt;/td>
&lt;td>object&lt;/td>
&lt;td>必选，API 提供的可用的路径和操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>components&lt;/td>
&lt;td>object&lt;/td>
&lt;td>一个包含多种结构的元素，可复用组件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security&lt;/td>
&lt;td>array&lt;/td>
&lt;td>声明 API 使用的安全认证机制，目前支持 &lt;code>HTTP Basic Auth&lt;/code>、&lt;code>HTTP Bearer Auth&lt;/code>、&lt;code>ApiKey Auth&lt;/code> 以及 &lt;code>OAuth2&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tags&lt;/td>
&lt;td>array&lt;/td>
&lt;td>提供标签可以为 API 归类，每个标签名都应该是唯一的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>externalDocs&lt;/td>
&lt;td>object&lt;/td>
&lt;td>附加的文档，可以通过扩展属性来扩展文档。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>一个 YAML 格式的 OpenAPI 文档示例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">openapi&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">info&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Tic Tac Toe&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> This API allows writing down marks on a Tic Tac Toe board
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> and requesting the state of the board or of individual squares.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1.0.0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 此为 API 接口文档版本，与 openapi 版本无关&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gameplay&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Whole board operations&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">/board&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">get&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Get the whole board&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Retrieves the current state of the board and the winner.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">Gameplay&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">operationId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">get-board&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">responses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;OK&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">content&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">application/json&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">schema&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">$ref&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;#/components/schemas/status&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Single square operations&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">/board/{row}/{column}:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">parameters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">$ref&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;#/components/parameters/rowParam&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">$ref&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;#/components/parameters/columnParam&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">get&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Get a single board square&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Retrieves the requested square.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">Gameplay&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">operationId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">get-square&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">responses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;OK&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">content&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">application/json&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">schema&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">$ref&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;#/components/schemas/mark&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;400&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The provided parameters are incorrect&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">content&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">text/html&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">schema&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">$ref&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;#/components/schemas/errorMessage&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">example&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Illegal coordinates&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上示例完整文档&lt;a class="link" href="https://oai.github.io/Documentation/examples/tictactoe.yaml" target="_blank" rel="noopener"
>在此&lt;/a>，具体语法我就不在这里介绍了。如果你开发过 API 接口，相信能看懂文档大部分内容所代表的含义。&lt;strong>不必完全掌握其语法，这并不会对阅读本文接下来的内容造成困扰&lt;/strong>，因为稍后我会介绍如何通过代码注释的方式自动生成此文档。&lt;/p>
&lt;p>如果你想手动编写 OpenAPI 文档，那么我还是推荐你阅读下 &lt;a class="link" href="https://spec.openapis.org/oas/latest.html" target="_blank" rel="noopener"
>OpenAPI 规范&lt;/a>，这里有一份&lt;a class="link" href="https://openapi.apifox.cn/" target="_blank" rel="noopener"
>中文版的规范&lt;/a>。阅读规范是一个比较枯燥的过程，如果你没有耐心读完，强烈建议阅读 &lt;a class="link" href="https://oai.github.io/Documentation/" target="_blank" rel="noopener"
>OpenAPI 规范入门&lt;/a>，相较于完整版的规范要精简得多，并且讲解更加易于理解。&lt;/p>
&lt;p>另外还推荐访问 &lt;a class="link" href="https://openapi-map.apihandyman.io/" target="_blank" rel="noopener"
>OpenAPI Map&lt;/a> 网站来掌握 OpenAPI 规范，该网站以思维导图的形式展现规范的格式以及说明。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/openapi-map.png"
width="2940"
height="1678"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/openapi-map_hudb4f51bb2f8bce2a084d37b76def6aa2_332185_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/openapi-map_hudb4f51bb2f8bce2a084d37b76def6aa2_332185_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="OpenAPI Map"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="420px"
>&lt;/p>
&lt;hr>
&lt;h2 id="openapitools">
&lt;a href="#openapitools" class="header-anchor">#&lt;/a>
OpenAPI.Tools
&lt;/h2>&lt;p>现在我们知道了 OpenAPI 规范，接下来要做什么？当然是了解 OpenAPI 开放了哪些能力。&lt;/p>
&lt;p>有一个叫 &lt;a class="link" href="https://openapi.tools/" target="_blank" rel="noopener"
>OpenAPI.Tools&lt;/a> 的网站，分类整理并记录了社区围绕 OpenAPI 规范开发的流行工具。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/openapi-tool-types.png"
width="2654"
height="1220"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/openapi-tool-types_hue30a3c9c74b7e77978f3be591373dd5a_502117_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/openapi-tool-types_hue30a3c9c74b7e77978f3be591373dd5a_502117_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Tool Types"
class="gallery-image"
data-flex-grow="217"
data-flex-basis="522px"
>&lt;/p>
&lt;p>可以看到列表中有很多分类，在我们日常开发中，最经常使用的有三类：&lt;/p>
&lt;h3 id="文档编辑器">
&lt;a href="#%e6%96%87%e6%a1%a3%e7%bc%96%e8%be%91%e5%99%a8" class="header-anchor">#&lt;/a>
文档编辑器
&lt;/h3>&lt;p>文档编辑器方便我们用来编写符合 OpenAPI 规范的文档，有助于提高编写文档的效率，就像 &lt;a class="link" href="https://code.visualstudio.com/" target="_blank" rel="noopener"
>VS Code&lt;/a> 能够方便我们编写代码一样。&lt;/p>
&lt;p>文档编辑器有两种：&lt;a class="link" href="https://openapi.tools/#text-editors" target="_blank" rel="noopener"
>文本编辑器&lt;/a> 以及 &lt;a class="link" href="https://openapi.tools/#gui-editors" target="_blank" rel="noopener"
>图形编辑器&lt;/a>。&lt;/p>
&lt;p>文本编辑器推荐使用在线的 &lt;a class="link" href="https://editor.swagger.io/" target="_blank" rel="noopener"
>Swagger Editor&lt;/a>，能够实现格式校验和实时预览 Swagger 交互式 API 文档功能，效果如下图所示：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/swagger-editor.png"
width="2940"
height="1838"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/swagger-editor_hu50c8be478a0cc503116512d3818232f0_751043_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/swagger-editor_hu50c8be478a0cc503116512d3818232f0_751043_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Swagger Editor"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>如果你习惯使用 &lt;code>VS Code&lt;/code>，也有&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi" target="_blank" rel="noopener"
>相应插件&lt;/a>可供使用。&lt;/p>
&lt;p>图形编辑器的好处是能够以可视化的形式编辑内容，不了解 OpenAPI 规范语法也能编辑。可以根据自己喜好来进行选择，如 &lt;a class="link" href="https://stoplight.io/studio" target="_blank" rel="noopener"
>Stoplight Studio&lt;/a>、&lt;a class="link" href="https://apigit.com/zh-CN" target="_blank" rel="noopener"
>APIGit&lt;/a> 等。&lt;/p>
&lt;h3 id="mock-服务器">
&lt;a href="#mock-%e6%9c%8d%e5%8a%a1%e5%99%a8" class="header-anchor">#&lt;/a>
Mock 服务器
&lt;/h3>&lt;p>当我们使用 OpenAPI 规范来进行接口开发时，往往采用文档先行的策略，也就是前后端在开发代码前，先定义好接口文档，再进行代码的编写。此时前端如果想测试接口可用性，而后端代码还没有编写完成，&lt;a class="link" href="https://openapi.tools/#mock" target="_blank" rel="noopener"
>Mock 服务器&lt;/a>就派上用场了。Mock 服务器能够根据所提供的 OpenAPI 接口文档，自动生成一个模拟的 Web Server。使用 Mock 服务器能够轻松模拟真实的后端接口，方便前端同学进行接口调试。&lt;/p>
&lt;p>上面提到的 &lt;a class="link" href="https://apigit.com/zh-CN/why-apigit/mock-server" target="_blank" rel="noopener"
>APIGit&lt;/a> 也同时具备此功能。&lt;/p>
&lt;h3 id="代码生成器">
&lt;a href="#%e4%bb%a3%e7%a0%81%e7%94%9f%e6%88%90%e5%99%a8" class="header-anchor">#&lt;/a>
代码生成器
&lt;/h3>&lt;p>还有一种很实用的工具是代码生成器，代码生成器有两种类型：一种是从代码/注释生成 OpenAPI 文档，另一种是从 OpenAPI 文档生成代码。&lt;/p>
&lt;p>这类工具同样非常多，且更为实用。比如我们有一份写好了的 Go Web Server 代码，想要自动生成一份 OpenAPI 文档，就可以使用 &lt;a class="link" href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener"
>go-swagger&lt;/a> 这个工具来生成一份 &lt;code>openapi.yaml&lt;/code> 文档。&lt;/p>
&lt;p>而如果我们有一份 &lt;code>openapi.yaml&lt;/code> 文档，就可以利用 &lt;code>go-swagger&lt;/code> 生成一份 Go SDK 代码，甚至它还能根据这份 OpenAPI 文档生成 Go Web Server 的框架代码，我们只需要在对应的接口里面实现具体的业务逻辑即可。&lt;/p>
&lt;p>不仅 Go 语言有这样的工具，像 &lt;a class="link" href="https://swagger.io/tools/swagger-codegen/" target="_blank" rel="noopener"
>Swagger Codegen&lt;/a> 和 &lt;a class="link" href="https://github.com/openapitools/openapi-generator" target="_blank" rel="noopener"
>OpenAPI Generator&lt;/a> 这类工具更是支持几乎所有主流编程语言。&lt;/p>
&lt;p>代码生成器是开发者应该着重关注的工具，使用这些工具可以减少大量手动且重复的工作，你可以&lt;a class="link" href="https://openapi.tools/#sdk" target="_blank" rel="noopener"
>在此&lt;/a>看下有没有感兴趣的项目供你使用。&lt;/p>
&lt;hr>
&lt;h2 id="swagger">
&lt;a href="#swagger" class="header-anchor">#&lt;/a>
&lt;strong>Swagger&lt;/strong>
&lt;/h2>&lt;h3 id="什么是-swagger">
&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af-swagger" class="header-anchor">#&lt;/a>
什么是 Swagger
&lt;/h3>&lt;p>Swagger 是一套围绕 OpenAPI 规范所构建的开源工具集，提供了强大和易于使用的工具来充分利用 OpenAPI 规范，Swagger 工具集由最初的 Swagger 规范背后的团队所开发。&lt;/p>
&lt;p>Swagger 工具集提供了 API 设计、开发、测试、治理和监控等能力，其中最主要的工具包含如下三个：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://swagger.io/tools/swagger-codegen/" target="_blank" rel="noopener"
>Swagger Codegen&lt;/a>：根据 OpenAPI 规范定义生成服务器存根和客户端 SDK。&lt;/li>
&lt;li>&lt;a class="link" href="https://swagger.io/tools/swagger-editor/" target="_blank" rel="noopener"
>Swagger Editor&lt;/a>：基于浏览器的在线 OpenAPI 规范编辑器。&lt;/li>
&lt;li>&lt;a class="link" href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener"
>Swagger UI&lt;/a>：以 UI 界面的方式可视化展示 OpenAPI 规范定义，并且能够在浏览器中进行交互。&lt;/li>
&lt;/ul>
&lt;p>当然 Swagger 也有为企业用户提供的收费版本工具，如 &lt;a class="link" href="https://swagger.io/tools/swaggerhub/enterprise/" target="_blank" rel="noopener"
>SwaggerHub Enterprise&lt;/a>，感兴趣的同学可以自行了解。&lt;/p>
&lt;h3 id="swagger-和-openapi-的关系">
&lt;a href="#swagger-%e5%92%8c-openapi-%e7%9a%84%e5%85%b3%e7%b3%bb" class="header-anchor">#&lt;/a>
Swagger 和 OpenAPI 的关系
&lt;/h3>&lt;p>讲到了 Swagger，就不得不提及 Swagger 和 OpenAPI 的联系与区别，因为这二者经常在一起出现。&lt;/p>
&lt;p>前文也说过 OpenAPI 规范是基于 Swagger 规范演变而来的，但其实二者并不相等。&lt;/p>
&lt;p>在 OpenAPI 尚未出现之前，Swagger 代表了 Swagger 规范以及一系列围绕 Swagger 规范的开源工具集。Swagger 规范最后一个版本是 &lt;a class="link" href="https://swagger.io/specification/v2/" target="_blank" rel="noopener"
>2.0&lt;/a>，之后就捐赠给了 OAI 并被重新命名为 OpenAPI 规范，所以 OpenAPI 规范第一个版本是 2.0，也就是 Swagger 规范 2.0，而由 OAI 这个组织发布的第一个 OpenAPI 规范正式版本是 &lt;a class="link" href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md" target="_blank" rel="noopener"
>3.0.0&lt;/a>。&lt;/p>
&lt;p>现在，Swagger 规范已被 OpenAPI 规范完全接管并取代。OpenAPI 代表了 OpenAPI 规范以及一系列生态，而 Swagger 则是这个生态中的一部分，是 Swagger 团队围绕 OpenAPI 规范所开发的一系列工具集。&lt;/p>
&lt;p>Swagger 是 OpenAPI 生态中非常重要的组成部分，因为它给出了一整套方案，且非常流行。&lt;/p>
&lt;p>Swagger 和 OpenAPI 二者 LOGO 对比如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/swagger-openapi.png"
width="1030"
height="318"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/swagger-openapi_hu9cf2fd8781eb4410d052f1a4d31c4f66_31928_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/swagger-openapi_hu9cf2fd8781eb4410d052f1a4d31c4f66_31928_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Swagger-OpenAPI-LOGO"
class="gallery-image"
data-flex-grow="323"
data-flex-basis="777px"
>&lt;/p>
&lt;p>希望你下次再见到这两个 LOGO 时能清晰分辨出二者，而不被混淆。&lt;/p>
&lt;h2 id="以-go-语言为例讲解-openapi-在实际开发中的应用">
&lt;a href="#%e4%bb%a5-go-%e8%af%ad%e8%a8%80%e4%b8%ba%e4%be%8b%e8%ae%b2%e8%a7%a3-openapi-%e5%9c%a8%e5%ae%9e%e9%99%85%e5%bc%80%e5%8f%91%e4%b8%ad%e7%9a%84%e5%ba%94%e7%94%a8" class="header-anchor">#&lt;/a>
以 Go 语言为例讲解 OpenAPI 在实际开发中的应用
&lt;/h2>&lt;p>前文介绍了编写 OpenAPI 文档的两种编辑器：文本编辑器以及图形编辑器。在日常开发中，后端可以先使用这类编辑器如 Swagger Editor 编写出 OpenAPI 文档，然后将这份文档交给前端，前端拿到 OpenAPI 文档后将其导入到 Swagger Editor，就可以在线阅读接口文档并与之进行交互，之后前后端就可以并行开发了。&lt;/p>
&lt;p>这样的工作流看起来似乎没什么问题，不过编写 OpenAPI 文档毕竟是个苦力活，不仅有大量的重复工作，还要求开发者熟练掌握 OpenAPI 规范语法。这对于“爱偷懒”的开发者显然是无法接受的，就像段子里说的，程序员最讨厌两件事：1. 写文档，2. 别人不写文档。而这个问题的解法，当然就是前文提到的代码生成器。&lt;/p>
&lt;h3 id="使用-swag-生成-swagger-文档">
&lt;a href="#%e4%bd%bf%e7%94%a8-swag-%e7%94%9f%e6%88%90-swagger-%e6%96%87%e6%a1%a3" class="header-anchor">#&lt;/a>
使用 Swag 生成 Swagger 文档
&lt;/h3>&lt;p>在 Go 语言生态里，目前有两个比较流行的开源工具可以生成 Swagger 文档，分别是 &lt;a class="link" href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener"
>go-swagger&lt;/a> 和 &lt;a class="link" href="https://github.com/swaggo/swag" target="_blank" rel="noopener"
>swag&lt;/a>。它们都能根据代码中的注释生成 Swagger 文档，go-swagger 作为一款 OpenAPI.Tools 推荐的工具，其功能比 swag 更加强大且 Github Star 数量也更高。&lt;/p>
&lt;p>不过本文将选择 swag 来进行介绍，一是因为 swag 比较轻量，更适合微服务开发；二是如果使用 swag，那么注释代码会离接口代码更近，升级时方便维护。如果你有更高级的需求，如根据 Swagger 文档生成客户端 SDK，服务端存根等，则推荐使用 go-swagger。&lt;/p>
&lt;blockquote>
&lt;p>注意：在这里我一直提到的都是生成 Swagger 文档，而没有说是 OpenAPI 文档。因为无论是 swag 还是功能更强大的 go-swagger，它们目前都仅支持生成 OpenAPI 2.0 文档，并不支持生成 OpenAPI 3.0+ 文档，而 OpenAPI 2.0 版本我们更习惯称其为 Swagger 文档。&lt;/p>
&lt;/blockquote>
&lt;h4 id="安装-swag">
&lt;a href="#%e5%ae%89%e8%a3%85-swag" class="header-anchor">#&lt;/a>
安装 Swag
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go install github.com/swaggo/swag/cmd/swag@latest &lt;span class="c1"># 安装&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ swag --version &lt;span class="c1"># 查看版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">swag version v1.8.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="swag-命令行工具">
&lt;a href="#swag-%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" class="header-anchor">#&lt;/a>
Swag 命令行工具
&lt;/h4>&lt;p>swag 非常简洁，仅提供了两个主要命令 &lt;code>init&lt;/code> 和 &lt;code>fmt&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ swag -h &lt;span class="c1"># 查看帮助&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag - Automatically generate RESTful API documentation with Swagger 2.0 &lt;span class="k">for&lt;/span> Go.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USAGE:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag &lt;span class="o">[&lt;/span>global options&lt;span class="o">]&lt;/span> &lt;span class="nb">command&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nb">command&lt;/span> options&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>arguments...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">VERSION:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> v1.8.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COMMANDS:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init, i Create docs.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt, f format swag comments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> help, h Shows a list of commands or &lt;span class="nb">help&lt;/span> &lt;span class="k">for&lt;/span> one &lt;span class="nb">command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GLOBAL OPTIONS:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --help, -h show &lt;span class="nb">help&lt;/span> &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --version, -v print the version &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>在包含 &lt;code>main.go&lt;/code> 文件（默认情况下）的项目根目录运行 &lt;code>swag init&lt;/code> 命令，将会解析 swag 注释并生成 &lt;code>docs/&lt;/code> 目录以及 &lt;code>/docs/docs.go&lt;/code>、&lt;code>docs/swagger.json&lt;/code>、&lt;code>docs/swagger.yaml&lt;/code> 三个文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ swag init -h &lt;span class="c1"># 查看 init 子命令使用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag init - Create docs.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USAGE:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag init &lt;span class="o">[&lt;/span>&lt;span class="nb">command&lt;/span> options&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>arguments...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OPTIONS:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --quiet, -q 不在控制台输出日志 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --generalInfo value, -g value API 通用信息所在的 Go 源文件路径，如果是相对路径则基于 API 解析目录 &lt;span class="o">(&lt;/span>default: &lt;span class="s2">&amp;#34;main.go&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --dir value, -d value API 解析目录，多个目录可用逗号分隔 &lt;span class="o">(&lt;/span>default: &lt;span class="s2">&amp;#34;./&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --exclude value 解析扫描时排除的目录，多个目录可用逗号分隔
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --propertyStrategy value, -p value 结构体字段命名规则，三种：snake_case，camelCase，PascalCase &lt;span class="o">(&lt;/span>default: &lt;span class="s2">&amp;#34;camelCase&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --output value, -o value 所有生成文件的输出目录（swagger.json, swagger.yaml and docs.go）&lt;span class="o">(&lt;/span>default:&lt;span class="s2">&amp;#34;./docs&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --outputTypes value, --ot value 生成文件的输出类型（docs.go, swagger.json, swagger.yaml）三种：go,json,yaml &lt;span class="o">(&lt;/span>default: &lt;span class="s2">&amp;#34;go,json,yaml&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --parseDependency, --pd 解析依赖目录中的 Go 文件 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --markdownFiles value, --md value 指定 API 的描述信息所使用的 Markdown 文件所在的目录，默认禁用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --parseInternal 解析 internal 包中的 Go 文件 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --generatedTime 输出时间戳到输出文件 &lt;span class="sb">`&lt;/span>docs.go&lt;span class="sb">`&lt;/span> 顶部 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --parseDepth value 依赖项解析深度 &lt;span class="o">(&lt;/span>default: 100&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --requiredByDefault 默认情况下，为所有字段设置 &lt;span class="sb">`&lt;/span>required&lt;span class="sb">`&lt;/span> 验证 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --instanceName value 设置文档实例名 &lt;span class="o">(&lt;/span>default: &lt;span class="s2">&amp;#34;swagger&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --parseGoList 通过 &lt;span class="s1">&amp;#39;go list&amp;#39;&lt;/span> 解析依赖关系 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --tags value, -t value 逗号分隔的标签列表，用于过滤指定标签生成 API 文档。特殊情况下，如果标签前缀是 &lt;span class="s1">&amp;#39;!&amp;#39;&lt;/span> 字符，那么带有该标记的 API 将被排除
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --help, -h 显示帮助信息 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：以上 &lt;code>swag init&lt;/code> 命令可选参数介绍略有删减，只列出了常用选项，更完整的文档请参考&lt;a class="link" href="https://github.com/swaggo/swag/blob/master/README.md#swag-cli" target="_blank" rel="noopener"
>官方仓库&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>swag fmt&lt;/code> 命令可以格式化 swag 注释。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ swag fmt -h &lt;span class="c1"># 查看 fmt 子命令使用方法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag fmt - format swag comments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USAGE:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag fmt &lt;span class="o">[&lt;/span>&lt;span class="nb">command&lt;/span> options&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>arguments...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OPTIONS:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --dir value, -d value API 解析目录，多个目录可用逗号分隔 &lt;span class="o">(&lt;/span>default: &lt;span class="s2">&amp;#34;./&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --exclude value 解析扫描时排除的目录，多个目录可用逗号分隔
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --generalInfo value, -g value API 通用信息所在的 Go 源文件路径，如果是相对路径则基于 API 解析目录 &lt;span class="o">(&lt;/span>default: &lt;span class="s2">&amp;#34;main.go&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --help, -h 显示帮助信息 &lt;span class="o">(&lt;/span>default: &lt;span class="nb">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="在-gin-中使用-swag">
&lt;a href="#%e5%9c%a8-gin-%e4%b8%ad%e4%bd%bf%e7%94%a8-swag" class="header-anchor">#&lt;/a>
在 Gin 中使用 Swag
&lt;/h4>&lt;p>在 &lt;a class="link" href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener"
>gin&lt;/a> 框架能够很方便的使用 swag，步骤如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>准备项目目录结构如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── go.sum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>初始化项目&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go mod init gin-swag
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>编写 &lt;code>main.go&lt;/code> 代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Helloworld godoc
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Summary 该操作的简短摘要
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Description 操作行为的详细说明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Tags example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Accept json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Produce json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Success 200 {string} string &amp;#34;Hello World!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Router /example/helloworld [get]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Helloworld&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @title Swagger Example API
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @version 1.0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @schemes http
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @host localhost:8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @BasePath /api/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @tag.name example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @tag.description 示例接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Default&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">v1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/api/v1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/example&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/helloworld&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Helloworld&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>代码中的注释部分即为 swag 的注释语法，稍后通过这些注释生成 Swagger 文档。&lt;/p>
&lt;p>其中通用 API 信息部分注释含义如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注释&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@title&lt;/td>
&lt;td>必填，应用程序的名称。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@version&lt;/td>
&lt;td>必填，提供应用程序 API 的版本。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@schemes&lt;/td>
&lt;td>用空格分隔的请求传输协议。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@host&lt;/td>
&lt;td>运行 API 的主机（主机名或 IP 地址）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@BasePath&lt;/td>
&lt;td>运行 API 的基本路径。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.name&lt;/td>
&lt;td>标签的名称。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@tag.description&lt;/td>
&lt;td>标签的描述。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>还有一部分注释代表了 API 操作，其含义如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>注释&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@Summary&lt;/td>
&lt;td>该操作的简短摘要。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Description&lt;/td>
&lt;td>操作行为的详细说明。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Tags&lt;/td>
&lt;td>该 API 操作的标签列表，多个标签以逗号分隔。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Accept&lt;/td>
&lt;td>API 可以接收的参数 MIME 类型列表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Produce&lt;/td>
&lt;td>API 可以生成的参数 MIME 类型列表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Success&lt;/td>
&lt;td>成功响应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Router&lt;/td>
&lt;td>路由路径定义。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>以上这些注释最终都会对应到 OpenAPI 2.0 规范的某个字段上。更多说明请参考&lt;a class="link" href="https://github.com/swaggo/swag#declarative-comments-format" target="_blank" rel="noopener"
>官方文档&lt;/a>，并且官方也提供了&lt;a class="link" href="https://github.com/swaggo/swag/blob/master/README_zh-CN.md#%e5%a3%b0%e6%98%8e%e5%bc%8f%e6%b3%a8%e9%87%8a%e6%a0%bc%e5%bc%8f" target="_blank" rel="noopener"
>中文文档&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 swag 根据注释生成 Swagger 文档，在项目根目录下（&lt;code>.&lt;/code>）执行 &lt;code>swag init&lt;/code>，将得到新的目录结构：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── docs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── docs.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── swagger.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── swagger.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── go.sum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现 &lt;code>swag init&lt;/code> 生成的三个文件 &lt;code>docs.go&lt;/code>、&lt;code>swagger.json&lt;/code>、&lt;code>swagger.yaml&lt;/code> 默认都在 &lt;code>docs/&lt;/code> 目录下。&lt;/p>
&lt;p>其中 &lt;code>swagger.json&lt;/code>、&lt;code>swagger.yaml&lt;/code> 正是符合 OpenAPI 2.0 规范的 JSON 和 YAML 接口文档，例如 &lt;code>swagger.yaml&lt;/code> 内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">basePath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/api/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">localhost:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">info&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">contact&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Swagger Example API&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">/example/helloworld&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">get&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">consumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">application/json&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">操作行为的详细说明&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">produces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">application/json&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">responses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hello World!&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">schema&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">summary&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">该操作的简短摘要&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">example&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">schemes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>- &lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">swagger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">tags&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>- &lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">示例接口&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对比上面代码中的注释，很容易将其对应起来，相比于直接编写 YAML 格式文档，显然在代码中编写注释更为简单。&lt;/p>
&lt;p>将其复制到 Swagger Editor 编辑器中即可查看 Swagger UI 预览。或者在GoLand IDE中直接打开，右侧会出现 Swagger UI 预览。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swag-example-swagger-editor.png"
width="2940"
height="1838"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swag-example-swagger-editor_hu50c8be478a0cc503116512d3818232f0_349132_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swag-example-swagger-editor_hu50c8be478a0cc503116512d3818232f0_349132_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Swagger UI"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/image-20240522235024654.png"
width="1920"
height="1079"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/image-20240522235024654_hu48363c004fdfc3e553ff145f99c5c8b9_187189_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/image-20240522235024654_hu48363c004fdfc3e553ff145f99c5c8b9_187189_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Swagger UI"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/p>
&lt;h4 id="将-gin-作为-swagger-ui-服务器">
&lt;a href="#%e5%b0%86-gin-%e4%bd%9c%e4%b8%ba-swagger-ui-%e6%9c%8d%e5%8a%a1%e5%99%a8" class="header-anchor">#&lt;/a>
将 Gin 作为 Swagger UI 服务器
&lt;/h4>&lt;p>上面我们通过 swag 生成了 Swagger 文档，并手动将生成的 &lt;code>swagger.yaml&lt;/code> 复制到 Swagger Editor 编辑器进行 Swagger UI 预览。不过这么做显然有点麻烦，好在 swag 作者也考虑到了这一点，所以他又提供了另外两个项目 &lt;a class="link" href="https://github.com/swaggo/gin-swagger" target="_blank" rel="noopener"
>gin-swagger&lt;/a> 和 &lt;a class="link" href="https://github.com/swaggo/files" target="_blank" rel="noopener"
>files&lt;/a>，能够直接将 gin 作为 Swagger UI 服务器，这样就不用每次都将 &lt;code>swagger.yaml&lt;/code> 手动复制到 Swagger Editor 编辑器才能实现 Swagger UI 预览。&lt;/p>
&lt;p>使用步骤如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载 gin-swagger、files:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go get -u github.com/swaggo/swag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ go get -u github.com/swaggo/gin-swagger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ go get -u github.com/swaggo/files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在代码中导入 gin-swagger、files(可以直接注册swagger文档路由，IDE会自动导入）:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nx">ginSwagger&lt;/span> &lt;span class="s">&amp;#34;github.com/swaggo/gin-swagger&amp;#34;&lt;/span> &lt;span class="c1">// gin-swagger middleware
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nx">swaggerFiles&lt;/span> &lt;span class="s">&amp;#34;github.com/swaggo/files&amp;#34;&lt;/span> &lt;span class="c1">// swagger embed files
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意：在注册路由时，还需要空导入docs。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注册 Swagger 文档路由地址:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/swagger/*any&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ginSwagger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WrapHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">swaggerFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完整代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">swaggerFiles&lt;/span> &lt;span class="s">&amp;#34;github.com/swaggo/files&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ginSwagger&lt;/span> &lt;span class="s">&amp;#34;github.com/swaggo/gin-swagger&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span> &lt;span class="s">&amp;#34;github.com/arlettebrook/learn/docs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Helloworld godoc
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Summary 该操作的简短摘要
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Description 操作行为的详细说明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Tags example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Accept json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Produce json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Success 200 {string} string &amp;#34;Hello World!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Router /example/helloworld [get]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Helloworld&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @title Swagger Example API
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @version 1.0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @schemes http
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @host localhost:8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @BasePath /api/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @tag.name example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @tag.description 示例接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Default&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">v1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/api/v1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/example&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/helloworld&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Helloworld&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/swagger/*any&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ginSwagger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WrapHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">swaggerFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行 &lt;code>go run main.go&lt;/code> 启动服务，访问 &lt;code>http://localhost:8080/swagger/index.html&lt;/code> 即可查看 Swagger UI 交互式文档界面。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger.png"
width="2940"
height="1838"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger_hu50c8be478a0cc503116512d3818232f0_196290_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger_hu50c8be478a0cc503116512d3818232f0_196290_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Swagger UI"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p>
&lt;p>这个本地的 Swagger UI 服务器同样支持交互式操作。&lt;/p>
&lt;p>展开 &lt;code>/example/helloworld&lt;/code> 这个接口，点击 &lt;code>Try it out&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-try-it-out.png"
width="2940"
height="1838"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-try-it-out_hu50c8be478a0cc503116512d3818232f0_250895_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-try-it-out_hu50c8be478a0cc503116512d3818232f0_250895_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Try it out"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>接着，点击 &lt;code>Execute&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-execute.png"
width="2940"
height="1838"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-execute_hu50c8be478a0cc503116512d3818232f0_250672_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-execute_hu50c8be478a0cc503116512d3818232f0_250672_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Execute"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>Swagger UI 将会根据文档的 &lt;code>Base URL&lt;/code> 去请求真正的接口（同时还会给出 cURL 发送请求的命令，方便复制使用），并将响应结果展示出来。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-action.jpg"
width="2910"
height="3180"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-action_hu322d2d6e2c1db2da0ec1bf30df36bb57_679751_480x0_resize_q75_box.jpg 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-action_hu322d2d6e2c1db2da0ec1bf30df36bb57_679751_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Swagger UI"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;p>同时后端服务器能够打印出请求记录：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-helloworld.png"
width="2782"
height="788"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-helloworld_huc999c3ba0617e79974778dde457ebd0f_178928_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/gin-swagger-helloworld_huc999c3ba0617e79974778dde457ebd0f_178928_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Server"
class="gallery-image"
data-flex-grow="353"
data-flex-basis="847px"
>&lt;/p>
&lt;p>与前端对接时，我们只需要将接口文档地址给到前端，前端就可以根据这个 Swagger UI 界面进行接口查阅和调试了，非常方便。&lt;/p>
&lt;h4 id="让-swag-支持多版本-api-文档">
&lt;a href="#%e8%ae%a9-swag-%e6%94%af%e6%8c%81%e5%a4%9a%e7%89%88%e6%9c%ac-api-%e6%96%87%e6%a1%a3" class="header-anchor">#&lt;/a>
让 Swag 支持多版本 API 文档
&lt;/h4>&lt;p>实际工作中，我们的项目会比这个只有一个接口的 demo 复杂得多，同时 API 也可能会支持多版本，比如 &lt;code>/api/v1&lt;/code>、&lt;code>/api/v2&lt;/code>。&lt;/p>
&lt;p>我们可以分别生成 &lt;code>v1&lt;/code>、&lt;code>v2&lt;/code> 两个版本的 API 文档，这样可以将不同版本的接口分开展示，更加清晰。&lt;/p>
&lt;p>命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">swag init -g internal/api/controller/v1/docs.go --exclude internal/api/controller/v2 --instanceName v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">swag init -g internal/api/controller/v2/docs.go --exclude internal/api/controller/v1 --instanceName v2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 &lt;code>-g&lt;/code> 参数指明 API 通用注释信息所在的 Go 源文件路径，大型项目中为了保持代码架构整洁，这些注释应该独立于一个文件&lt;code>docs.go&lt;/code>，而不是直接写在 &lt;code>main.go&lt;/code> 中。&lt;/p>
&lt;p>&lt;code>--exclude&lt;/code> 参数指明生成 Swagger 文档时，需要排除的目录。可以发现，在生成 &lt;code>v1&lt;/code> 版本接口文档时，我排除了 &lt;code>v2&lt;/code> 接口目录，在生成 &lt;code>v2&lt;/code> 版本接口文档时，排除了 &lt;code>v1&lt;/code> 接口目录，这样就实现了多版本接口分离。&lt;/p>
&lt;p>别忘了注册路由：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/swagger/v1/*any&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ginSwagger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WrapHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">swaggerFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewHandler&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">ginSwagger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">InstanceName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/swagger/v1/*any&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ginSwagger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WrapHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">swaggerFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewHandler&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">ginSwagger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">InstanceName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;v1&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>技巧：每次修改swagger注释，都需要重新运行&lt;code>swag init&lt;/code>命令，并且这里的命令还很复杂：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>我们可以使用make命令，帮我们简化构建swagger文档命令。Makefile文件内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">run&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">run&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">swag&lt;/span>-&lt;span class="n">fmt&lt;/span> &lt;span class="n">swag&lt;/span>-&lt;span class="n">init&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go run main.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">swag&lt;/span>-&lt;span class="n">fmt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">swag-fmt&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag fmt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">swag&lt;/span>-&lt;span class="n">init&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">swag-init&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">swag&lt;/span>-&lt;span class="n">fmt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag init -g internal/api/controller/v1/docs.go --exclude internal/api/controller/v2 --instanceName v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> swag init -g internal/api/controller/v2/docs.go --exclude internal/api/controller/v1 --instanceName v2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在项目根目录下运行&lt;code>make&lt;/code>命令即可自动运行格式化、生成swaggerr文档和启动gin框架。不支持热重载，修改源码之后需要重新运行&lt;code>make&lt;/code>命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>air&lt;/code>热重载，自动运行swag构建命令：&lt;/p>
&lt;p>默认情况下air并不支持自动运行swag命令，需要修改默认配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ air init &lt;span class="c1"># 生成默认配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改默认配置文件内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">pre_cmd = [&amp;#34;swag fmt&amp;#34;, &amp;#34;swag init -g internal/api/controller/v1/docs.go --exclude internal/api/controller/v2 --instanceName v1&amp;#34;, &amp;#34;swag init -g internal/api/controller/v2/docs.go --exclude internal/api/controller/v1 --instanceName v2&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">exclude_dir = [&amp;#34;assets&amp;#34;, &amp;#34;tmp&amp;#34;, &amp;#34;vendor&amp;#34;, &amp;#34;testdata&amp;#34;,&amp;#34;docs&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：别忘记忽略&lt;code>docs&lt;/code>目录，防止热重载死循环。&lt;/p>
&lt;p>之后我们可以直接运行&lt;code>air&lt;/code>命令即可自动构建swagger文档以及启动gin框架。并且使用&lt;code>air&lt;/code>命令启动之后，每次修改注释和代码，都不需要重新启动程序。air当检测到文件修改时会自动重载，运行构建命令。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/1599771213037600" target="_blank" rel="noopener"
>廖雪峰Makefile教程&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.zhaixue.cc/makefile/makefile-ival.html" target="_blank" rel="noopener"
>Makefile 简明教程&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://arlettebrook.github.io/p/gin-introduction/#air%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8" target="_blank" rel="noopener"
>air基本使用&lt;/a>&lt;/li>
&lt;li>完整示例代码：&lt;a class="link" href="https://github.com/jianghushinian/swag-example" target="_blank" rel="noopener"
>swag-example&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="swag-使用建议">
&lt;a href="#swag-%e4%bd%bf%e7%94%a8%e5%bb%ba%e8%ae%ae" class="header-anchor">#&lt;/a>
Swag 使用建议
&lt;/h4>&lt;p>在前文介绍的 swag 使用流程中，不知道你有没有注意到，我们是先编写的代码，然后再生成的 Swagger 文档，最后将这份文档交给前端使用。&lt;/p>
&lt;p>这显然违背了「文档先行」的思想，实际工作中，我们更多的时候是先跟前端约定好接口，然后后端提供 Swagger 文档供前端使用，最后才是前后端编码阶段。&lt;/p>
&lt;p>要想解决这个问题，最直接的解决方案是不使用 swag 工具，而是直接使用 Swagger Editor 这种编辑器手写 Swagger 文档，这样就能实现文档先行了。&lt;/p>
&lt;p>但这又违背了 OpenAPI 给出的「最佳实践」，推荐自动生成 Swagger 文档，而非手动编写。&lt;/p>
&lt;p>我自己的解决方案是，依旧选择使用 swag 工具，不过在编写代码时，先写接口的框架代码，而不写具体的业务逻辑，这样就能够先通过接口注释生成 Swagger 文档，供前端使用，然后再编写业务代码。&lt;/p>
&lt;p>另外，较为遗憾的是，目前（2024-5-23） swag 生成的文档是 OpenAPI 2.0 版本，并不能直接生成 OpenAPI 3.0 版本，如果你想使用 OpenAPI 3.0 版本的文档，一个变通的方法是使用工具将 OpenAPI 2.0 文档转换成 OpenAPI 3.0，如前文提到的 Swagger Editor 就支持此操作。&lt;/p>
&lt;h3 id="使用-redoc-风格的-api-文档">
&lt;a href="#%e4%bd%bf%e7%94%a8-redoc-%e9%a3%8e%e6%a0%bc%e7%9a%84-api-%e6%96%87%e6%a1%a3" class="header-anchor">#&lt;/a>
使用 ReDoc 风格的 API 文档
&lt;/h3>&lt;p>也许相较于 Swagger UI 多年不变的界面风格，你更喜欢 ReDoc 风格的 UI，那么 &lt;a class="link" href="https://github.com/mvrilo/go-redoc" target="_blank" rel="noopener"
>go-redoc&lt;/a> 是一个比较不错的选择。&lt;/p>
&lt;p>在 gin 中使用 go-redoc 非常简单，只需要将如下套路代码加入到我们的 &lt;code>main.go&lt;/code> 文件中即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/mvrilo/go-redoc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ginRedoc&lt;/span> &lt;span class="s">&amp;#34;github.com/mvrilo/go-redoc/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">doc&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">redoc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Redoc&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Example API&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Description&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Example API Description&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">SpecFile&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;./openapi.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// &amp;#34;./openapi.yaml&amp;#34; OpenAPI文档路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">SpecPath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;/openapi.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// &amp;#34;/openapi.yaml&amp;#34; OpenAPI文档资源路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">DocsPath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;/docs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 文档访问路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ginRedoc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">doc&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>还有别忘了添加依赖：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="k">go&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">mvrilo&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">redoc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="k">go&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">u&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">mvrilo&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">redoc&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">gin&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在完整代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/mvrilo/go-redoc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ginRedoc&lt;/span> &lt;span class="s">&amp;#34;github.com/mvrilo/go-redoc/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">swaggerFiles&lt;/span> &lt;span class="s">&amp;#34;github.com/swaggo/files&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ginSwagger&lt;/span> &lt;span class="s">&amp;#34;github.com/swaggo/gin-swagger&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_&lt;/span> &lt;span class="s">&amp;#34;github.com/arlettebrook/learn/docs&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Helloworld godoc
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Summary 该操作的简短摘要
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Description 操作行为的详细说明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Tags example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Accept json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Produce json
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Success 200 {string} string &amp;#34;Hello World!&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @Router /example/helloworld [get]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Helloworld&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">JSON&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusOK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @title Swagger Example API
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @version v1.0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @schemes http
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @host localhost:8080
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @BasePath /api/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @tag.name example
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// @tag.description 示例接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Default&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">doc&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">redoc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Redoc&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ReDoc Example API&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Description&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;ReDoc Example API Description&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">SpecFile&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;./docs/swagger.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">SpecPath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;/swagger.json&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">DocsPath&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;/redoc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ginRedoc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">doc&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">v1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/api/v1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/example&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">eg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/helloworld&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Helloworld&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/swagger/v1/*any&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ginSwagger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WrapHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">swaggerFiles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//r.GET(&amp;#34;/swagger/v2/*any&amp;#34;, ginSwagger.WrapHandler(swaggerFiles.Handler, ginSwagger.InstanceName(&amp;#34;v1&amp;#34;)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;localhost:8080&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行 &lt;code>go run main.go&lt;/code> 启动服务，访问&lt;a class="link" href="http://localhost:8080/redoc" target="_blank" rel="noopener"
>http://localhost:8080/redoc&lt;/a>即可查看 Redoc UI。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/redoc.png"
width="2940"
height="1838"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/redoc_hu50c8be478a0cc503116512d3818232f0_235710_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/redoc_hu50c8be478a0cc503116512d3818232f0_235710_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ReDoc"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>不过，相较于 Swagger UI，Redoc UI 有个弊端是不能实现交互式操作，如果仅以此作为文档查阅工具，没有交互式操作的需求，那么还是比较推荐使用的。&lt;/p>
&lt;hr>
&lt;h2 id="更先进的-api-工具">
&lt;a href="#%e6%9b%b4%e5%85%88%e8%bf%9b%e7%9a%84-api-%e5%b7%a5%e5%85%b7" class="header-anchor">#&lt;/a>
更先进的 API 工具
&lt;/h2>&lt;p>除了 OpenAPI.Tools 推荐的开源工具，社区中其实还有很多其他优秀工具值得尝试使用，比如我这里要推荐的一款国产工具 &lt;a class="link" href="https://www.apifox.com/" target="_blank" rel="noopener"
>Apifox&lt;/a>，官方将其定义为 Apifox = Postman + Swagger + Mock + JMeter，集 API 设计/开发/测试 于一身。&lt;/p>
&lt;p>Apifox 可谓一站式图形化工具，其功能非常强大，就像前文提到的 APIGit 同时具备了编辑器和 Mock 服务器的功能，Apifox 有过之而无不及。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/apifox.png"
width="2600"
height="1646"
srcset="https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/apifox_hue3e0bd39a9272ba90dc255573fbc4cc5_383072_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/openapi-and-swagger-introduction/index.assets/apifox_hue3e0bd39a9272ba90dc255573fbc4cc5_383072_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Apifox"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="379px"
>&lt;/p>
&lt;p>图形化工具上手难度不大，加上 Apifox 本身由国内开发，非常容易上手，所以本文也就不深入介绍了，你可以观看官方教程 &lt;a class="link" href="https://www.apifox.cn/help/#_21-%e5%88%86%e9%92%9f%e5%ad%a6%e4%bc%9a-apifox-%f0%9f%91%8d" target="_blank" rel="noopener"
>21 分钟学会 Apifox&lt;/a> 来学习使用。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.apipost.cn/" target="_blank" rel="noopener"
>Apipost&lt;/a>也是跟它差不多的接口测试工具，不过我更喜欢apipost，因为它不登录的情况下，离线可以使用。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>OpenAPI 官网： &lt;a class="link" href="https://www.openapis.org/" target="_blank" rel="noopener"
>https://www.openapis.org/&lt;/a>&lt;/li>
&lt;li>OpenAPI 入门： &lt;a class="link" href="https://oai.github.io/Documentation/" target="_blank" rel="noopener"
>https://oai.github.io/Documentation/&lt;/a>&lt;/li>
&lt;li>OpenAPI 规范： &lt;a class="link" href="https://spec.openapis.org/oas/latest.html" target="_blank" rel="noopener"
>https://spec.openapis.org/oas/latest.html&lt;/a>&lt;/li>
&lt;li>OpenAPI 规范中文版： &lt;a class="link" href="https://openapi.apifox.cn/" target="_blank" rel="noopener"
>https://openapi.apifox.cn/&lt;/a>&lt;/li>
&lt;li>OpenAPI 规范思维导图版： &lt;a class="link" href="https://openapi-map.apihandyman.io/" target="_blank" rel="noopener"
>https://openapi-map.apihandyman.io/&lt;/a>&lt;/li>
&lt;li>OpenAPI.Tools： &lt;a class="link" href="https://openapi.tools/" target="_blank" rel="noopener"
>https://openapi.tools/&lt;/a>&lt;/li>
&lt;li>Swagger 官网： &lt;a class="link" href="https://swagger.io/" target="_blank" rel="noopener"
>https://swagger.io/&lt;/a>&lt;/li>
&lt;li>swag： &lt;a class="link" href="https://github.com/swaggo/swag" target="_blank" rel="noopener"
>https://github.com/swaggo/swag&lt;/a>&lt;/li>
&lt;li>swag-example： &lt;a class="link" href="https://github.com/jianghushinian/swag-example" target="_blank" rel="noopener"
>https://github.com/jianghushinian/swag-example&lt;/a>&lt;/li>
&lt;li>go-redoc： &lt;a class="link" href="https://github.com/mvrilo/go-redoc" target="_blank" rel="noopener"
>https://github.com/mvrilo/go-redoc&lt;/a>&lt;/li>
&lt;li>原文：&lt;a class="link" href="https://jianghushinian.cn/2023/02/12/build-api-documentation-using-openapi/" target="_blank" rel="noopener"
>使用 OpenAPI 构建 API 文档&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Linux Common Commands</title><link>https://arlettebrook.github.io/p/linux-common-commands/</link><pubDate>Wed, 08 May 2024 19:24:26 +0800</pubDate><guid>https://arlettebrook.github.io/p/linux-common-commands/</guid><description>&lt;blockquote>
&lt;p>Linux常用命令有很多，本文不会逐个介绍。以下命令是我在后期使用中遇到的，算是我对Linux常用命令的补充、回顾、总结。本篇文章阅读需要一定的Linux基础。更多常见命令可参考：&lt;a class="link" href="https://wiki.deepin.org/zh/04_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98FAQ/600%E6%9D%A1Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93" target="_blank" rel="noopener"
>600条Linux命令总结&lt;/a>。&lt;/p>
&lt;p>&lt;strong>持续更新中&amp;hellip;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="ln">
&lt;a href="#ln" class="header-anchor">#&lt;/a>
ln
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>ln&lt;/code>命令在Linux系统中用于&lt;strong>创建文件链接&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>Linux中文件链接的方式有两种：
&lt;ul>
&lt;li>&lt;strong>符号链接&lt;/strong>（也称为软链接Symbolic Link）：包含了到原文件的路径信息，相当于一个指向原文件的&lt;strong>快捷方式&lt;/strong>。
&lt;ul>
&lt;li>符号链接有自己的文件属性及权限等。&lt;/li>
&lt;li>可对不存在的文件或目录创建符号链接。&lt;/li>
&lt;li>符号链接可交叉文件系统，即可以在不同的文件系统之间创建。&lt;/li>
&lt;li>删除符号链接并不影响被指向的文件，但若被指向的原文件被删除，则相关符号链接被称为死链接（dangling link）。若被指向的文件重新被创建，死链接可恢复为正常的符号链接。&lt;/li>
&lt;li>符号链接文件的大小是其指向的文件的路径字符串的字节数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>硬链接&lt;/strong>：硬链接本质上是给一个文件取一个新的名称，原文件和硬链接在物理上仍然是同一个文件。它们共享相同的inode（索引节点）和数据块。
&lt;ul>
&lt;li>创建硬链接会在对应的目录中增加额外的记录项以引用文件。&lt;/li>
&lt;li>原文件和硬链接文件对应于同一文件系统上的一个物理文件。&lt;/li>
&lt;li>创建硬链接时原文件的连接数（i_nlink）会递增。即&lt;strong>硬链接数&lt;/strong>递增。&lt;/li>
&lt;li>删除文件时，&lt;code>rm&lt;/code>命令会递减计数的链接数。文件要是存在，至少有一个链接数。当链接数为零时，该文件才会被真正删除。&lt;/li>
&lt;li>硬链接不能跨域驱动器或分区，也不支持对目录创建硬链接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>总结来说，符号链接（软链接）和硬链接的主要区别在于：
&lt;ul>
&lt;li>符号链接是一个独立的文件，它包含了到原文件的路径信息（&lt;strong>快捷方式&lt;/strong>）；而硬链接则与原文件共享相同的inode和数据块（&lt;strong>文件别名&lt;/strong>）。&lt;/li>
&lt;li>符号链接可以&lt;strong>跨文件系统&lt;/strong>，并且可以对不存在的文件或目录创建；而硬链接则&lt;strong>不能跨域驱动器或分区&lt;/strong>，&lt;strong>也不能对目录创建&lt;/strong>。&lt;/li>
&lt;li>删除符号链接不影响原文件，但删除原文件会使符号链接成为死链接；而删除硬链接文件时，只有当所有硬链接都被删除且原文件的链接数为零时，文件才会被真正删除。即硬链接数为0，文件才真正被删除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这个命令允许你在不同的位置为同一个文件或目录建立同步的链接，从而避免了在多个位置重复存储相同的文件内容，&lt;strong>节省了磁盘空间&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ln&lt;/code>命令的基本语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ln &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;源文件或目录&amp;gt; &amp;lt;链接文件或目录&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>常用选项包括：
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：创建符号链接（软链接）。这会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，而是保存了原始文件的路径。（创建快捷方式）
&lt;ul>
&lt;li>不使用&lt;code>-s&lt;/code>选项时创建硬链接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-f&lt;/code>：强制执行，如果链接文件已存在则覆盖。&lt;/li>
&lt;li>&lt;code>-v&lt;/code>：显示详细的输出信息。&lt;/li>
&lt;li>&lt;code>--help&lt;/code>：查看帮助文档。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>理解记忆：ln可以理解为link的缩写，s可以理解为soft软的意思。&lt;/li>
&lt;li>注意：源文件一般用绝对路径，相对会出现死链接情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>简单介绍一些&lt;code>ls -lh&lt;/code>输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:15 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># l显示详细信息，h文件大小用人类可读懂的方式显示。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw- r-- r--
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-开头表示文件，d表示目录，l表示链接，三位为一组用rwx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx r-x r-x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前用户权限 用户所属组权限 其他用户权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">数字1表示硬链接数，理解为别名，别名为0，文件才会被删除。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有多少种方式可以访问该文件或目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 文件一般为1：绝对路径
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 目录只有一层一般为2：绝对和cd .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2层为3：绝对、cd . 、cd ..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：拥有者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：所在组，没指定默认同名。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5月 &lt;span class="m">8&lt;/span> 22:49 文件最后修改日期时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">最后：文件或目录名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有箭头表示软连接，没有硬链接。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>演示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -sv ~/test/abc.txt ./demo/soft
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/soft’ -&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -v ~/test/abc.txt ./demo/hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/hard’ &lt;span class="o">=&lt;/span>&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">42&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ &lt;span class="nb">cd&lt;/span> demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost demo $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 soft -&amp;gt; /root/test/abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">2&lt;/span> root root &lt;span class="m">6&lt;/span> May &lt;span class="m">8&lt;/span> 23:15 &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost demo $
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：测试环境是在Linux中，&lt;code>ln&lt;/code>命令并不适用于windows环境。创建的文件链接无效。&lt;/p>
&lt;hr>
&lt;h2 id="curl">
&lt;a href="#curl" class="header-anchor">#&lt;/a>
curl
&lt;/h2>&lt;p>&lt;code>curl&lt;/code>命令是一个利用URL规则在命令行下工作的文件传输工具，它支持文件的上传和下载，因此被视为综合传输工具，但传统上习惯称其为下载工具。curl支持包括HTTP、HTTPS、FTP等众多协议，并具备多种特性，如POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等。这些特性使得curl在处理网页处理流程和数据检索自动化方面非常有用。&lt;/p>
&lt;p>总结：用于发送网络请求，可以下载和上传文件。而&lt;code>wget&lt;/code>只能用于下载文件，但&lt;a class="link" href="#wget" >wget&lt;/a>下载文件的功能比&lt;code>curl&lt;/code>强大。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>linux系统：根据你的Linux发行版，使用相应的包管理器来安装curl。
&lt;ul>
&lt;li>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install curl&lt;/code>&lt;/li>
&lt;li>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install curl&lt;/code>&lt;/li>
&lt;li>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S curl&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>windows系统：
&lt;ol>
&lt;li>&lt;a class="link" href="https://curl.se/download.html" target="_blank" rel="noopener"
>官网&lt;/a>下载对应版本，添加一个CURL_HOME环境变量名，指向的是curl.exe文件所在路径。并将其添加到path环境变量中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.mingw-w64.org/downloads/#mingw-builds" target="_blank" rel="noopener"
>Mingw&lt;/a>自带curl，Mingw也可以用msys2来安装。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>MacOS系统自带。&lt;/li>
&lt;/ol>
&lt;p>基本使用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>curl命令的基本语法格式为：&lt;code>curl [选项] URL&lt;/code>。其中，URL是要请求的目标地址，而选项则用于指定各种参数和功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-X&lt;/code> 或 &lt;code>--request&lt;/code>：用于指定HTTP请求方法，如GET、POST、PUT、DELETE等。&lt;/p>
&lt;ul>
&lt;li>默认发送get请求。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -X POST http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-H&lt;/code> 或 &lt;code>--header&lt;/code>: 添加自定义的 HTTP 头信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-d&lt;/code> 或 &lt;code>--data&lt;/code>: 发送 POST 请求时，将数据作为请求体发送。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s2">&amp;#34;param1=value1&amp;amp;param2=value2&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 JSON 数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s1">&amp;#39;{&amp;#34;key1&amp;#34;:&amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;value2&amp;#34;}&amp;#39;&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-F&lt;/code> 或 &lt;code>--form&lt;/code>: 用于发送 multipart/form-data 格式的数据，通常用于文件上传。&lt;/p>
&lt;ul>
&lt;li>参数&lt;code>&amp;quot;文件名=@path&amp;quot;&lt;/code>,还可以指定类型&lt;code>&amp;quot;文件名=@path;type=MIME&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -F &lt;span class="s2">&amp;#34;file=@filename.txt&amp;#34;&lt;/span> http://example.com/upload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-o&lt;/code> 或 &lt;code>--output&lt;/code>: 将响应输出到文件，而不是显示在终端上。默认当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -o output.html http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>-O&lt;/code>: 将响应保存到本地文件，文件名与远程文件的文件名相同。在当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -O http://example.com/file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-s&lt;/code> 或 &lt;code>--silent&lt;/code>: 静默模式，不显示进度或错误消息。常用S组合使用，显示错误消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v&lt;/code> 或 &lt;code>--verbose&lt;/code>: 详细模式，显示详细的通信过程，包括请求头和响应头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i&lt;/code>: 显示响应头信息以及返回的内容 body。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-I&lt;/code>: 只显示响应头信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u&lt;/code> 用户名:密码: 指定用户名和密码进行身份验证。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -u username:password http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-L&lt;/code>: 跟随重定向。当 HTTP 响应是一个重定向时，curl 会自动获取重定向后的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-k&lt;/code> 或 &lt;code>--insecure&lt;/code>: 允许连接到不安全的 SSL 站点，即忽略 SSL 证书验证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>常用组合：&lt;code>curl -fsSL&lt;/code>，默认get请求。&lt;/p>
&lt;ul>
&lt;li>f不显示客户端错误。&lt;/li>
&lt;li>s不显示进度、错误消息。配合S显示错误消息&lt;/li>
&lt;li>L接受重定向。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="wget">
&lt;a href="#wget" class="header-anchor">#&lt;/a>
wget
&lt;/h2>&lt;p>&lt;code>wget&lt;/code> 是一个在 Unix 和 Linux 系统上常用的命令行工具，用于从网络上下载文件。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>支持断点续传：如果下载过程中连接中断，可以在之后从断点处继续下载。&lt;/li>
&lt;li>支持递归下载：可以下载网页上的所有链接文件，并重建目录结构。&lt;/li>
&lt;li>强大的重试机制：在下载过程中如果网络出现问题，&lt;code>wget&lt;/code> 会自动重试，直到下载完成。&lt;/li>
&lt;li>后台执行：支持在后台运行下载任务，用户无需保持登录状态。&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="#curl" >curl&lt;/a>没有以上优点，但它支持更多的协议。wget只支持HTTP、HTTPS和FTP协议。curl使用更广泛。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>linux系统：根据你的Linux发行版，使用相应的包管理器来安装wget。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S wget&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>windows系统：&lt;/p>
&lt;ul>
&lt;li>官网&lt;a class="link" href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener"
>GNU Wget&lt;/a>下载安装或其他可靠的软件下载，然后路径添加到环境变量path中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>macos系统：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于macOS，使用&lt;a class="link" href="https://github.com/Homebrew/brew" target="_blank" rel="noopener"
>Homebrew&lt;/a>包管理器来安装wget。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">brew&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="nx">wget&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>基本使用：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>-b, &amp;ndash;background&lt;/strong>：在后台执行下载任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-c, &amp;ndash;continue&lt;/strong>：继续下载之前未完成的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-r, &amp;ndash;recursive&lt;/strong>：递归下载，下载指定 URL 中的所有链接。可以下载整个目录及其子目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -r http://www.example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：在使用递归下载时，建议加上 &lt;code>-np&lt;/code> 和 &lt;code>-nH&lt;/code> 选项，以避免下载过多的不必要文件和创建复杂的目录结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-np, &amp;ndash;no-parent&lt;/strong>：不递归下载上级目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nH, &amp;ndash;no-host-directories&lt;/strong>：不创建主机目录，将文件保存在当前目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-P DIRECTORY, &amp;ndash;directory-prefix=DIRECTORY&lt;/strong>：将下载的文件保存到指定的目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -P /tmp http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-O FILE, &amp;ndash;output-document=FILE&lt;/strong>：将下载的文件保存为指定的文件名。如果存在会覆盖。&lt;code>-N&lt;/code>（时间戳检查），如果旧会覆盖，反之不会。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -O new_file.zip http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nc, &amp;ndash;no-clobber&lt;/strong>：如果文件已经存在，不覆盖原有文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nv, &amp;ndash;no-verbose&lt;/strong>：下载时只显示更新和出错信息，不显示详细的执行过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-v, &amp;ndash;verbose&lt;/strong>：详细模式，增加输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-q, &amp;ndash;quiet&lt;/strong>：静默模式，减少输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;no-check-certificate&lt;/strong>：下载 HTTPS 网站资源时，跳过证书检测过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-t NUM 或 &amp;ndash;tries=NUM&lt;/strong>：指定最大尝试次数。如果下载失败，wget 会尝试重新下载指定的次数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-U AGENT 或 &amp;ndash;user-agent=AGENT&lt;/strong>：指定 User-Agent 字符串。这可以用来伪装为不同的浏览器或客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-N 或 &amp;ndash;timestamping&lt;/strong>：如果本地文件存在且时间戳较新，则不重新下载文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-T SEC 或 &amp;ndash;timeout=SEC&lt;/strong>：指定超时时间（以秒为单位）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-A TYPES 或 &amp;ndash;accept=TYPES&lt;/strong>：指定下载文件的类型。例如，&lt;code>-A jpg,png,gif&lt;/code> 表示只下载 jpg、png 和 gif 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-d 或 &amp;ndash;debug&lt;/strong>：打印调试输出。这会在标准错误上输出大量信息，通常用于诊断问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>常用组合：&lt;/p>
&lt;p>&lt;code>wget -O-&lt;/code>:O表示指定文件名，后面-表示没有指定文件名，内容将输出到TTY。&lt;/p>
&lt;p>通常配合&lt;code>bash -c &amp;quot;$(wget -O- url)&amp;quot;&lt;/code>运行脚本。url为脚本地址。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>其中$()表示在当前TTY中运行子命令，下载脚本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[bash -c](#bash -c)表示将下载的字符串做为命令执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="bash--c">
&lt;a href="#bash--c" class="header-anchor">#&lt;/a>
bash -c
&lt;/h3>&lt;p>&lt;code>bash -c&lt;/code> 命令用于在 Bash shell 中执行一个字符串作为命令。&lt;/p>
&lt;p>基本语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">bash -c &lt;span class="s1">&amp;#39;command_string&amp;#39;&lt;/span> &lt;span class="o">[&lt;/span>arg0 &lt;span class="o">[&lt;/span>arg1 ...&lt;span class="o">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>command_string&lt;/code> 是你想要执行的命令字符串。&lt;/li>
&lt;li>&lt;code>arg0&lt;/code>、&lt;code>arg1&lt;/code> 等是可选的，它们会被用作 &lt;code>$0&lt;/code>、&lt;code>$1&lt;/code>、&lt;code>$2&lt;/code> 等 shell 变量在 &lt;code>command_string&lt;/code> 内部。
&lt;ul>
&lt;li>注意这里的$0并不是脚本名或终端名，而是第一个参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>字符串可以用&lt;code>&amp;quot;&amp;quot;/''&lt;/code>，区别在于双引号会转义特殊字符，单引号不会。执行脚本时建议双引号。&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo Hello, World!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello, World!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo $0 $1&amp;#39;&lt;/span> bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bash -c &amp;#34;$(wget -O- https://gist.githubusercontent.com/lss233/2fdd75be3f0724739368d0dcd9d1367d/raw/62a790da4a391af096074b3355c2c2b7ecab3c28/chatgpt-mirai-installer-gocqhttp.sh)&amp;#34; chatgpt-qq-bot安装脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr></description></item><item><title>Open Source License Introduction</title><link>https://arlettebrook.github.io/p/open-source-license-introduction/</link><pubDate>Mon, 06 May 2024 23:22:29 +0800</pubDate><guid>https://arlettebrook.github.io/p/open-source-license-introduction/</guid><description>&lt;hr>
&lt;blockquote>
&lt;p>开源协议(开源许可证)是每一个想要做开源软件的开发者都需要了解的，即使你不想做开源软件，那么当你使用他人开源的软件时也需要了解一些开源协议相关的内容，这样能够尽量避免一些不必要的麻烦。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="什么是开源">
&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%bc%80%e6%ba%90" class="header-anchor">#&lt;/a>
什么是开源
&lt;/h2>&lt;p>开源即开放源代码，是 &lt;a class="link" href="https://opensource.org/" target="_blank" rel="noopener"
>OSI (Open Source Initiative)&lt;/a> 这个组织提出来的。而被开源的软件，我们通常称为开源软件。你可能还见到过 &lt;code>Free Software&lt;/code> 一词，它代表 &lt;code>自由软件&lt;/code> 而非 &lt;code>免费软件&lt;/code>，是开源软件的前身。&lt;/p>
&lt;p>开源软件 = 开放源代码 + 开源协议，一份没有添加开源协议的开源代码，并不是真正的开源软件，也就不能随意使用。&lt;/p>
&lt;blockquote>
&lt;p>注意：如果你在 GitHub 上创建了一个没有开源协议的公共代码仓库，其他用户仍然有权查看并为其创建分支，这是由 GitHub 的&lt;a class="link" href="https://docs.github.com/zh/site-policy/github-terms/github-terms-of-service#4-license-grant-to-us" target="_blank" rel="noopener"
>服务条款&lt;/a>决定的。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="开源许可证">
&lt;a href="#%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81" class="header-anchor">#&lt;/a>
开源许可证
&lt;/h2>&lt;p>开源协议是指开源软件所携带的一份声明协议，这份协议也叫开源许可证。开源许可证声明了开源协议的内容，规定了&lt;strong>原作者和使用者的权利以及义务&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>开源许可证是开源软件生态系统的基础，可以促进软件的协同开发&lt;/strong>。&lt;/p>
&lt;p>开源许可证是具有法律效力的，并且需要得到 OSI 这个组织的认证，目前 OSI 共计认证了 &lt;a class="link" href="https://opensource.org/licenses/category" target="_blank" rel="noopener"
>110+&lt;/a> 个开源许可证，这些被认证的开源许可证都必须遵循 &lt;a class="link" href="https://opensource.org/osd" target="_blank" rel="noopener"
>OSD (Open Source Definition)&lt;/a> 规则。&lt;/p>
&lt;p>虽然开源许可证非常多，但常用的就那么几种。常见的开源许可证主要有 Apache、MIT、BSD、GPL、LGPL、MPL、SSPL 等。&lt;/p>
&lt;p>开源许可证分成两大类：宽松型许可证（Permissive Licenses）、著作权型许可证（反版权许可证）（Copyleft Licenses）。&lt;/p>
&lt;p>​ 宽松型许可证（Permissive Licenses）是一种对软件的使用、修改、传播等方式采用最低限制的自由软件许可协议条款类型。这种类型的软件许可协议将不保证原作品的派生作品会继续保持与原作品完全相同的相关限制条件，从而为原作品的自由使用、修改和传播等提供更大的空间。&lt;/p>
&lt;p>​ 著作权型许可证（Copyleft Licenses）是经原作者许可在有限空间内的自由使用、修改和传播，且不得违背原作品的限制条款。如果一款软件使用 Copyleft 类型许可协议规定软件不得用于&lt;strong>商业用途&lt;/strong>，且不得&lt;strong>闭源&lt;/strong>，那么后续的衍生子软件也必须得遵循该条款。&lt;/p>
&lt;p>&lt;strong>两者最大的差别在于&lt;/strong>：在软件被修改并再发行时， Copyleft License 仍然强制要求公开源代码（衍生软件需要开源），而 Permissive licence 不要求公开源代码（衍生软件可以变为专有软件）。&lt;/p>
&lt;p>其中，Apache、MIT、BSD 都是宽松型许可证，GPL 是典型的著作权型（copyleft ）许可证，LGPL、MPL 是弱著作权型（copyleft ）许可证。SSPL 则是近年来 MongoDB 创建的一个新许可证，存在较大争议，开放源代码促进会 OSI 甚至认为 SSPL 就不是开源许可协议。&lt;/p>
&lt;p>此外，还有一类是 Creative Commons（CC）知识共享协议。严格意义上说该协议并不能说是真正的开源协议，它们大多是被使用于设计类的工程上。CC 协议种类繁多，每一种都授权特定的权利。大多数的比较严格的 CC 协议会声明 “署名权，非商业用途，禁止衍生” 条款，这意味着你可以自由的分享这个作品，但你不能改变它和对其收费，而且必须声明作品的归属。这个许可协议非常的有用，它可以让你的作品传播出去，但又可以对作品的使用保留部分或完全的控制。最少限制的 CC 协议类型当属 “署名” 协议，这意味着只要人们能维护你的名誉，他们对你的作品怎么使用都行。&lt;/p>
&lt;p>下面就主要介绍下几种常见开源许可证。&lt;/p>
&lt;h3 id="宽松型许可证permissive-licenses">
&lt;a href="#%e5%ae%bd%e6%9d%be%e5%9e%8b%e8%ae%b8%e5%8f%af%e8%af%81permissive-licenses" class="header-anchor">#&lt;/a>
宽松型许可证（Permissive Licenses）
&lt;/h3>&lt;p>顾名思义，这类开源许可证比较宽松，限制更少。常见宽松开源许可证有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="noopener"
>BSD (2-Clause)&lt;/a> (Berkeley Software Distribution，伯克利软件发行版)&lt;/p>
&lt;p>源代码或二进制形式的重新分发，必须保留原始的许可证声明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/BSD-3-Clause" target="_blank" rel="noopener"
>BSD (3-Clause)&lt;/a>&lt;/p>
&lt;p>在 BSD(2-Clause) 基础上增加了一条，禁止使用原始作者的名字为衍生软件进行促销。&lt;/p>
&lt;p>Go 语言就在使用 BSD (3-Clause) 开源许可证。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener"
>MIT&lt;/a> (Massachusetts Institute of Technology，麻省理工学院许可证)&lt;/p>
&lt;p>免费授予任何人该软件及相关文档的权限，包括但不限于使用、复制、修改、合并、发表、分发、再授权、出售软件的副本。分发软件时，必须保留原始的许可证声明。&lt;/p>
&lt;p>MIT 是最为宽松的开源许可证，所以这也使得它成为最流行的开源许可证，如目前在前端领域非常有名的 Vue.js 就在使用它。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/Apache-2.0" target="_blank" rel="noopener"
>Apache-2.0&lt;/a> (Apache 软件基金会发布的许可证)&lt;/p>
&lt;p>Apache 许可证内容非常多，不过可以简单的总结几点：&lt;/p>
&lt;p>分发软件时，必须保留原始的许可证声明。&lt;/p>
&lt;p>所有修改过的文件，必须加以说明告知用户此文件已被更改。&lt;/p>
&lt;p>没有修改过的文件，不得修改许可证。&lt;/p>
&lt;p>云原生领域著名软件 Kubernetes 使用的正是 Apache-2.0 开源许可证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="著作权型许可证copyleft-licenses">
&lt;a href="#%e8%91%97%e4%bd%9c%e6%9d%83%e5%9e%8b%e8%ae%b8%e5%8f%af%e8%af%81copyleft-licenses" class="header-anchor">#&lt;/a>
著作权型许可证（Copyleft Licenses）
&lt;/h3>&lt;p>Copyleft 一词由 理查德·斯托曼 发明，表示 Copyright (版权) 的反义词。Copyleft 表示不经许可，用户无权复制，商业软件开发人员通过 Copyleft剥夺了用户的自由。Copyright 则表示不经许可，用户有权复制，Copyright使用版权来给予用户自由。&lt;/p>
&lt;p>因此Copyleft 类的许可证要比 Permissive 许可证限制更多。注意：不一定要经过原作者许可。常见 Copyleft 开源许可证有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/gpl-license" target="_blank" rel="noopener"
>GPL&lt;/a> (GNU General Public License)&lt;/p>
&lt;p>GPL 有两个版本，GPL-2.0 和 GPL-3，同 BSD 一样，更高版本会带来更多的限制。GPL 协议内容也非常多，我们最需要关注的一点是：使用了 GPL 协议的开源软件，其衍生软件如果需要分发，就必须开源并且同样要使用此协议。&lt;/p>
&lt;p>由于这条规定的存在，有人甚至把 GPL 协议称为 “GPL 病毒”，因为它具有跟病毒一样的传染性。不过 GPL 仍然是非常流行的开源许可证，比如大名鼎鼎的 Linux 就采用了 GPL 协议。&lt;/p>
&lt;p>GPL 是流行开源许可证中最为严格的，所以对于使用开源软件所衍化的商业化软件就不够友好了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/lgpl-license" target="_blank" rel="noopener"
>LGPL&lt;/a> (GNU Library General Public License)&lt;/p>
&lt;p>算是 GPL 的一个变种，主要为类库使用而设计的开源协议。&lt;/p>
&lt;p>商用软件如果采用类库方式引用使用了 LGPL 协议的开源软件，则可以不用开源。&lt;/p>
&lt;p>如果是修改或衍生软件需要分发，则必须开源并且同样要使用此协议。这点与 GPL 协议一样。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.gnu.org/licenses/agpl-3.0.en.html" target="_blank" rel="noopener"
>AGPL&lt;/a> (GNU Affero General Public License)&lt;/p>
&lt;p>除了 AGPL 许可证，上面介绍的其他许可证的限制条件都是只有在分发时才需要遵守。而 SaaS 软件作为一项云服务则不构成分发，所以可以不遵守这些许可证条款。&lt;/p>
&lt;p>为了解决这些早期发布的许可证对 SaaS 软件无效的尴尬，GNU 又发布了 AGPL 许可证，它规定如果 SaaS 用到的代码是该许可证，那么其云服务的代码也必须开源。&lt;/p>
&lt;p>国产开源时序数据库 TDengine 为了阻止云厂商免费使用其开源版本，就采用了 AGPL 协议。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://opensource.org/licenses/MPL-2.0" target="_blank" rel="noopener"
>MPL-2.0&lt;/a> (Mozilla Public License 2.0，Mozilla 基金会发布的许可证)&lt;/p>
&lt;p>MPL 融合了 BSD 开源许可证 和 GPL 开源许可证 的特性，力争在专有软件和开源软件开发者之间寻求平衡。是比 BSD 更严格，比 GPL 更宽松的开源许可证。&lt;/p>
&lt;p>MPL 允许新增的独立代码文件闭源，但在 MPL 授权下的代码文件必须保持 MPL 授权且开源。这使得 MPL 既不像 MIT 和 BSD 那样允许派生作品完全转化为闭源，也不像 GPL 那样要求所有的派生作品，包括新的组件在内，必须全部保持使用 GPL。&lt;/p>
&lt;p>Mozilla 自家的 Firefox 浏览器就使用此开源许可证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>以上介绍的开源许可证都是较为常见的许可证，另外还有两个不太常见但却值得一提的许可证。&lt;/p>
&lt;p>一个是 &lt;a class="link" href="https://opensource.org/license/unlicense/" target="_blank" rel="noopener"
>Unlicense&lt;/a> 许可证，翻译过来叫「零约束许可证」，可以说是被 OSI 认证的最开放的许可证了。根据名字也能看出来，Unlicense 是一个不包含任何约束条件的许可证，专用于贡献作品到公共领域。任何人都可以对开源软件进行自由复制、修改、发布、使用、编译、出售等，并且可用于任何商业或非商业目的。&lt;/p>
&lt;p>另外，在 OSI 官网公布的开源许可证列表中，还有一个叫「&lt;a class="link" href="https://opensource.org/licenses/MulanPSL-2.0" target="_blank" rel="noopener"
>木兰（Mulan PSL2）&lt;/a>」的开源许可证，它是中国本土唯一获得 OSI 认可的开源许可证。Mulan PSL2 以中英文双语表述，中英文版本具有同等法律效力。如果中英文版本存在任何冲突不一致，以中文版为准。&lt;/p>
&lt;p>「木兰」并不是一个许可证，而是一系列许可证，它包含木兰宽松许可证、木兰公共许可证、木兰开放作品许可协议。其中木兰宽松许可证第 2 版（Mulan PSL2）在 2020 年 2 月 14 日通过 OSI 批准。&lt;/p>
&lt;p>如果你想使用一个中文的开源许可证，那么 Mulan PSL2 目前是你唯一的选择。&lt;/p>
&lt;hr>
&lt;h2 id="使用开源许可证">
&lt;a href="#%e4%bd%bf%e7%94%a8%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81" class="header-anchor">#&lt;/a>
使用开源许可证
&lt;/h2>&lt;p>以 MIT 为例，我们来学习下如何在自己的开源项目中使用开源许可证：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先我们需要在自己的开源项目根目录下创建一个叫 &lt;code>LICENSE&lt;/code> 的文本文件，注意文件名不包含任何后缀。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后去到 OSI 官网找到 &lt;a class="link" href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener"
>MIT&lt;/a> 开源许可证模板，内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">Copyright &amp;lt;YEAR&amp;gt; &amp;lt;COPYRIGHT HOLDER&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files &lt;span class="o">(&lt;/span>the “Software”&lt;span class="o">)&lt;/span>, to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to &lt;span class="k">do&lt;/span> so, subject to the following conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将开源许可证模板内容复制到 &lt;code>LICENSE&lt;/code> 文本文件中，并将第一行 &lt;code>Copyright&lt;/code> 后面的 &lt;code>&amp;lt;YEAR&amp;gt;&lt;/code> 替换为当前年份，将 &lt;code>&amp;lt;COPYRIGHT HOLDER&amp;gt;&lt;/code> 替换为自己的名字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当开放项目源代码时，将此文件一同开放出去即可。如果你使用 GitHub 开放源码，则只需要将此 &lt;code>LICENSE&lt;/code> 加入到 git 管理即可。&lt;/p>
&lt;ol>
&lt;li>如果你是在 GitHub 上新建开源项目，在创建项目界面，有一个 &lt;code>Choose a license&lt;/code> 按钮可以很方便的选择一款开源协议，并且 GitHub 会自动替换许可证模板中的年份、作者等信息。&lt;/li>
&lt;li>另外，我们在开放源代码时，其实可以不使用 OSI 认证的开源许可证，而是选择自己写一份许可证，用来声明版权。这同样是具有法律效力的，不过这份许可证就不能叫做开源许可证了。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="如何选择开源许可证">
&lt;a href="#%e5%a6%82%e4%bd%95%e9%80%89%e6%8b%a9%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81" class="header-anchor">#&lt;/a>
如何选择开源许可证
&lt;/h2>&lt;p>乌克兰程序员 Paul Bagwell 画了&lt;a class="link" href="https://web.archive.org/web/20110503183702/http://pbagwl.com/post/5078147450/description-of-popular-software-licenses" target="_blank" rel="noopener"
>一张图&lt;/a>在网上很是流行，阮一峰老师将其翻译成了&lt;a class="link" href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener"
>中文&lt;/a>，如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/free_software_licenses.png"
width="1600"
height="1000"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/free_software_licenses_hu62a26bd1b1b1f60a529ae1edd7e8dcc3_117471_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/free_software_licenses_hu62a26bd1b1b1f60a529ae1edd7e8dcc3_117471_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="How to choose a license?"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;blockquote>
&lt;p>注：&lt;/p>
&lt;ol>
&lt;li>关于什么是许可证兼容性可以参考：&lt;a class="link" href="https://arlettebrook.github.io/docs/%e5%bc%80%e6%ba%90%e8%ae%b8%e5%8f%af%e8%af%81%e5%85%bc%e5%ae%b9%e6%80%a7%e6%8c%87%e5%8d%97.docx" >《开源许可证兼容性指南.docx》&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>从上图中可以看出，大体上左边的许可证比较严格，右边的许可证较为宽松。此图虽然不够严谨，胜在方便理解。在开源自己的项目时，可以根据此图快速选择出适合自己的开源许可证。&lt;/p>
&lt;p>更多&lt;a class="link" href="https://www.runoob.com/wp-content/uploads/2018/03/61590003177751b9d5bd.jpg" target="_blank" rel="noopener"
>参考&lt;/a>图：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507181208566.png"
width="1670"
height="732"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507181208566_hud15a19a3cadf380d55c54b52e5e9de59_702194_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507181208566_hud15a19a3cadf380d55c54b52e5e9de59_702194_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="How to choose a license?"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="547px"
>&lt;/p>
&lt;hr>
&lt;h2 id="知识共享许可证creative-commonscc">
&lt;a href="#%e7%9f%a5%e8%af%86%e5%85%b1%e4%ba%ab%e8%ae%b8%e5%8f%af%e8%af%81creative-commonscc" class="header-anchor">#&lt;/a>
知识共享许可证Creative Commons（CC）
&lt;/h2>&lt;p>有时候，我们想要开源的并不是一款软件，而是一套开源的教程或者书籍等，此时严格来讲并不能使用上面所介绍的开源许可证。&lt;/p>
&lt;p>在 &lt;a class="link" href="https://opensource.org/osd" target="_blank" rel="noopener"
>OSD 第 2 条&lt;/a>中有规定：开源软件是必须要包含源代码的。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/source-code.png"
width="2220"
height="346"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/source-code_hua833ceec382ec66138cd84613b0a4c66_105215_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/source-code_hua833ceec382ec66138cd84613b0a4c66_105215_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="source-code.png"
class="gallery-image"
data-flex-grow="641"
data-flex-basis="1539px"
>&lt;/p>
&lt;p>也就是说，教程或者书籍等没有源代码，并不能作为开源软件，也就不能使用开源许可证。&lt;/p>
&lt;p>此类项目想要开源，应该使用「知识共享许可证」（creative commons licenses），通常也叫 CC 许可证。&lt;/p>
&lt;p>CC 许可证由 &lt;a class="link" href="https://creativecommons.org/" target="_blank" rel="noopener"
>Creative Commons 基金会&lt;/a>提出，虽然没有得到 OSI 的认可，但他仍具有法律效力，并且应用广泛。&lt;/p>
&lt;p>上面提到的「木兰开放作品许可协议」就是对标知识共享许可证的。同木兰许可证类似，知识共享许可证也是一系列许可证，目前最新的知识共享许可证为 4.0 版本，常见的许可证有 6 种：&lt;/p>
&lt;ul>
&lt;li>CC BY 4.0 (Attribution 4.0 International，署名 4.0 国际)&lt;/li>
&lt;li>CC BY-SA 4.0 (Attribution-ShareAlike 4.0 International，署名-相同方式共享 4.0 国际)&lt;/li>
&lt;li>CC BY-ND 4.0 (Attribution-NoDerivatives 4.0 International，署名-禁止演绎 4.0 国际)&lt;/li>
&lt;li>CC BY-NC 4.0 (Attribution-NonCommercial 4.0 International，署名-非商业性使用 4.0 国际)&lt;/li>
&lt;li>CC BY-NC-SA 4.0 (Attribution-NonCommercial-ShareAlike 4.0 International，署名-非商业性使用-相同方式共享 4.0 国际)&lt;/li>
&lt;li>CC BY-NC-ND 4.0 (Attribution-NonCommercial-NoDerivatives 4.0 International，署名-非商业性使用-禁止演绎 4.0 国际)&lt;/li>
&lt;/ul>
&lt;p>可以发现，CC 许可证命名方式就是它的权利简拼组合。以下是对其中出现的几个名词的解释：&lt;/p>
&lt;p>​ 署名：必须给出原作者的署名，提供指向本许可协议的链接，同时标明是否对原始作品作了修改。&lt;/p>
&lt;p>​ 非商业性使用：您不得将本作品用于商业目的。不得用于盈利性目的。&lt;/p>
&lt;p>​ 相同方式共享：在任何媒介以任何形式复制、发行本作品时必须采用相同的许可证。&lt;/p>
&lt;p>​ 禁止演绎：禁止修改、转换或以本作品为基础进行创作。&lt;/p>
&lt;p>之所以每个许可证后面都带有国际两个字，是因为这系列许可证发布了不同的地域版，不过国际版更为通用。&lt;/p>
&lt;p>需要注意 CC 系列许可证一旦发布，就不可收回，只要你遵守许可协议条款，许可人就无法收回你的这些权利。&lt;/p>
&lt;p>如需使用 CC 许可证，可以参考示例。&lt;/p>
&lt;p>​ 本教程采用&lt;a class="link" href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh" target="_blank" rel="noopener"
>知识共享 署名-相同方式共享 4.0国际协议&lt;/a>。&lt;/p>
&lt;p>​ 博客内容遵循 &lt;a class="link" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"
>知识共享 署名 - 非商业性 - 相同方式共享 4.0 国际协议&lt;/a>&lt;/p>
&lt;p>或参考&lt;a class="link" href="https://creativecommons.org/licenses/" target="_blank" rel="noopener"
>官网&lt;/a>自行组合。&lt;/p>
&lt;p>注意：&lt;strong>协议链接并不必须指定&lt;/strong>，但在使用知识共享协议时，提供协议链接是一个很好的做法，因为它可以帮助其他人方便地访问并了解你所使用的具体协议内容。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507193827642.png"
width="820"
height="138"
srcset="https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507193827642_hu9ccdd84b4ee4ed681b3d8e138c5b0446_19113_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/open-source-license-introduction/open-source-license-introduction.assets/image-20240507193827642_hu9ccdd84b4ee4ed681b3d8e138c5b0446_19113_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="cc协议示例"
class="gallery-image"
data-flex-grow="594"
data-flex-basis="1426px"
>&lt;/p>
&lt;hr>
&lt;h2 id="开源案例">
&lt;a href="#%e5%bc%80%e6%ba%90%e6%a1%88%e4%be%8b" class="header-anchor">#&lt;/a>
开源案例
&lt;/h2>&lt;p>介绍完了开源协议，我们再来看一个开源案例：&lt;/p>
&lt;h3 id="中国首例因违反-gpl-协议致侵害计算机软件著作权纠纷">
&lt;a href="#%e4%b8%ad%e5%9b%bd%e9%a6%96%e4%be%8b%e5%9b%a0%e8%bf%9d%e5%8f%8d-gpl-%e5%8d%8f%e8%ae%ae%e8%87%b4%e4%be%b5%e5%ae%b3%e8%ae%a1%e7%ae%97%e6%9c%ba%e8%bd%af%e4%bb%b6%e8%91%97%e4%bd%9c%e6%9d%83%e7%ba%a0%e7%ba%b7" class="header-anchor">#&lt;/a>
中国首例因违反 GPL 协议致侵害计算机软件著作权纠纷
&lt;/h3>&lt;p>2021-06-30 在中国裁判文书网上公布了一则民事判决书，标题为：「济宁市罗盒网络科技有限公司诉被告福建风灵创景科技有限公司(以下简称福建风灵公司)、被告北京风灵创景科技有限公司(以下简称北京风灵公司)、被告深圳市腾讯计算机系统有限公司(以下简称腾讯公司)侵害计算机软件著作权纠纷一审民事判决书」。案件概况如下：&lt;/p>
&lt;p>原告济宁市罗盒网络科技有限公司独立开「罗盒（VirtualApp）」从 2016 年 7 月 8 日的版本开始引入开源协议，起初为 LGPL3.0 协议，从 2016 年 8 月 12 日开始更换为 GPL3.0 协议。2017 年 10 月 29 日开始删除适用 GPL3.0 协议的表述，但英文介绍中仍保留&lt;code>openplatform&lt;/code> 的表述。&lt;/p>
&lt;p>2018 年 9 月，原告调查发现名为「点心桌面」的软件使用了 VirtualApp 的代码，将两个软件源代码进行分析比对，两者间 421 个可比代码中有 308 个代码具有实质相似性，有 27 个代码具有高度相似性，有 78 个代码具有一般相似性。因此，被诉侵权软件与涉案软件构成实质相似。&lt;/p>
&lt;p>经查，被诉「点心桌面」中使用了原告采用 GPL3.0 协议发布的 VirtualApp，被告对此亦予以确认。&lt;/p>
&lt;p>原告申请赔偿 2000 万，最终，法院酌情确定赔偿数额为 50 万元。原告为制止本案侵权行为所支出的合理费用，计算在赔偿损失数额范围之内。&lt;/p>
&lt;p>更多细节可以&lt;a class="link" href="https://arlettebrook.github.io/docs/%e5%ae%81%e5%b8%82%e7%bd%97%e7%9b%92%e7%bd%91%e7%bb%9c%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8%e8%af%89%e8%a2%ab%e5%91%8a%e7%a6%8f%e5%bb%ba%e9%a3%8e%e7%81%b5%e5%88%9b%e6%99%af%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8%e4%bb%a5%e4%b8%8b%e7%ae%80%e7%a7%b0%e7%a6%8f%e5%bb%ba%e9%a3%8e%e7%81%b5%e5%85%ac%e5%8f%b8%e8%a2%ab%e5%91%8a%e5%8c%97%e4%ba%ac%e9%a3%8e%e7%81%b5%e5%88%9b%e6%99%af%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90....docx" >点击下载&lt;/a>查看。&lt;/p>
&lt;p>该案例给开源软件使用者敲响一记警钟，使用开源软件一定要查看并遵循开源许可证。&lt;/p>
&lt;hr>
&lt;h2 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">#&lt;/a>
总结
&lt;/h2>&lt;p>本文带大家一起认识了什么是开源协议，并且还对常用开源协议进行了分析，以及如何使用开源协议。同时讲解了针对书籍等开源作品使用的知识共享许可协议和使用方式。最终分享了一个开源软件纠纷案例，以说明了解开源协议的重要性。&lt;/p>
&lt;p>此文仅为作者本人学习并整理的开源协议相关知识，即不够全面，也不够严谨，不能作为法律依据。希望你能通过本篇文章认识并重视开源协议，学习和书写本篇文章时间有限，难免出现表达不够准确或错误的地方，欢迎批评指正。&lt;/p>
&lt;p>最后，想提醒大家，身为一名开发者，掌握开源协议是有必要的。不过开源协议的内容非常多且专业，想要完全了解也是一项繁重的工作，毕竟这不是我们的专业领域，如果遇到无法确定的问题，可以寻求身边的专业法务帮忙。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>&lt;a class="link" href="https://www.runoob.com/w3cnote/open-source-license.html" target="_blank" rel="noopener"
>各种开源协议介绍&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cn.pingcap.com/blog/introduction-of-open-source-license/" target="_blank" rel="noopener"
>一文看懂开源许可证丨开源知识科普&lt;/a>&lt;/li>
&lt;li>原文：&lt;a class="link" href="https://jianghushinian.cn/2023/01/15/open-source-license-introduction/" target="_blank" rel="noopener"
>开源协议简介&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener"
>如何选择开源许可证？&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Go modules详解</title><link>https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/</link><pubDate>Sun, 28 Apr 2024 10:57:17 +0800</pubDate><guid>https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/</guid><description>&lt;hr>
&lt;h2 id="概述">
&lt;a href="#%e6%a6%82%e8%bf%b0" class="header-anchor">#&lt;/a>
概述
&lt;/h2>&lt;p>大多数语言都有“依赖”、“包”等概念，&lt;code>Go&lt;/code>语言的依赖处理经历了几次变革。&lt;/p>
&lt;p>最早的时候，&lt;code>Go&lt;/code>所依赖的所有的第三方库都放在&lt;code>GOPATH&lt;/code>这个目录下面。从&lt;code>v1.5&lt;/code>开始引入&lt;code>vendor&lt;/code>模式，如果项目目录下有&lt;code>vendor&lt;/code>目录，那么&lt;code>go&lt;/code>工具链会优先使用&lt;code>vendor&lt;/code>内的包进行编译、测试等。&lt;/p>
&lt;p>从&lt;code>v1.11&lt;/code>开始，引入了&lt;code>Go Modules&lt;/code> 作为依赖解决方案，到&lt;code>v1.14&lt;/code>宣布&lt;code>Go Modules&lt;/code>已经可以用于生产环境，到&lt;code>v1.16&lt;/code>版本开始&lt;code>Go Module&lt;/code>默认开启。&lt;/p>
&lt;h3 id="什么是-go-modules">
&lt;a href="#%e4%bb%80%e4%b9%88%e6%98%af-go-modules" class="header-anchor">#&lt;/a>
什么是 Go Modules
&lt;/h3>&lt;p>Go modules 是 Go 语言的依赖解决方案，发布于 Go1.11，成长于 Go1.12，丰富于 Go1.13，正式于 Go1.14 推荐在生产上使用。&lt;/p>
&lt;p>Go Modules使得Go语言开发者能够更方便地管理代码包及其版本，并能够与现有的版本控制工具（如Git、SVN等）集成使用。&lt;/p>
&lt;p>在传统的GOPATH模式中，所有Go代码都必须位于一个全局的GOPATH路径之下，这使得在不同项目中使用不同版本的依赖包变得非常困难。然而，在Go Modules模式下，每个项目都可以独立管理自己的依赖关系，具有更好的兼容性。当使用Go Modules模式后，项目中会自动创建go.mod文件，其中记录了项目所依赖的模块及其版本信息。&lt;strong>go.mod是Go语言项目中的模块文件&lt;/strong>，用于管理项目的依赖关系和版本信息。&lt;/p>
&lt;p>Go Modules也支持语义化版本控制，这意味着开发者可以指定依赖包的版本范围，而不是仅仅依赖最新的版本。这种灵活性有助于确保项目的稳定性和可维护性。&lt;/p>
&lt;p>Go moudles 目前集成在 Go 的工具链中，只要安装了 Go，自然而然也就可以使用 Go moudles 了，而 Go modules 的出现也解决了在 Go1.11 前的几个常见争议问题：&lt;/p>
&lt;ul>
&lt;li>Go 语言长久以来的依赖管理问题。&lt;/li>
&lt;li>“淘汰”现有的 &lt;code>GOPATH&lt;/code> 的使用模式。&lt;/li>
&lt;li>统一社区中的其它的依赖管理工具（提供迁移功能）。&lt;/li>
&lt;/ul>
&lt;p>优势&lt;/p>
&lt;ul>
&lt;li>首先，研发者能够在任何目录下工作，而不仅仅是在GOPATH指定的目录。&lt;/li>
&lt;li>可以安装依赖包的指定版本，而不是只能从master分支安装最新的版本。&lt;/li>
&lt;li>可以导入同一个依赖包的多个版本。当我们老项目使用老版本，新项目使用新版本时会非常有用。&lt;/li>
&lt;li>要有一个能够罗列当前项目所依赖包的列表。这个的好处是当我们发布项目时不用同时发布所依赖的包。Go能够根据该文件自动下载对应的包。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="go-path介绍">
&lt;a href="#go-path%e4%bb%8b%e7%bb%8d" class="header-anchor">#&lt;/a>
GO PATH介绍
&lt;/h2>&lt;p>安装好go开发环境之后，可以运行&lt;code>go env&lt;/code>查看go运行时的环境变量。要修改这些环境变量，可以通过配置环境变量来覆盖默认值(覆盖了就不能通过命令设置)，如临时设置&lt;code>export GO111MODULE=on&lt;/code>。或者通过命令&lt;code>go env -w key=value&lt;/code>，如&lt;code>go env -w GO111MODULE=on&lt;/code>。通过命令修改的环境变量保存在&lt;code>GOENV&lt;/code>这个环境变量指向的文件。&lt;/p>
&lt;p>有两个比较重要的环境变量：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GOROOT&lt;/strong>：Golang 安装目录的路径，包含编译器程序和系统包，也可以放置三方包（不推荐）。新版本已经不需要配置这个环境变量了，安装了go会自动推断出该变量的值。如果安装之后环境变量中没有&lt;code>$GORROOT/bin&lt;/code>,需要手动添加，这样才能直接在命令行中运行go编译程序。&lt;/li>
&lt;li>&lt;strong>GOPATH&lt;/strong>：该工作目录，放置编译后二进制和 import 包时的搜索路径，一般有三个目录: bin、pkg、src。并且该环境变量必须手动设置。
&lt;ul>
&lt;li>bin：用来存放编译后的可执行文件。引入Go modules之后用于存放&lt;code>get install&lt;/code>安装的可执行文件。&lt;/li>
&lt;li>pkg：存储预编译的目标文件，以加快程序的后续编译速度。引入Go modules之后用于存放第三方包。&lt;/li>
&lt;li>src：存储所有.go文件或源代码。在编写 Go 应用程序，程序包和库时，一般会以&lt;code>$GOPATH/src/github.com/foo/bar&lt;/code>的路径进行存放。引入Go modules之后用一般不用，go项目可以放在任意目录中，不在是&lt;code>$GOPATH/src&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>因此在使用 GOPATH 模式下，我们需要将应用代码存放在固定的&lt;code>$GOPATH/src&lt;/code>目录下，并且如果执行go get来拉取外部依赖会自动下载并安装到&lt;code>$GOPATH&lt;/code>目录下。&lt;/p>
&lt;h3 id="gopath模式的弊端">
&lt;a href="#gopath%e6%a8%a1%e5%bc%8f%e7%9a%84%e5%bc%8a%e7%ab%af" class="header-anchor">#&lt;/a>
GOPATH模式的弊端
&lt;/h3>&lt;p>在 GOPATH 的 &lt;code>$GOPATH/src&lt;/code> 下进行 &lt;code>.go&lt;/code> 文件或源代码的存储，我们可以称其为 GOPATH 的模式，这个模式拥有一些弊端。&lt;/p>
&lt;ul>
&lt;li>A. &lt;strong>无版本控制概念&lt;/strong>. 在执行go get的时候，你无法传达任何的版本信息的期望，也就是说你也无法知道自己当前更新的是哪一个版本，也无法通过指定来拉取自己所期望的具体版本。&lt;/li>
&lt;li>B.&lt;strong>无法同步一致第三方版本号&lt;/strong>. 在运行 Go 应用程序的时候，你无法保证其它人与你所期望依赖的第三方库是相同的版本，也就是说在项目依赖库的管理上，你无法保证所有人的依赖版本都一致。&lt;/li>
&lt;li>C.&lt;strong>无法指定当前项目引用的第三方版本号&lt;/strong>. 你没办法处理 v1、v2、v3 等等不同版本的引用问题，因为 GOPATH 模式下的导入路径都是一样的，都是github.com/foo/bar。&lt;/li>
&lt;/ul>
&lt;p>Go 语言官方从 Go1.11 起开始推进 Go modules（前身vgo，知道即可，不需要深入了解），Go1.13 起不再推荐使用 GOPATH 的使用模式，Go modules 也渐趋稳定，因此新项目也没有必要继续使用GOPATH模式。&lt;/p>
&lt;hr>
&lt;h2 id="go-module-语义化版本规范">
&lt;a href="#go-module-%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83" class="header-anchor">#&lt;/a>
Go Module 语义化版本规范
&lt;/h2>&lt;p>Go Module 的设计采用了语义化版本规范，语义化版本规范非常流行且具有指导意义，本文就来聊聊语义化版本规范的设计和在 Go 中的应用。&lt;/p>
&lt;h3 id="语义化版本规范">
&lt;a href="#%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83" class="header-anchor">#&lt;/a>
语义化版本规范
&lt;/h3>&lt;p>语义化版本规范（SemVer）是由 Gravatars 创办者兼 GitHub 共同创办者 Tom Preston-Werner 所建立，旨在解决 &lt;a class="link" href="https://hwikizh.cyou/wiki/Dependency_hell" target="_blank" rel="noopener"
>&lt;code>依赖地狱&lt;/code>&lt;/a> 问题。&lt;/p>
&lt;p>它清楚明了的规定了版本格式、版本号递增规：&lt;/p>
&lt;p>&lt;strong>版本格式&lt;/strong>：采用 X.Y.Z 的格式，X 是主版本号、Y 是次版本号、而 Z 为修订号（即：主版本号.次版本号.修订号），其中 X、Y 和 Z 为非负的整数，且禁止在数字前方补零。&lt;/p>
&lt;p>&lt;strong>版本号递增规则：&lt;/strong>&lt;/p>
&lt;p>主版本号：当做了不兼容的 API 修改。&lt;/p>
&lt;p>次版本号：当做了向下兼容的功能性新增及修改。&lt;/p>
&lt;p>修订号：当做了向下兼容的问题修正。&lt;/p>
&lt;p>另外，&lt;code>先行版本号&lt;/code> 及 &lt;code>版本编译信息&lt;/code> 可以加到 &lt;code>主版本号.次版本号.修订号&lt;/code> 的后面，作为延伸。&lt;/p>
&lt;p>完整版本格式如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428181429712.png"
width="594"
height="393"
srcset="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428181429712_hu4e93c4fe90e112c1b95a6a33697eab15_28580_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428181429712_hu4e93c4fe90e112c1b95a6a33697eab15_28580_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="版本格式"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="362px"
>&lt;/p>
&lt;p>先行版本号可以有多个，如第一个为UTC时间，第二个为提交的哈希值：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">v4&lt;/span>&lt;span class="mf">.0.1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">0.20210109023952&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">943e75&lt;/span>&lt;span class="nx">fe5223&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">incompatible&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">v0&lt;/span>&lt;span class="mf">.0.0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">20240416160154&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">fe59bbe5cc7f&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中版本号核心部分 X.Y.Z 是必须的，使用 &lt;code>.&lt;/code> 连接，先行版本号和版本编译信息是可选的，先行版本号通过 &lt;code>-&lt;/code> 与核心部分连接，版本编译信息通过 &lt;code>+&lt;/code> 与核心部分或先行版本号连接。&lt;/p>
&lt;p>合法的几种版本号格式如下：&lt;/p>
&lt;ol>
&lt;li>主版本号.次版本号.修订号&lt;/li>
&lt;li>主版本号.次版本号.修订号-先行版本号&lt;/li>
&lt;li>主版本号.次版本号.修订号+版本编译信息&lt;/li>
&lt;li>主版本号.次版本号.修订号-先行版本号+版本编译信息&lt;/li>
&lt;/ol>
&lt;p>主版本号必须在有任何不兼容的修改被加入公共 API 时递增。每当主版本号递增时，次版本号和修订号必须归零。&lt;/p>
&lt;p>次版本号必须在有向下兼容的新功能出现或有改进时递增，或在任何公共 API 的功能被标记为弃用时也必须递增。每当次版本号递增时，修订号必须归零。&lt;/p>
&lt;p>修订号必须在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。&lt;/p>
&lt;p>存在先行版本号，意味着当前版本不够稳定，且可能存在兼容性问题。先行版本号是一连串以 &lt;code>.&lt;/code> 分隔的标识符，由 ASCII 字母数字和连接号 &lt;code>[0-9A-Za-z-]&lt;/code> 组成，禁止出现空白符，数字类型则禁止在前方补零。合法示例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。&lt;/p>
&lt;p>版本编译信息标志符规格与先行版本号基本相同，略有差异的是数字类型前方允许补零。合法示例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。&lt;/p>
&lt;p>除了上面几点说明，还需要额外关注以下几点：&lt;/p>
&lt;ol>
&lt;li>标记版本号的软件发行后，禁止改变该版本软件的内容。任何修改都必须以新版本发行。&lt;/li>
&lt;li>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。&lt;/li>
&lt;li>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。&lt;/li>
&lt;li>社区中还存在一个不成文的规定，对于次版本号，偶数为稳定版本，奇数为开发版本。当然不是所有项目都这样设计。&lt;/li>
&lt;/ol>
&lt;h3 id="使用语义化版本规范可能遇到的问题">
&lt;a href="#%e4%bd%bf%e7%94%a8%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83%e5%8f%af%e8%83%bd%e9%81%87%e5%88%b0%e7%9a%84%e9%97%ae%e9%a2%98" class="header-anchor">#&lt;/a>
使用语义化版本规范可能遇到的问题
&lt;/h3>&lt;p>在使用语义化版本规范过程中，可能人为或程序编写错误导致出现如下几种可预见的问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？&lt;/p>
&lt;p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文档中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。&lt;/p>
&lt;p>注意：不到万不得已，不要也不能去修改已发行的版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）&lt;/p>
&lt;p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住，语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>v1.2.3&lt;/code> 是一个语义化版本号吗？&lt;/p>
&lt;p>&lt;code>v1.2.3&lt;/code> 并不是的一个语义化的版本号。但是，在语义化版本号之前增加前缀 &lt;code>v&lt;/code> 是用来表示版本号的常用做法。在版本控制系统中，将 &lt;code>version&lt;/code> 缩写为 &lt;code>v&lt;/code> 是很常见的。比如：&lt;code>git tag v1.2.3 -m &amp;quot;Release version 1.2.3&amp;quot;&lt;/code> 中，&lt;code>v1.2.3&lt;/code> 表示标签名称，而 &lt;code>1.2.3&lt;/code> 是语义化版本号。go modules的模块版本也是在前面加&lt;code>v&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="如何验证语义化版本规范正确性">
&lt;a href="#%e5%a6%82%e4%bd%95%e9%aa%8c%e8%af%81%e8%af%ad%e4%b9%89%e5%8c%96%e7%89%88%e6%9c%ac%e8%a7%84%e8%8c%83%e6%ad%a3%e7%a1%ae%e6%80%a7" class="header-anchor">#&lt;/a>
如何验证语义化版本规范正确性
&lt;/h3>&lt;p>官方提供了两个正则可以检查语义化版本号的正确性。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>支持按组名称提取匹配结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="p">^(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">major&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">minor&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">patch&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">prerelease&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="nx">P&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">buildmetadata&lt;/span>&lt;span class="p">&amp;gt;[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?$&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Go 语言示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;regexp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">version&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;0.1.2-alpha+001&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pattern&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">regexp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustCompile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">`^(?P&amp;lt;major&amp;gt;0|[1-9]\d*)\.(?P&amp;lt;minor&amp;gt;0|[1-9]\d*)\.(?P&amp;lt;patch&amp;gt;0|[1-9]\d*)(?:-(?P&amp;lt;prerelease&amp;gt;(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P&amp;lt;buildmetadata&amp;gt;[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">pattern&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FindStringSubmatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">version&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">pattern&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SubexpNames&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MarshalIndent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;buildmetadata&amp;#34;: &amp;#34;001&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;major&amp;#34;: &amp;#34;0&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;minor&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;patch&amp;#34;: &amp;#34;2&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;prerelease&amp;#34;: &amp;#34;alpha&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> &amp;#34;version&amp;#34;: &amp;#34;0.1.2-alpha+001&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>支持按编号提取匹配结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="p">^(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">|[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">?&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="p">.[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zA&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">Z&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="err">?$&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Go 语言示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;regexp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">version&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;0.1.2-alpha+001&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pattern&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">regexp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">MustCompile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">`^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">pattern&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FindStringSubmatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">version&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d -&amp;gt; %s\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">0 -&amp;gt; 0.1.2-alpha+001
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">1 -&amp;gt; 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">2 -&amp;gt; 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">3 -&amp;gt; 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">4 -&amp;gt; alpha
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">5 -&amp;gt; 001
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="go-modules版本设计">
&lt;a href="#go-modules%e7%89%88%e6%9c%ac%e8%ae%be%e8%ae%a1" class="header-anchor">#&lt;/a>
Go Modules版本设计
&lt;/h3>&lt;h4 id="依赖地狱">
&lt;a href="#%e4%be%9d%e8%b5%96%e5%9c%b0%e7%8b%b1" class="header-anchor">#&lt;/a>
依赖地狱
&lt;/h4>&lt;p>我们先来看下早期 Go 依赖包存在的依赖地狱问题：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428182831893.png"
width="1097"
height="513"
srcset="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428182831893_hu10246893e1c443d1187588789017c05f_64039_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428182831893_hu10246893e1c443d1187588789017c05f_64039_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="依赖地狱"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="513px"
>&lt;/p>
&lt;p>首先存在两个包 &lt;code>pkg1&lt;/code> 和 &lt;code>pkg2&lt;/code>，分别依赖 &lt;code>pkg3&lt;/code> 的 &lt;code>v1.0.0&lt;/code> 版本和 &lt;code>v2.0.0&lt;/code> 版本，现在我们开发一个 &lt;code>app&lt;/code> 包，它依赖 &lt;code>pkg1&lt;/code> 和 &lt;code>pkg2&lt;/code>，那么此时由于 &lt;code>app&lt;/code> 包只允许包含一个 &lt;code>pkg3&lt;/code> 依赖，所以 Go 构建工具无法抉择应该使用哪个版本的 &lt;code>pkg3&lt;/code>。这就是所谓的依赖地狱问题。&lt;/p>
&lt;h4 id="语义导入版本">
&lt;a href="#%e8%af%ad%e4%b9%89%e5%af%bc%e5%85%a5%e7%89%88%e6%9c%ac" class="header-anchor">#&lt;/a>
语义导入版本
&lt;/h4>&lt;p>为了解决依赖地狱问题，Go 在 1.11 版本时引入和 Go Modules：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428183011710.png"
width="1096"
height="499"
srcset="https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428183011710_hu26cf2410430fcf457ac5158230a0c061_64758_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/go-modules%E8%AF%A6%E8%A7%A3/index.assets/image-20240428183011710_hu26cf2410430fcf457ac5158230a0c061_64758_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Go Modules"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="527px"
>&lt;/p>
&lt;p>Go Module 解决问题的方式是，把 &lt;code>pkg3&lt;/code> 的 &lt;code>v1.0.0&lt;/code> 版本和 &lt;code>v2.0.0&lt;/code> 版本当作两个不同的包，这样也就允许了 &lt;code>app&lt;/code> 包能够同时包含多个不同版本的 &lt;code>pkg3&lt;/code>。&lt;/p>
&lt;p>在使用时，需要在包的导入路径上加上包的主版本号。这里以 &lt;a class="link" href="https://github.com/go-micro/go-micro" target="_blank" rel="noopener"
>&lt;code>go-micro&lt;/code>&lt;/a> 包使用为例，展示下 Go Module 语义导入版本的用法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;go-micro.dev/v4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// create a new service
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">service&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">micro&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewService&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">micro&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;helloworld&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// initialise flags
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Init&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// start the service
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到导入路径为 &lt;code>&amp;quot;go-micro.dev/v4&amp;quot;&lt;/code>，其中 &lt;code>v4&lt;/code> 就代表了需要引入 &lt;code>go-micro&lt;/code> 的 &lt;code>v4.y.z&lt;/code> 版本。&lt;/p>
&lt;hr>
&lt;h2 id="go-modules基本使用">
&lt;a href="#go-modules%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
Go Modules基本使用
&lt;/h2>&lt;h3 id="go-modules相关命令">
&lt;a href="#go-modules%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
go modules相关命令
&lt;/h3>&lt;p>在 Go modules 中，我们能够使用如下命令进行操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>介绍&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>go mod init &amp;lt;project&amp;gt;&lt;/code>&lt;/td>
&lt;td>初始化项目依赖，生成go.mod模块文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod download&lt;/code>&lt;/td>
&lt;td>根据go.mod文件下载依赖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod tidy&lt;/code>&lt;/td>
&lt;td>比对项目文件中引入的依赖与go.mod进行比对,整理模块文件，去除没有用到的依赖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod graph&lt;/code>&lt;/td>
&lt;td>输出依赖关系图、查看现有的依赖结构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod edit&lt;/code>&lt;/td>
&lt;td>编辑go.mod文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod vendor&lt;/code>&lt;/td>
&lt;td>将项目的所有依赖导出至vendor目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod verify&lt;/code>&lt;/td>
&lt;td>检验一个依赖包是否被篡改过&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>go mod why&lt;/code>&lt;/td>
&lt;td>解释为什么需要某个依赖&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="go-modules参数配置">
&lt;a href="#go-modules%e5%8f%82%e6%95%b0%e9%85%8d%e7%bd%ae" class="header-anchor">#&lt;/a>
go modules参数配置
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>GO111MODULE&lt;/strong>&lt;/p>
&lt;p>Go语言提供了 GO111MODULE 这个环境变量来作为 Go modules 的开关，其允许设置以下参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>auto&lt;/td>
&lt;td>只要项目包含了 go.mod 文件的话启用 Go modules，目前在 Go1.11 至 Go1.14 中仍然是默认值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>on&lt;/td>
&lt;td>启用 Go modules，推荐设置，将会是Go1.16版本之后的默认值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>off&lt;/td>
&lt;td>禁用 Go modules，不推荐设置。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你可能会留意到 GO111MODULE 这个名字比较“奇特”，实际上在 Go 语言中经常会有这类阶段性的变量， GO111MODULE 这个命名代表着Go语言在 1.11 版本添加的。后续版本中可能会去掉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GOPROXY&lt;/strong>&lt;/p>
&lt;p>这个环境变量主要是用于设置 Go 模块代理（Go module proxy），其作用是用于使 Go 在后续拉取模块版本时能够脱离传统的 VCS（版本控制系统，如github，就是源地址下载） 方式，直接通过镜像站点来&lt;strong>快速拉取&lt;/strong>。值为&lt;code>off&lt;/code>表示禁止模块代理。&lt;/p>
&lt;p>设置&lt;code>GOPROXY&lt;/code>可以&lt;strong>加速模块下载&lt;/strong>，&lt;strong>确保构建确定性&lt;/strong>（提供稳定的构建版本），&lt;strong>提高安全性&lt;/strong>，&lt;strong>确保模块始终可用&lt;/strong>。&lt;/p>
&lt;p>GOPROXY 的默认值是：&lt;code>https://proxy.golang.org,direct&lt;/code>，由于某些原因国内无法正常访问该地址，所以我们通常需要配置一个可访问的地址。目前国内社区使用比较多的有两个 &lt;a class="link" href="https://goproxy.cn" target="_blank" rel="noopener"
>https://goproxy.cn&lt;/a>和 &lt;a class="link" href="https://goproxy.io" target="_blank" rel="noopener"
>https://goproxy.io&lt;/a>，当然如果你的公司有提供GOPROXY地址那么就直接使用。并且修改的代理，通过&lt;code>go get&lt;/code>命令下载自己的公共模块，也会同步到 &lt;a class="link" href="https://pkg.go.dev/" target="_blank" rel="noopener"
>https://pkg.go.dev/&lt;/a>。&lt;/p>
&lt;p>设置GOPAROXY的命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">go env -w &lt;span class="nv">GOPROXY&lt;/span>&lt;span class="o">=&lt;/span>https://goproxy.cn,direct
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>GOPROXY 允许设置多个代理地址，多个地址之间需使用英文逗号 “,” 分隔。最后的 “direct” 是一个特殊指示符，用于指示 Go 回源到源地址去抓取（比如 GitHub 等）。当配置有多个代理地址时，如果第一个代理地址返回 404 或 410 错误时，Go 会自动尝试下一个代理地址，当遇见 “direct” 时触发回源，也就是&lt;strong>回到源地址&lt;/strong>去抓取。就是代理失败之后用传统方式（源地址下载模块）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GOPRIVATE&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>GONOPROXY/GONOSUMDB/GOPRIVATE&lt;/p>
&lt;p>这三个环境变量都是用在当前项目依赖了私有模块，例如像是你公司的私有 git 仓库，又或是 github 中的私有库，都是属于私有模块，都是要进行设置的，否则会拉取失败。&lt;/p>
&lt;p>更细致来讲，就是依赖了由 GOPROXY 指定的 Go 模块代理或由 GOSUMDB 指定 Go checksum database 都无法访问到的模块时的场景。&lt;/p>
&lt;p>而一般建议直接设置 GOPRIVATE，它的值将作为 GONOPROXY 和 GONOSUMDB 的默认值，所以建议的最佳姿势是直接使用 GOPRIVATE。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>设置了GOPROXY 之后，go 命令就会从配置的代理地址拉取和校验依赖包。当我们在项目中引入了非公开的包（公司内部git仓库或 github 私有仓库等），此时便无法正常从代理拉取到这些非公开的依赖包，这个时候就需要配置 GOPRIVATE 环境变量。GOPRIVATE用来告诉 go 命令哪些仓库属于私有仓库，不必通过代理服务器拉取和校验。&lt;/p>
&lt;p>GOPRIVATE 的值也可以设置多个，多个地址之间使用英文逗号 “,” 分隔。我们通常会把自己公司内部的代码仓库设置到 GOPRIVATE 中，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go env -w &lt;span class="nv">GOPRIVATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;git.example.com,github.com/arlettebrook/demo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置后，前缀为 git.xxx.com 和 github.com/arlettebrook/demo的模块都会被认为是私有模块。&lt;/p>
&lt;p>如果不想每次都重新设置，我们也可以利用通配符，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ go env -w &lt;span class="nv">GOPRIVATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*.example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样子设置的话，所有模块路径为 example.com 的子域名（例如：git.example.com）都将不经过 Go module proxy 和 Go checksum database，需要注意的是不包括 example.com 本身。&lt;/p>
&lt;p>此外，如果公司内部自建了 GOPROXY 服务，那么我们可以通过设置 &lt;code>GONOPROXY=none&lt;/code>，允许通内部代理拉取私有仓库的包。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="go-modules模块文件">
&lt;a href="#go-modules%e6%a8%a1%e5%9d%97%e6%96%87%e4%bb%b6" class="header-anchor">#&lt;/a>
go modules模块文件
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>初识化项目&lt;/p>
&lt;p>在项目的根目录下运行&lt;code>go mod init &amp;lt;project&amp;gt;&lt;/code>，如&lt;code>go mod init github.com/arlettebrook/demo&lt;/code>，&lt;code>demo&lt;/code>是项目名，&lt;code>github.com/arlettebrook/demo&lt;/code>是模块导入路径，当导入的时候，如果本地没有，会去该路径下载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>go.mod 文件&lt;/strong>&lt;/p>
&lt;p>在初始化项目时，会生成一个 go.mod 文件，是启用了 Go modules 项目所必须的最重要的标识，同时也是 GO111MODULE 值为 auto 时的识别标识，它描述了当前项目（也就是当前模块）的元信息，每一行都以一个动词开头。&lt;/p>
&lt;p>&lt;strong>示例文件&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">arlettebrook&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">demo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="mf">1.22.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">require&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">apple&lt;/span> &lt;span class="nx">v0&lt;/span>&lt;span class="mf">.1.2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.2.3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">v2&lt;/span> &lt;span class="nx">v2&lt;/span>&lt;span class="mf">.3.4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pear&lt;/span> &lt;span class="c1">// indirect
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">strawberry&lt;/span> &lt;span class="c1">// incompatible
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">exclude&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.2.4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">replace&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">apple&lt;/span> &lt;span class="nx">v0&lt;/span>&lt;span class="mf">.1.2&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">fried&lt;/span> &lt;span class="nx">v0&lt;/span>&lt;span class="mf">.1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">replace&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">banana&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">fish&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>说明&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>module&lt;/strong>：用于定义当前项目的模块路径。&lt;/li>
&lt;li>&lt;strong>go&lt;/strong>：用于标识当前模块的 Go 语言版本，值为初始化模块时的版本，目前来看还只是个标识作用。&lt;/li>
&lt;li>&lt;strong>require&lt;/strong>：用于设置一个特定的模块版本。&lt;/li>
&lt;li>&lt;strong>exclude&lt;/strong>：用于从使用中排除一个特定的模块版本。&lt;/li>
&lt;li>&lt;strong>replace&lt;/strong>：用于将一个模块版本替换为另外一个模块版本。&lt;/li>
&lt;/ul>
&lt;p>另外你会发现 &lt;code>example.com/pear&lt;/code> 的后面会有一个 indirect 标识，indirect 标识表示该模块为间接依赖，也就是在当前应用程序中的 import 语句中，并没有发现这个模块的明确引用，有可能是你先手动 go get 拉取下来的，也有可能是你所依赖的模块所依赖的，情况有好几种。incompatible：不兼容的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>go.sum 文件&lt;/strong>&lt;/p>
&lt;p>在第一次拉取模块依赖后，会发现多出了一个 go.sum 文件，其详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="nx">aJaZx1B85qltLMc546zn58BxxfZdR&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">W22ej9CFoEf0&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mod&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pflag&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.0.5&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">iy&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">VFUOCP1a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="nx">yFto&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">drg2CJ5u0yRoB7fZw3DKv&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">JXA&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pflag&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.0.5&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mod&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到一个模块路径可能有如下两种：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="nx">aJaZx1B85qltLMc546zn58BxxfZdR&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">W22ej9CFoEf0&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">spf13&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">cobra&lt;/span> &lt;span class="nx">v1&lt;/span>&lt;span class="mf">.8.0&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mod&lt;/span> &lt;span class="nx">h1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">WXLWApfZ71AjXPya3WOlMsY9yMs7YeiHhFVlvLyhcho&lt;/span>&lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>h1 hash 是 Go modules 将目标模块版本的 zip 文件开包后，针对所有包内文件依次进行 hash，然后再把它们的 hash 结果按照固定格式和算法组成总的 hash 值。&lt;/p>
&lt;p>而 h1 hash 和 go.mod hash 两者，要不就是同时存在，要不就是只存在 go.mod hash。那什么情况下会不存在 h1 hash 呢，就是当 Go 认为肯定用不到某个模块版本的时候就会省略它的 h1 hash，就会出现不存在 h1 hash，只存在 go.mod hash 的情况。&lt;/p>
&lt;p>&lt;code>go.mod&lt;/code>和&lt;code>go.sum&lt;/code>都应该被提交到git仓库中去。当别人使用你的项目时，mod保证依赖版本一直，sum保证依赖不被篡改。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="go-modules模块下载">
&lt;a href="#go-modules%e6%a8%a1%e5%9d%97%e4%b8%8b%e8%bd%bd" class="header-anchor">#&lt;/a>
go modules模块下载
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>我们下载、添加模块使用&lt;code>go get -u &amp;lt;module path&amp;gt;&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认下载、添加最新版本，首先会检查本地（pkg：全局模块缓存）是否存在，没有，在去下载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在项目中下载会自动添加到&lt;code>go.mod&lt;/code>文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u&lt;/code>选项会更新模块的依赖包到最新版本，推荐加上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还可以指定下载版本&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>go get golang.org/x/text@latest&lt;/td>
&lt;td>拉取最新的版本，若存在tag，则优先使用。可以省略。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get golang.org/x/text@master&lt;/td>
&lt;td>拉取 master 分支的最新 commit。@branch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get &lt;a class="link" href="mailto:golang.org/x/text@v0.3.2" >golang.org/x/text@v0.3.2&lt;/a>&lt;/td>
&lt;td>拉取 tag 为 v0.3.2 的 commit。@version，version必须满足语义化版本规范且前面加v。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get golang.org/x/text@342b2e&lt;/td>
&lt;td>拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2。@commit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>go get golang.org/x/text/v2&lt;/td>
&lt;td>下载主版本号为2的最新版&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>最新版本的选择&lt;/p>
&lt;p>分两种情况&lt;/p>
&lt;ol>
&lt;li>最新版本有发布tags：就以发布的版本，version一般为&lt;code>标签名&lt;/code>，如&lt;code>v2.1.2&lt;/code>&lt;/li>
&lt;li>最新版本没有发布tags:就以提交的最新版本，version一般为&lt;code>已发布标签-最新提交日期-最新提交哈希+版本编译信息&lt;/code>，版本编译信息一般没有。如&lt;code>v2.1.2-20240416160154-fe59bbe5cc7f&lt;/code>，如果一次tags也没有发布，版本号则为v0.0.0，如&lt;code>v0.0.0-20240416160154-fe59bbe5cc7f&lt;/code>&lt;/li>
&lt;li>子模块同理&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h4 id="go-modules全局缓存">
&lt;a href="#go-modules%e5%85%a8%e5%b1%80%e7%bc%93%e5%ad%98" class="header-anchor">#&lt;/a>
go modules全局缓存
&lt;/h4>&lt;p>Go module 会把下载到本地的依赖包会以类似下面的形式保存在 &lt;code>$GOPATH/pkg/mod&lt;/code>目录下，每个依赖包都会带有版本号进行区分，这样就允许在本地存在同一个包的多个不同版本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">mod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">cache&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">golang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">org&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">google&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">golang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">org&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">├──&lt;/span> &lt;span class="nx">gopkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果想清除所有本地已缓存的依赖包数据，可以执行 &lt;code>go clean -modcache&lt;/code> 命令。&lt;/p>
&lt;h3 id="go-modules模块导入">
&lt;a href="#go-modules%e6%a8%a1%e5%9d%97%e5%af%bc%e5%85%a5" class="header-anchor">#&lt;/a>
go modules模块导入
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>go模块导入用&lt;code>import &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当导入多个模块的时候用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;path/filepath&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>别名导入用&lt;code>import 别名 &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nx">f&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>点导入用&lt;code>import . &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;p>点导入是一种特殊的导入方式，它将包中的所有公共标识符（函数、变量、类型等）提升到当前文件的命名空间中，这样在代码中就可以直接使用这些标识符，而不需要加上包名前缀。但是，这种方式可能会导致命名冲突和代码可读性下降，因此一般不建议使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>空导入用&lt;code>import _ &amp;quot;模块路径&amp;quot;&lt;/code>&lt;/p>
&lt;p>空导入通常用于初始化包中的变量或者执行包中的初始化函数，而不直接使用该包中的其他标识符。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注意事项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当模块的主版本号为0或1的时候省略了主版本标识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当主版本号为2及以上时，不能省略主版本标识。否则会出现冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主版本标识只能为&lt;code>/v主版本号&lt;/code>，不能用&lt;code>@version&lt;/code>，一般使用主版本的最新版，这与语义化版本规范有关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;github.com/jordan-wright/email&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;github.com/jordan-wright/email/v4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>为什么忽略 v0 和 v1 的主版本号&lt;/p>
&lt;p>还是与语义化版本规范有关，v0属于开发初始阶段，其公共api不被视为稳定版，当版本到达v1，其公共api基本确定，在此之后如果不出现不兼容api的修改，是不会修改主版本号的。后续的次版本、修订号会向下兼容。这是官方所鼓励的。当api做了不兼容的修改，主版本号就会修改。&lt;strong>为了不出现冲突就会加上主版本标识&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="gopkgin介绍">
&lt;a href="#gopkgin%e4%bb%8b%e7%bb%8d" class="header-anchor">#&lt;/a>
gopkg.in介绍
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>gopkg.in&lt;/code>是旧go包管理工具中的一个，并不是官方包管理工具。作用是下载时重定向到相应github仓库。优点是： URL 更干净、更短、导入路径稳定、易于使用、支持版本控制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浏览器打开链接，会提供对应包的godoc在线链接以及github仓库链接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gopkg.in/ini.v1&lt;/code>对应github仓库为&lt;code>githu.com/go-ini/ini&lt;/code>，当没有指定用户名时，用户名默认为&lt;code>go-包名&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">gopkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">in&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">v3&lt;/span> &lt;span class="err">→&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">pkg&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nf">pkg&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">branch&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">tag&lt;/span> &lt;span class="nx">v3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="nx">v3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">M&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">gopkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">in&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">pkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">v3&lt;/span> &lt;span class="err">→&lt;/span> &lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nf">pkg&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">branch&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">tag&lt;/span> &lt;span class="nx">v3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="nx">v3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">M&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>版本控制用&lt;code>.vNumber&lt;/code>表示.。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与&lt;code>go modules&lt;/code>的区别：&lt;/p>
&lt;ul>
&lt;li>v1&lt;code>gopkg.in&lt;/code>必须指定。&lt;code>go mod&lt;/code>不用。&lt;/li>
&lt;li>&lt;code>gopkg.in&lt;/code>分隔符是&lt;code>.&lt;/code>（&lt;code>go mod&lt;/code>是&lt;code>/&lt;/code>）。&lt;/li>
&lt;li>v0为开发版、不稳定版，不指定默认为开发版，&lt;code>go mod&lt;/code>不指定默认为v0或v1。&lt;/li>
&lt;li>&lt;code>gopkg.in&lt;/code>主版本为1就要指定主版本标识。&lt;code>go mod&lt;/code>主版本为2才需要指定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如何让&lt;code>gopkg.in&lt;/code>收录自己的模块：&lt;/p>
&lt;ul>
&lt;li>与&lt;code>go mod&lt;/code>一样，当我们使用&lt;code>go get&lt;/code>下载已经存在的版本仓库时，会自动同步到在线的&lt;a class="link" href="https://pkg.go.dev/" target="_blank" rel="noopener"
>godoc&lt;/a>中。&lt;/li>
&lt;li>建议仓库名与用户名关系是&lt;code>pkg&lt;/code>与&lt;code>go-pkg&lt;/code>，推荐&lt;code>gopkg.in&lt;/code>。当然也可以直接使用github仓库路径。&lt;/li>
&lt;li>其他情况可以使用&lt;code>go mod&lt;/code>。并通过像 &lt;code>proxy.golang.org&lt;/code> 这样的代理服务器来分发你的模块。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gopkg.in&lt;/code>版本控制同样遵循[语义化版本控制](#Go Module 语义化版本规范)。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor">#&lt;/a>
总结
&lt;/h2>&lt;p>至此我们大致介绍了 Go modules 的前世今生、语义化版本规范以及基本使用。&lt;/p>
&lt;p>Go modules 的成长和发展经历了一定的过程，如果你是刚接触的读者，直接基于 Go modules 的项目开始即可，如果既有老项目，那么是时候考虑切换过来了，Go1.14起已经准备就绪，并推荐你使用。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>&lt;a class="link" href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener"
>https://semver.org/lang/zh-CN/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://jianghushinian.cn/2023/01/01/Go-Module-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC%E8%A7%84%E8%8C%83/" target="_blank" rel="noopener"
>Go Module 语义化版本规范&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/u011069013/article/details/110114319" target="_blank" rel="noopener"
>Go Modules详解&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://juejin.cn/post/7149869713688887326" target="_blank" rel="noopener"
>Go module详细介绍&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Git常用命令</title><link>https://arlettebrook.github.io/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 22 Apr 2024 22:18:17 +0800</pubDate><guid>https://arlettebrook.github.io/p/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;blockquote>
&lt;p>注意：要学会使用-h &amp;ndash;help选项，查看命令，看不懂在查阅。&lt;code>git help &amp;lt;command&amp;gt;&lt;/code>可进入官方文档。&lt;strong>Git&lt;/strong>&lt;a class="link" href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener"
>入门参考&lt;/a>。以下常用命令个人收集总结。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="git简单命令">
&lt;a href="#git%e7%ae%80%e5%8d%95%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git简单命令
&lt;/h2>&lt;h3 id="git-init">
&lt;a href="#git-init" class="header-anchor">#&lt;/a>
git init
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git init &amp;lt;directory&amp;gt;&lt;/code>在指定的⽬录下创建⼀个空的git repo。不带参数将在当前⽬录下创建⼀个git repo。&lt;/li>
&lt;/ul>
&lt;h3 id="git-clone">
&lt;a href="#git-clone" class="header-anchor">#&lt;/a>
git clone
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git clone &amp;lt;repo&amp;gt;&lt;/code>克隆⼀个指定repo到本地。指定的repo可以是本地⽂件系统或者由HTTP或SSH指定的远程路径。&lt;/li>
&lt;li>&lt;code>git clone -b &amp;lt;branch&amp;gt; &amp;lt;repo&amp;gt;&lt;/code>克隆指定仓库的分支&lt;/li>
&lt;li>&lt;code>git clone --recursive &amp;lt;repo&amp;gt;&lt;/code>递归地克隆，克隆带有子模块的仓库
&lt;ul>
&lt;li>&lt;code>git clone --recurse-submodules &amp;lt;repository_url&amp;gt;&lt;/code>同理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可组合使用&lt;/li>
&lt;/ul>
&lt;h3 id="git-add">
&lt;a href="#git-add" class="header-anchor">#&lt;/a>
git add
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git add &amp;lt;directory&amp;gt;&lt;/code>将指定⽬录的所有修改加⼊到下⼀次 commit中。把&lt;code>&amp;lt;directory&amp;gt;&lt;/code>替换成&lt;code>&amp;lt;file&amp;gt;&lt;/code>将添加指定⽂件的修改。&lt;/li>
&lt;li>&lt;code>git add *&lt;/code>、&lt;code>git add .&lt;/code>、&lt;code>git add -A&lt;/code>三条命令但是一样的，将所以修改提交到暂存区。&lt;/li>
&lt;/ul>
&lt;h3 id="git-commit">
&lt;a href="#git-commit" class="header-anchor">#&lt;/a>
git commit
&lt;/h3>&lt;ul>
&lt;li>这个命令通常带&lt;code>-m&lt;/code>选项&lt;code>git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot;&lt;/code>提交暂存区的修改，使⽤指定的 &lt;code>&amp;lt;message&amp;gt;&lt;/code>作为提交信息，⽽不是打开⽂本编辑器输⼊提交信息。&lt;/li>
&lt;li>&lt;code>git commit -m &amp;lt;message&amp;gt; --amend&lt;/code>将当前staged修改合并到最近⼀次的commit中。&lt;/li>
&lt;/ul>
&lt;h3 id="git-status">
&lt;a href="#git-status" class="header-anchor">#&lt;/a>
git status
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git status&lt;/code>显示哪些⽂件已被staged、以及未跟踪(untracked)。&lt;/li>
&lt;/ul>
&lt;h3 id="git-reflog">
&lt;a href="#git-reflog" class="header-anchor">#&lt;/a>
git reflog
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git reflog&lt;/code>显示本地repo的所有commit⽇志。&lt;/li>
&lt;li>与&lt;code>git log&lt;/code>的区别
&lt;ol>
&lt;li>&lt;code>log&lt;/code>项目的提交历史，&lt;code>reflog&lt;/code>本地仓库的&lt;strong>引用&lt;/strong>提交日志。&lt;/li>
&lt;li>引用会保留所以的提交历史，如何重置的历史。主要目的是提供一个安全网，以便在误操作（如错误的 &lt;code>git reset&lt;/code>）后可以恢复丢失的提交或分支。&lt;/li>
&lt;li>&lt;code>git log&lt;/code> 的输出是永久性的，而 &lt;code>reflog&lt;/code> 会在一段时间后自动过期（默认是 30 天），以节省空间。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-rm">
&lt;a href="#git-rm" class="header-anchor">#&lt;/a>
git rm
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git rm fileName&lt;/code>删除指定的文件。
&lt;ul>
&lt;li>与&lt;code>rm fileName&lt;/code>的区别。
&lt;ol>
&lt;li>&lt;code>git rm&lt;/code>不能删除未跟踪的文件，&lt;/li>
&lt;li>&lt;code>git rm&lt;/code>删除之后直接到暂存区，而&lt;code>rm&lt;/code>是到工作区&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意删除之后都需要提交操作。&lt;/li>
&lt;li>撤销操作不用记，git都会有提示&lt;/li>
&lt;/ul>
&lt;h3 id="git-switch">
&lt;a href="#git-switch" class="header-anchor">#&lt;/a>
git switch
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>该命令适用于特定git版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git switch &amp;lt;branch&amp;gt;&lt;/code>切换到指定分支，&lt;/p>
&lt;ul>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>同理，但这个都适用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git switch -c &amp;lt;branch&amp;gt;&lt;/code>创建并切换指定分支&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-branch">
&lt;a href="#git-branch" class="header-anchor">#&lt;/a>
git branch
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git branch&lt;/code>显示本地repo的所有分⽀。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-v&lt;/code>显示详细信息&lt;/li>
&lt;li>带&lt;code>*&lt;/code>的为当前分支&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -r&lt;/code>显示远程仓库的所以分支。&lt;/p>
&lt;ul>
&lt;li>可以使用&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>检出远程分支，可以省略&lt;code>origin/&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -a&lt;/code>显示本地和远程的所有分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -m &amp;lt;old_branch_name&amp;gt; &amp;lt;new_branch_name&amp;gt;&lt;/code>重命名分支&lt;/p>
&lt;ul>
&lt;li>新分支名已经存在， &lt;code>-M&lt;/code> 强制重命名。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch &amp;lt;name&amp;gt;&lt;/code>创建指定分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -D &amp;lt;branch&amp;gt;&lt;/code>强制删除指定分支，无论是否合并到当前分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git branch -d &amp;lt;branch&amp;gt;&lt;/code>删除指定的分支，如果没有合并到当前分支，git会阻止操作。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-merge">
&lt;a href="#git-merge" class="header-anchor">#&lt;/a>
git merge
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git merge &amp;lt;branch&amp;gt;&lt;/code>合并指定分支。将指定&lt;code>&amp;lt;branch&amp;gt;&lt;/code>分⽀合并到当前分⽀。
&lt;ul>
&lt;li>是在当前分支合并指定分支。&lt;/li>
&lt;li>合并分支可能会出现冲突。要解决冲突之后才能合并。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git merge --abort&lt;/code>放弃本次合并&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="git一般命令">
&lt;a href="#git%e4%b8%80%e8%88%ac%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git一般命令
&lt;/h2>&lt;h3 id="git-revert">
&lt;a href="#git-revert" class="header-anchor">#&lt;/a>
git revert
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git revert &amp;lt;commit&amp;gt; &lt;/code>对指定&lt;code>&amp;lt;commit&amp;gt;&lt;/code>创建⼀个undo的commit，并应⽤到当前分⽀。就是撤销指定的提交并保留记录
&lt;ul>
&lt;li>效果：撤销指定的提交，回到了撤销提交的是上个版本，&lt;strong>保留了撤销历史&lt;/strong>。&lt;strong>会打开编辑器显示具体效果&lt;/strong>&lt;/li>
&lt;li>一般不用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-reset">
&lt;a href="#git-reset" class="header-anchor">#&lt;/a>
git reset
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git reset &amp;lt;commit&amp;gt;&lt;/code>&lt;strong>重置&lt;/strong>到指定的提交，不会保留commit历史。工作区和暂存区会变成未跟踪。&lt;code>--hard&lt;/code>选项完全重置到指定提交。未跟踪的重置不了。重置历史可以通过&lt;code>git reflog&lt;/code>查看，利用这个可以重置已经重置的版本库。&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;commit&amp;gt;&lt;/code>可以是：
&lt;ul>
&lt;li>&lt;code>HEAD&lt;/code>表示最新的提交或者这个&lt;strong>版本库&lt;/strong>，HEAD^、HEAD~1上上次提交或者上个版本&lt;/li>
&lt;li>或者使用&lt;code>commit_hash&lt;/code>，提交的哈希值可以使用&lt;code>git log&lt;/code>查看，只需要前几位就行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git reset&lt;/code>（重置到最新的提交）移除所有暂存区、工作区的修改，到未跟踪。这些命令其实省略了&lt;code>HEAD&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>git reset --hard&lt;/code> 重置到最新的提交，删除工作区和暂存区&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git reset &amp;lt;file&amp;gt;&lt;/code>将&lt;code>&amp;lt;file&amp;gt;&lt;/code>从暂存区移除，但保持⼯作区不变。此操作不会修改⼯作区的任何⽂件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-restore">
&lt;a href="#git-restore" class="header-anchor">#&lt;/a>
git restore
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git restore &amp;lt;file&amp;gt;...&lt;/code>撤销对工作区的修改，是对以跟踪的文件当未添加到暂存区的文件。多个文件用空格分开。
&lt;ul>
&lt;li>&lt;code>git checkout -- &amp;lt;file&amp;gt;...&lt;/code>同理，&lt;code>--&lt;/code>可以省略&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git restore --staged &amp;lt;file&amp;gt;...&lt;/code>撤销对暂存区的修改到未跟踪。针对添加到暂存区的文件。
&lt;ul>
&lt;li>&lt;code>git reset HEAD &amp;lt;file&amp;gt;...&lt;/code>同理，&lt;code>HEAD&lt;/code>可以省略。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>具体用哪一个，git都会有提示，不用记。&lt;/li>
&lt;/ul>
&lt;h3 id="git-checkout">
&lt;a href="#git-checkout" class="header-anchor">#&lt;/a>
git checkout
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>切换到指定的分支&lt;/p>
&lt;ul>
&lt;li>如果分支为远程分支，则检出远程分支&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -b &amp;lt;new-branch&amp;gt;&lt;/code>切换并创建指定的分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;file&amp;gt;&lt;/code>撤销工作区的修改&lt;/p>
&lt;ul>
&lt;li>&lt;code>git restore &amp;lt;file&amp;gt;&lt;/code>同理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout &amp;lt;commit&amp;gt;&lt;/code>根据指定的提交创建一个分支,处于游离态。一般不用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -b &amp;lt;local_branch_name&amp;gt; origin/&amp;lt;remote_branch_name&amp;gt;&lt;/code>切换到远程分支&lt;/p>
&lt;ul>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>差不多，可以使用&lt;code>git fetch origin&lt;/code>获取仓库所以信息，在检出分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git checkout -&lt;/code>切换到前一个分支。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-remote">
&lt;a href="#git-remote" class="header-anchor">#&lt;/a>
git remote
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>用来管理远程仓库列表，&lt;code>origin&lt;/code>为远程仓库的默认别名。这些远端仓库的信息都被保存在&lt;code>./git/config&lt;/code> 文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote&lt;/code>列出所有已配置的远程仓库的信息。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-v&lt;/code>显示详细信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote add &amp;lt;remote_name&amp;gt; &amp;lt;remote_url&amp;gt;&lt;/code>添加远程仓库&lt;/p>
&lt;ul>
&lt;li>添加⼀个新的远程连接。添加后可使⽤ &lt;code>&amp;lt;name&amp;gt;&lt;/code>作为指定&lt;code>&amp;lt;url&amp;gt;&lt;/code>远程连接的名称。&lt;/li>
&lt;li>只有配置了这个才能推送到远程仓库。&lt;/li>
&lt;li>&lt;code>git remote rename &amp;lt;old_name&amp;gt; &amp;lt;new_name&amp;gt;&lt;/code>重命名远程仓库。&lt;/li>
&lt;li>&lt;code>git remote set-url &amp;lt;remote_name&amp;gt; &amp;lt;new_url&amp;gt;&lt;/code>修改远程仓库的url。&lt;/li>
&lt;li>&lt;code>git remote remove &amp;lt;remote_name&amp;gt;&lt;/code>或&lt;code>git remote rm &amp;lt;remote_name&amp;gt;&lt;/code>删除远程仓库。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git remote show &amp;lt;remote_name&amp;gt;&lt;/code>显示远程仓库的详细信息，包括 URL、跟踪的分支等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>补充如何创建远程仓库&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建远程仓库可以先在github上创建好，然后在本地pull下来，在进行修改后push上去。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以建一个&lt;strong>空白仓库&lt;/strong>，在本地push上去，但需要进行绑定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git remote add origin https://github.com/username/null-project.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch -M main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push -u origin main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="gjit-push">
&lt;a href="#gjit-push" class="header-anchor">#&lt;/a>
gjit push
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>将本地仓库推送到远程仓库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;&lt;/code>推送本地分支到指定的远程分支。如果远程分支不存在，会自动创建。&lt;code>:&lt;/code>前后不能有空格。&lt;/p>
&lt;ul>
&lt;li>当分支同名，可以简写成&lt;code>git push &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;&lt;/code>&lt;/li>
&lt;li>果无法提交的话执行，&lt;code>-f&lt;/code>、&lt;code>--force&lt;/code>选项强制推送，一般不用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push -u &amp;lt;remote_repository&amp;gt; &amp;lt;本地分支名&amp;gt;&lt;/code>设置默认推送分支。&lt;/p>
&lt;ul>
&lt;li>作用：这样设置以后，推送到远程仓库可以简写成&lt;code>git push&lt;/code>
&lt;ul>
&lt;li>&lt;code>git push&lt;/code> 代替 &lt;code>git push origin master&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-u&lt;/code>是&lt;code>--set-upstream&lt;/code>的短形式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote_repository&amp;gt; -d &amp;lt;远程分支名&amp;gt;&lt;/code>删除远程分支 。&lt;/p>
&lt;ul>
&lt;li>&lt;code>--delete&lt;/code>长选项。&lt;/li>
&lt;li>&lt;code>git push origin :test&lt;/code>同理，没有写本地分支，就是删除远程分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;tagname&amp;gt;&lt;/code>推送指定标签到指定远程仓库，一般为`origin``&lt;/p>
&lt;/li>
&lt;li>
&lt;p>``git push &lt;remote> &amp;ndash;tags`推送所用标签到远程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-pull">
&lt;a href="#git-pull" class="header-anchor">#&lt;/a>
git pull
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git pull &amp;lt;remote_repository&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;&lt;/code>从远程仓库拉取最新代码到本地仓库。
&lt;ul>
&lt;li>&lt;code>git pull&lt;/code>会拉取并合并，出现冲突要解决之后才能合并。&lt;/li>
&lt;li>&lt;code>git fetch&lt;/code>获取当前远程仓库的最新信息，不会合并。&lt;/li>
&lt;li>通常可以简写成&lt;code>git pull&lt;/code>,远程仓库默认是&lt;code>origin&lt;/code>，分支默认是当前分支。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git pull --rebase&amp;lt;remote&amp;gt;&lt;/code> 抓取远程分⽀，并以rebase模式并⼊本地repo⽽不是merge。&lt;/li>
&lt;/ul>
&lt;h3 id="git-fetch">
&lt;a href="#git-fetch" class="header-anchor">#&lt;/a>
git fetch
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git fetch origin&lt;/code>获取远程仓库最新的更改。不会合并。默认仓库是&lt;code>origin&lt;/code>，分支是当前分支，这里可以省略&lt;code>origin&lt;/code>
&lt;ul>
&lt;li>&lt;code>git fetch origin &amp;lt;branch&amp;gt;&lt;/code>获取特定分支的更改.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git fetch --all&lt;/code>获取所用仓库远程仓库的最新更改。&lt;/li>
&lt;li>与&lt;code>git pull&lt;/code>的区别
&lt;ol>
&lt;li>都会获取远程仓库最新的更改。&lt;/li>
&lt;li>但是fetch不会合并，而pull会合并。可以理解为&lt;code>git pull&lt;/code> 是 &lt;code>git fetch&lt;/code> 和 &lt;code>git merge&lt;/code> 的组合&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>获取最新更改之后可以：
&lt;ol>
&lt;li>&lt;code>git checkout &amp;lt;branch&amp;gt;&lt;/code>检出指定分支，如果加&lt;code>origin&lt;/code>要这样&lt;code>git checkout -b &amp;lt;branch&amp;gt; origin/&amp;lt;branch&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>git merge origin/master&lt;/code>合并远程 master 分支的更改到当前的分支&lt;/li>
&lt;li>&lt;code>git rebase origin/master&lt;/code>使用 rebase 来整合更改（这可能会改变提交历史）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-stash">
&lt;a href="#git-stash" class="header-anchor">#&lt;/a>
git stash
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git stash&lt;/code>保存工作区、暂存区，可以切换分支去完成别的任务。不保存修改，未提交的修改会错乱到别的分支。并且只能保存已追踪的文件。&lt;/li>
&lt;li>&lt;code>git stash list&lt;/code>查看保存的工作区以及暂存区。&lt;/li>
&lt;li>&lt;code>git stash apply&lt;/code>恢复保存的工作区以及暂存区。
&lt;ul>
&lt;li>这个命令执行之后不会删除存储的工作区以及暂存区。&lt;/li>
&lt;li>要用&lt;code>git stash drop&lt;/code>才能删除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git stash pop&lt;/code>恢复并删除保存的工作区以及暂存区。&lt;/li>
&lt;li>默认都是保存、恢复第一个stash即&lt;code>stash@{0}&lt;/code>。若要指定第几个在后面加&lt;code>stash@{num}&lt;/code>。
&lt;ul>
&lt;li>如恢复第二个stash：&lt;code>git stash pop stash@{1}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每个分支共用一个stash。&lt;/li>
&lt;/ul>
&lt;h3 id="git-tag">
&lt;a href="#git-tag" class="header-anchor">#&lt;/a>
git tag
&lt;/h3>&lt;ul>
&lt;li>作用：用于标记项目的版本发布或重要的里程碑。&lt;/li>
&lt;li>分类
&lt;ol>
&lt;li>&lt;code>git tag &amp;lt;tagname&amp;gt; &amp;lt;commit ID&amp;gt;&lt;/code>轻量标签
&lt;ul>
&lt;li>&lt;code>git tag vn.n.n&lt;/code>打标签，&lt;code>n.n.n&lt;/code>表示对应的版本号，版本号前面一般加&lt;code>v&lt;/code>，遵循一定的命名规范，如&lt;code>v1.0.1&lt;/code>。
&lt;ul>
&lt;li>默认是打在最新的一次提交。&lt;/li>
&lt;li>后面跟提交的哈希值可以指定给那次提交打标签。如&lt;code>git tag v0.9.0 f52c633&lt;/code>。
&lt;ul>
&lt;li>哈希值可以通过&lt;code>git log&lt;/code>查看&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;&amp;lt;tag message&amp;gt;&amp;quot; &amp;lt;commit ID&amp;gt;&lt;/code>附注标签
&lt;ol>
&lt;li>如&lt;code>git tag -a v0.1 -m &amp;quot;version 0.1 released&amp;quot; 1094adb&lt;/code>&lt;/li>
&lt;li>推荐id省略默认最新提交。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>查看标签
&lt;ol>
&lt;li>&lt;code>git tag&lt;/code>显示所有的本地tag列表，按照字母顺序排序。如果tag数量较多，可能会显示不全。省略选项&lt;code>-l&lt;/code>、&lt;code>--list&lt;/code>&lt;/li>
&lt;li>&lt;code>git show &amp;lt;tagname&amp;gt;&lt;/code>显示指定tag的详细信息，包括提交的作者、提交时间、提交信息等。&lt;/li>
&lt;li>&lt;code>git tag -n&lt;/code>：显示tag列表，并同时显示每个tag对应的提交信息。&lt;/li>
&lt;li>&lt;code>git ls-remote --tags origin&lt;/code>：显示远程仓库中的所有tag信息。更推荐这种。
&lt;ol>
&lt;li>或者先&lt;code>git fetch&lt;/code>获取最新的更改，然后&lt;code>git tag&lt;/code>检出所有标签。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>删除标签
&lt;ol>
&lt;li>&lt;code>git tag -d &amp;lt;tagname&amp;gt;&lt;/code>删除本地标签&lt;/li>
&lt;li>删除远程标签：首先需要在本地删除标签，然后推送到远程仓库 &lt;code>git push origin :refs/tags/&amp;lt;tagname&amp;gt;&lt;/code>
&lt;ol>
&lt;li>远程标签是&lt;code>refs/tags/v0.0.1&lt;/code>这样存在的，跟删除远程分支差不多。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>标签一旦创建，就不能直接修改,如果需要修改标签，通常需要删除原标签，并重新创建一个新标签。&lt;/li>
&lt;li>推送标签
&lt;ol>
&lt;li>打的标签不会自动推送到远程仓库，需要手动推送。&lt;/li>
&lt;li>&lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;tagname&amp;gt;&lt;/code>推送指定标签到指定远程仓库，一般为&lt;code>origin&lt;/code>&lt;/li>
&lt;li>&lt;code>git push &amp;lt;remote&amp;gt; --tags&lt;/code>推送所用标签到远程&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="git复杂命令">
&lt;a href="#git%e5%a4%8d%e6%9d%82%e5%91%bd%e4%bb%a4" class="header-anchor">#&lt;/a>
git复杂命令
&lt;/h2>&lt;h3 id="git-log">
&lt;a href="#git-log" class="header-anchor">#&lt;/a>
git log
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git log&lt;/code>以缺省格式显示全部commit历史。更多⾃定义参数请参考后续部分。&lt;code>q&lt;/code>退出，&lt;code>空格&lt;/code>下一页，&lt;code>h&lt;/code>查看帮助
&lt;ul>
&lt;li>&lt;code>git log --stat&lt;/code>：显示详细的commit历史。&lt;/li>
&lt;li>&lt;code>git log -&amp;lt;limit&amp;gt;&lt;/code>限制log的显示数量。例如：”git log -5”仅显示最新5条commit。&lt;/li>
&lt;li>&lt;code>git log --oneline&lt;/code>每⾏显示⼀条commit，简化信息。与&lt;code>--pretty=oneline&lt;/code>等效&lt;/li>
&lt;li>&lt;code>git log --author= &amp;quot;&amp;lt;pattern&amp;gt;&amp;quot;&lt;/code>按提交者名字搜索并显示commit。&lt;/li>
&lt;li>&lt;code>git log --grep= &amp;quot;&amp;lt;pattern&amp;gt;&amp;quot;&lt;/code>按指定内容搜索并显示commit。&lt;/li>
&lt;li>&lt;code>git log &amp;lt;since&amp;gt;..&amp;lt;until&amp;gt;&lt;/code>显示指定范围的commit。范围参数可以是commit ID、分⽀名称、HEAD或任意相对位置。&lt;/li>
&lt;li>&lt;code>git log -- &amp;lt;file&amp;gt;&lt;/code>仅显示包含指定⽂件修改的commit。&lt;/li>
&lt;li>&lt;code>git log --graph&lt;/code>使⽤&amp;ndash;graph参数显示图形化的branch信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-diff">
&lt;a href="#git-diff" class="header-anchor">#&lt;/a>
git diff
&lt;/h3>&lt;ul>
&lt;li>&lt;code>git diff&lt;/code>⽐较⼯作区和暂存区的修改。&lt;/li>
&lt;li>&lt;code>git diff HEAD&lt;/code>⽐较⼯作区和上⼀次commit后的修改。
&lt;ul>
&lt;li>HEAD指向当前分支最新的commit版本库&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git diff --cached&lt;/code>⽐较暂存区和上⼀次commit后的修改。&lt;/li>
&lt;li>&lt;code>git diff --stashed&lt;/code>查看暂存区与最新提交的差异，与上面一样&lt;/li>
&lt;li>&lt;code>git diff &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt;&lt;/code>查看两个提交之间的差异。&lt;/li>
&lt;li>&lt;code>git diff &amp;lt;filename&amp;gt;&lt;/code>后面指定文件，只查看该文件的修改情况，没有参数查询全部&lt;/li>
&lt;li>用&lt;code>git diff HEAD -- readme.txt&lt;/code>命令可以查看版本库和工作区里面最新版本的区别&lt;/li>
&lt;/ul>
&lt;h3 id="git-config">
&lt;a href="#git-config" class="header-anchor">#&lt;/a>
git config
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>作用：通过&lt;code>git config&lt;/code>命令配置git的配置文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git配置文件级别分为：&lt;/p>
&lt;ol>
&lt;li>仓库级别 &lt;code>--local&lt;/code> 【优先级最高】。文件所在位置仓库下的&lt;code>.git/config&lt;/code>&lt;/li>
&lt;li>当前用户级别 &lt;code>--global&lt;/code>【优先级次之】&lt;strong>一般配置它&lt;/strong>。文件所在位置用户家目录下的&lt;code>.gitconfig&lt;/code>&lt;/li>
&lt;li>系统所有用户级别 &lt;code>--system&lt;/code>【优先级最低】。文件所在位置git安装目录下的&lt;code> ./etc/gitconfig&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-l&lt;/code>、&lt;code>--list&lt;/code>查看配置。&lt;strong>常用&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>git config -l&lt;/code>查看所有的配置信息，依次是系统级别、用户级别、仓库级别&lt;/li>
&lt;li>&lt;code>git config --local -l&lt;/code> 查看仓库级别配置。必须要进入到具体的目录下。&lt;/li>
&lt;li>&lt;code>git config --global -l&lt;/code> 查看当前用户配置&lt;/li>
&lt;li>&lt;code>git config --system -l&lt;/code> 查看系统所有用户配置&lt;/li>
&lt;li>可以与&lt;code>--show-origin&lt;/code> 显示文件位置，&lt;code>--show-scope&lt;/code>显示文件级别&lt;strong>组合使用&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-e&lt;/code>、&lt;code>--edit&lt;/code>打开编辑器编辑&lt;strong>指定级别&lt;/strong>的配置文件，没有指定默认仓库级别，会使用默认编辑器打开编辑。安装的时候设置的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加配置、修改配置：直接配置对应的配置参数就行。一般配置用户级别就行。省略了&lt;code>--add&lt;/code>选项。没有指定级别，默认仓库基本。常用的添加配置命令:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>用户邮箱和用户名。安装git之后&lt;strong>必设置的配置&lt;/strong>&lt;/p>
&lt;p>&lt;code>git config --global user.email &amp;quot;Your mail&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global user.name &amp;quot;Your name&amp;quot;&lt;/code>&lt;/p>
&lt;p>如果我们没有配置，在提交代码时会有如下错误：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">xxx@DESKTOP-MD21325 MINGW64 /d/test/test &lt;span class="o">(&lt;/span>master&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git commit -m &lt;span class="s2">&amp;#34;feature: add readme&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Author identity unknown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*** Please tell me who you are.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.email &lt;span class="s2">&amp;#34;you@example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global user.name &lt;span class="s2">&amp;#34;Your Name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">to &lt;span class="nb">set&lt;/span> your account&lt;span class="s1">&amp;#39;s default identity.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Omit --global to set the identity only in this repository.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">fatal: unable to auto-detect email address (got &amp;#39;&lt;/span>xxx@DESKTOP-MD21325.&lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置自己的代理。网速慢&lt;strong>必设置的配置&lt;/strong>&lt;/p>
&lt;p>&lt;code>git config --global http.proxy &amp;quot;http://proxy_ip:port&amp;quot;&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global https.proxy &amp;quot;https://proxy_ip:port&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--unset&lt;/code>取消配置，注意要指定取消的配置级别。常用取消配置命令：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>取消代理配置&lt;/p>
&lt;p>&lt;code>git config --global --unset http.proxy&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global --unset https.proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--get&lt;/code>查看指定级别、指定配置项的配置，默认仓库级别。如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>查看代理配置&lt;/p>
&lt;p>&lt;code>git config --global --get http.proxy&lt;/code>&lt;/p>
&lt;p>&lt;code>git config --global --get https.proxy&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git config --global alias.&amp;lt;alias-name&amp;gt; &amp;lt;git-command&amp;gt;&lt;/code>配置⼀个git命令的快捷⽅式。例如：配置”alias.glog log &amp;ndash;graph &amp;ndash;oneline”使”git glog”相当于”git log &amp;ndash;graph &amp;ndash;oneline”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git config --global core.editor &amp;lt;editor&amp;gt;&lt;/code>配置⽂本编辑器，例如vi，在必要时⾃动打开此⽂本编辑器。安装的时候也可以指定默认编辑器。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-submodule">
&lt;a href="#git-submodule" class="header-anchor">#&lt;/a>
git submodule
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>git submodule init&lt;/code>初始化子模块，将子模块的配置信息存储在父仓库中。&lt;/p>
&lt;ul>
&lt;li>通常执行之后再执行更新子模块使用，如克隆带有子模块的仓库，没有加&lt;code>--recursive&lt;/code>，是不会克隆子模块的&lt;/li>
&lt;li>初始化子模块之后，执行更新子模块就会根据配置信息下载子模块&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git submodule update&lt;/code>根据父仓库子模块的配置信息更新子模块，如果没有初始化子模块可以加参数&lt;code>--init&lt;/code>，会下载与父项目绑定版本的子模块，若要更新加&lt;code>--remote&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>--init&lt;/code>初识化子模块&lt;/li>
&lt;li>&lt;code>--recursive&lt;/code>会递归下载子模块的子模块&lt;/li>
&lt;li>&lt;code>--remote&lt;/code>根据子模块远程仓库的配置信息更新子模块，会下载最新版本的子模块
&lt;ul>
&lt;li>注意更新之后要提交更新的版本，否则当在执行更新命令没有加&lt;code>--remote&lt;/code>时会退回与父仓库绑定的版本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git submodule add &amp;lt;repository&amp;gt; &amp;lt;path&amp;gt;&lt;/code>添加子模块。其中，&lt;code>&amp;lt;repository&amp;gt;&lt;/code>是子模块的远程仓库地址，&lt;code>&amp;lt;path&amp;gt;&lt;/code>是子模块在主项目中的路径。&lt;/p>
&lt;ul>
&lt;li>子模块可以当正常仓库使用。创建时&lt;code>&amp;lt;path&amp;gt;&lt;/code>路径不能存在文件，更克隆差不多。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="git-subtree">
&lt;a href="#git-subtree" class="header-anchor">#&lt;/a>
git subtree
&lt;/h3>&lt;ul>
&lt;li>作用：将一个仓库中的目录作为另一个仓库，可以指定分支&lt;/li>
&lt;li>用途：搭建项目网站时，将项目网站资源推送到gh-pages分支上
&lt;ul>
&lt;li>&lt;code>git subtree push --prefix=dist origin gh-pages&lt;/code>将目录添加到&lt;code>gh-pages&lt;/code>分支上，&lt;code>dist&lt;/code>为项目网站的目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git subtree push --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>将子目录的内容推送到远程仓库。它会将当前仓库中子目录的修改推送到指定的远程仓库和分支中。
&lt;ul>
&lt;li>注意：以这种推送的方式添加的&lt;code>subtree&lt;/code>不能执行&lt;code>subtree pull&lt;/code>命令，只有通过&lt;code>subtree add&lt;/code>添加的&lt;strong>才能都执行&lt;/strong>，但能够执行&lt;code>subtree push&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>git subtree pull --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>这个命令用于从远程仓库更新子目录的内容。它会拉取远程仓库的最新代码，并更新到当前仓库的子目录中。&lt;/li>
&lt;li>&lt;code>git subtree add --prefix=&amp;lt;prefix&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;branch&amp;gt;&lt;/code>这个命令用于将远程仓库的内容作为子目录添加到当前仓库中。&lt;code>&amp;lt;prefix&amp;gt;&lt;/code>是子目录的名称，&lt;code>&amp;lt;repository&amp;gt;&lt;/code>是远程仓库的地址，&lt;code>&amp;lt;branch&amp;gt;&lt;/code>是要合并的分支。&lt;/li>
&lt;/ul>
&lt;h3 id="git-rebase">
&lt;a href="#git-rebase" class="header-anchor">#&lt;/a>
git rebase
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>作用：rebase翻译成变基，顾名思义：改变基准点。可以使提交历史更加清晰和线性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>原因：通过合并两个不同的分支，提交历史会很错乱。而通过变基，会使得提交历史更加整洁和可读。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何实现：就是修改创建分支的起点（基准点），到最新的提交。起点变了，提交历史就简化了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>git rebase &amp;lt;base&amp;gt;&lt;/code>基于&lt;code>&amp;lt;base&amp;gt;&lt;/code>对当前分⽀进⾏rebase&lt;code>。&amp;lt;base&amp;gt;&lt;/code>可以是commit、分⽀名称、tag或相对于HEAD的commit。&lt;/li>
&lt;li>&lt;code>git rebase -i &amp;lt;base&amp;gt;&lt;/code>以交互模式对当前分⽀做rebase。&lt;/li>
&lt;li>rebase的过程中可能会出现冲突，解决冲突之后需要使用&lt;code>git add&lt;/code>命令将解决冲突后的文件标记为已解决，然后，使用&lt;code>git rebase --continue&lt;/code>命令继续rebase过程。Git会尝试继续应用剩余的提交。如果再次出现冲突，你需要重复上述解决冲突和继续rebase的步骤。&lt;/li>
&lt;li>如果在rebase过程中出现了问题，或者你决定放弃rebase操作，你可以使用&lt;code>git rebase --abort&lt;/code>命令来撤销整个rebase操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>git rebase的注意事项&lt;/p>
&lt;ul>
&lt;li>&lt;strong>避免对已经推送到远程仓库的提交执行rebase操作&lt;/strong>：这可能会导致提交历史的不一致，给其他协作者带来困扰。&lt;/li>
&lt;li>&lt;strong>保持工作目录干净&lt;/strong>：在执行rebase之前，确保你的工作目录中没有未提交的更改。&lt;/li>
&lt;li>&lt;strong>谨慎使用&lt;/strong>：由于rebase会改变提交历史，因此在与他人共享分支时要特别小心。通常，在公共分支上应该使用merge而不是rebase。&lt;/li>
&lt;/ul>
&lt;p>通过掌握git rebase的用法和注意事项，你可以更有效地管理你的Git仓库，保持代码的清晰和整洁。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;hr>
&lt;h2 id="扩展">
&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">#&lt;/a>
扩展
&lt;/h2>&lt;h3 id="gitignore文件">
&lt;a href="#gitignore%e6%96%87%e4%bb%b6" class="header-anchor">#&lt;/a>
.gitignore文件
&lt;/h3>&lt;p>Git提供了&lt;code>.gitignore&lt;/code>文件，用于指定哪些文件或目录应该被Git忽略，不纳入版本控制系统中。&lt;code>.gitignore&lt;/code>文件是一个文本文件，可以包含一些简单的规则，指定应该忽略哪些文件或目录。以下是一些.gitignore文件的示例规则：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>忽略所有以.tmp结尾的文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">*.tmp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的log文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">*.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的.idea目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.idea/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的build目录及其内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">build/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略根目录下的config.json文件，但不忽略子目录中的config.json文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">/config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的node_modules目录及其内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">node_modules/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>忽略所有的DS_Store文件（Mac OS X系统中的文件）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">.DS_Store
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>可以将这些规则写入.gitignore文件中，并将该文件添加到Git仓库中，以使Git忽略这些文件或目录。需要注意的是，即使某些文件或目录已经被添加到Git仓库中，也可以通过修改.gitignore文件来让Git忽略它们，但需要执行以下命令才能使.gitignore文件生效：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git rm -r --cached .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;update .gitignore&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些命令会删除Git缓存中已经添加的文件，然后重新添加文件并提交更改，以使.gitignore文件生效。&lt;/p>
&lt;p>&lt;strong>总结：&lt;/strong>&lt;/p>
&lt;p>当Git执行提交操作时，它会检查.gitignore文件中列出的文件和目录，并将它们从提交中排除。这是非常有用的，因为有些文件或目录不应该被纳入版本控制系统中，例如编译生成的文件、日志文件、临时文件等。&lt;/p>
&lt;p>.gitignore文件的语法是基于模式匹配的，其中的特殊字符有：&lt;/p>
&lt;ul>
&lt;li>*：匹配任意字符，但不包括路径分隔符（/）。&lt;/li>
&lt;li>?：匹配任意单个字符，但不包括路径分隔符（/）。&lt;/li>
&lt;li>/：路径分隔符，用于指定目录。&lt;/li>
&lt;li>!：用于否定模式，即不忽略指定的文件或目录。&lt;/li>
&lt;/ul>
&lt;p>可以在.gitignore文件中使用通配符、路径、注释等语法，以更精确地指定需要忽略的文件或目录。同时，可以在仓库的根目录下创建一个.gitignore文件，也可以在子目录中创建独立的.gitignore文件。&lt;/p>
&lt;hr>
&lt;h3 id="git账户认证">
&lt;a href="#git%e8%b4%a6%e6%88%b7%e8%ae%a4%e8%af%81" class="header-anchor">#&lt;/a>
git账户认证
&lt;/h3>&lt;ul>
&lt;li>当我们对远程仓库就行修改时，需要对应的权限，不是什么人都能够修改仓库。只有通过了git账户认证，才能修改对应的仓库。&lt;/li>
&lt;li>常见git账户认证的方式：
&lt;ul>
&lt;li>&lt;strong>SSH秘钥认证&lt;/strong>
&lt;ul>
&lt;li>这是Git中最常见的认证方式之一。用户首先生成一对公钥和私钥，然后将&lt;strong>公钥&lt;/strong>添加到Git服务器上的用户帐户中。当用户尝试与Git服务器进行通信时，Git将使用私钥进行身份验证。这种方式相对安全，因为私钥是保存在用户本地机器上的，不会被传输到Git服务器。&lt;/li>
&lt;li>秘钥生成命令：bash中运行&lt;code>ssh-keygen&lt;/code>,一直回车就行，秘钥位置：主目录下的&lt;code>.ssh&lt;/code>目录&lt;/li>
&lt;li>公钥设置位置：github账户&lt;code>Settings&lt;/code>-&amp;gt;&lt;code>SSH and GPG keys&lt;/code>-&amp;gt;&lt;code>New SSH key&lt;/code>将公钥复制粘贴保存就行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>HTTPS认证&lt;/strong>
&lt;ul>
&lt;li>在这种方式中，用户需要提供&lt;strong>用户名&lt;/strong>和&lt;strong>密码&lt;/strong>进行身份验证。用户需要在Git服务器上创建一个用户帐户，并将其关联到本地的Git仓库中。当用户执行需要身份验证的操作时，Git会要求输入用户名和密码。这种方式相对简单，适用于个人项目或小型团队。&lt;/li>
&lt;li>设置位置：在使用Git进行操作时，如push或pull，系统会提示你输入用户名和密码进行身份验证。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>访问令牌（Personal Access Token）认证&lt;/strong>：不常用
&lt;ul>
&lt;li>访问令牌提供了一种更安全、更灵活的身份验证方式，因为它可以限制令牌的使用权限，并且可以随时撤销或重新生成令牌。&lt;/li>
&lt;li>设置位置：github账户&lt;code>Settings&lt;/code>-&amp;gt;&lt;code>Developer Settings&lt;/code>-&amp;gt;&lt;code>Personal access tokens&lt;/code>-&amp;gt;&lt;code>Tokens (classic)&lt;/code>-&amp;gt;&lt;code>Generate new token&lt;/code>，然后根据自己的需求设置token的权限。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="ssh-keygen">
&lt;a href="#ssh-keygen" class="header-anchor">#&lt;/a>
ssh-keygen
&lt;/h4>&lt;p>&lt;code>ssh-keygen&lt;/code>命令是一个用于生成、管理和转换SSH认证密钥的工具。它支持RSA和DSA两种认证密钥类型，并且提供了多种选项和参数，以满足不同的需求。&lt;/p>
&lt;p>使用&lt;code>ssh-keygen&lt;/code>命令，你可以生成新的密钥对，指定密钥的长度、类型以及保存的文件名。生成的私钥将保存在本地，而公钥则用于在SSH服务器上进行身份验证。&lt;/p>
&lt;p>以下是一些常用的&lt;code>ssh-keygen&lt;/code>命令选项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-t&lt;/code>：指定要创建的密钥类型，默认为RSA。&lt;/li>
&lt;li>&lt;code>-b&lt;/code>：指定密钥长度（以位为单位）。对于RSA密钥，最小要求是768位，默认是2048位。对于DSA密钥，长度必须是1024位（根据FIPS 1862标准规定）。&lt;/li>
&lt;li>&lt;code>-f&lt;/code>：指定用于保存密钥的文件名。如果不指定，将使用默认值&lt;code>id_rsa&lt;/code>（对于私钥）和&lt;code>id_rsa.pub&lt;/code>（对于公钥）。&lt;/li>
&lt;li>&lt;code>-C&lt;/code>：提供一个新注释，通常用于标识密钥的用途或所有者。&lt;/li>
&lt;li>&lt;code>-P&lt;/code> 和 &lt;code>-N&lt;/code>：分别用于提供旧密码和新密码，以保护私钥文件。如果留空，则表示不需要密码。&lt;/li>
&lt;/ul>
&lt;p>在生成密钥对后，你可以将公钥复制到需要访问的SSH服务器上，通常是将公钥内容追加到服务器的&lt;code>~/.ssh/authorized_keys&lt;/code>文件中。这样，当你使用SSH客户端连接到服务器时，客户端将使用私钥进行身份验证，如果验证成功，你将能够无需输入密码即可登录到服务器。&lt;/p>
&lt;p>请注意，私钥的安全性至关重要。私钥应该妥善保管，并且不应该与其他人共享。同时，定期更换密钥对也是保持安全性的好习惯。&lt;/p>
&lt;p>除了生成和管理密钥对，&lt;code>ssh-keygen&lt;/code>还提供了其他功能，如转换密钥格式、读取密钥文件等。你可以通过查看&lt;code>ssh-keygen&lt;/code>的帮助文档或手册页（通过运行&lt;code>man ssh-keygen&lt;/code>命令）来获取更详细的信息和用法示例。&lt;/p></description></item></channel></rss>