<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Arlettebrook's blog</title><link>https://arlettebrook.github.io/categories/linux/</link><description>Recent content in Linux on Arlettebrook's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Arlettebrook</copyright><lastBuildDate>Thu, 30 May 2024 21:52:12 +0800</lastBuildDate><atom:link href="https://arlettebrook.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim Introduction</title><link>https://arlettebrook.github.io/p/vim-introduction/</link><pubDate>Thu, 30 May 2024 21:52:12 +0800</pubDate><guid>https://arlettebrook.github.io/p/vim-introduction/</guid><description>&lt;hr>
&lt;h2 id="安装vim">
&lt;a href="#%e5%ae%89%e8%a3%85vim" class="header-anchor">#&lt;/a>
安装vim
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/vim/vim" target="_blank" rel="noopener"
>Vim&lt;/a> （&lt;a class="link" href="https://www.vim.org/" target="_blank" rel="noopener"
>官网&lt;/a>） 是一个非常流行的文本编辑器，可以在多种操作系统上安装和使用。下面是如何在不同系统上安装 Vim 的方法：&lt;/p>
&lt;h3 id="在-linux-上安装-vim">
&lt;a href="#%e5%9c%a8-linux-%e4%b8%8a%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
在 Linux 上安装 Vim
&lt;/h3>&lt;p>大多数 Linux 发行版都在其软件包管理器中包含 Vim。可以使用包管理器来安装它。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Debian/Ubuntu 系列&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>CentOS&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo yum install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="在-macos-上安装-vim">
&lt;a href="#%e5%9c%a8-macos-%e4%b8%8a%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
在 macOS 上安装 Vim
&lt;/h3>&lt;p>macOS 通常预装了 Vim，但可能不是最新版本。你可以使用 Homebrew 来安装或更新 Vim。&lt;/p>
&lt;p>使用 Homebrew 安装&lt;/p>
&lt;ul>
&lt;li>
&lt;p>确保 Homebrew 已安装。你可以在终端中运行以下命令来安装 Homebrew：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">/bin/bash -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 Homebrew 安装 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="在-windows-上安装-vim">
&lt;a href="#%e5%9c%a8-windows-%e4%b8%8a%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
&lt;strong>在 Windows 上安装 Vim&lt;/strong>
&lt;/h3>&lt;p>在 Windows 上，你可以通过以下方法安装 Vim：&lt;/p>
&lt;p>&lt;strong>直接下载安装程序&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>访问 &lt;a class="link" href="https://www.vim.org/download.php" target="_blank" rel="noopener"
>Vim 官方下载页面&lt;/a>。推荐&lt;a class="link" href="https://github.com/vim/vim-win32-installer/releases/latest" target="_blank" rel="noopener"
>vim-win32-installer&lt;/a>（会及时提供最新编译版）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &amp;ldquo;PC: MS-DOS and MS-Windows&amp;rdquo; 部分，下载适用于 Windows 的安装程序（通常是 &lt;code>gvim&lt;/code> 安装程序）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行下载的安装程序，按照提示完成安装。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完成之后建议添加如下两个环境变量。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Path环境变量：添加的值为vim安装路径里面的具体版本。如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>D:\Vim\vim91&lt;/code> or &lt;code>%VIM%\vim91&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080.png"
width="930"
height="375"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080_hu05a0e34d1eba5ad560312f13394693eb_30274_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080_hu05a0e34d1eba5ad560312f13394693eb_30274_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240531122127080"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>环境变量VIM：值为vim的安装路径。如&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284.png"
width="930"
height="375"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284_hua4ef87cb928a3886ca7ee8a8cfe7fb50_18966_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284_hua4ef87cb928a3886ca7ee8a8cfe7fb50_18966_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240531122015284"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Windows版本的vim提供了卸载程序。在程序和功能中找到即可卸载。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Windows安装结束后，你会发现开始菜单中有好多Vim，而且名字都不一样。&lt;/p>
&lt;p>他们的区别如下：&lt;/p>
&lt;ol>
&lt;li>有g和没有g
gVim 是在windows下的Gui图形用户界面的的 vim (GUI Vim)，支持windows的一些快捷方式，支持鼠标操作
vim 是在windows下的类似linux vi 编辑的界面，只能用键盘操作。
vim的操作指令同时适用于gVim&lt;/li>
&lt;li>Vim, Vim Diff, Vim Easy, Vim Read-only
Diff 是用来对比两个文件内容用的，直接打开挺没用的，不过直接拖2个文件到快捷方式上倒是可行；
Easy启动的时候是insert模式，适合普通windows用户的习惯；
Read-Only的用途：比如用read-only打开已经用vim打开过的文件，就不会提示让人烦躁的.swp文件存在的问题；&lt;/li>
&lt;/ol>
&lt;h3 id="通用方法编译安装-vim">
&lt;a href="#%e9%80%9a%e7%94%a8%e6%96%b9%e6%b3%95%e7%bc%96%e8%af%91%e5%ae%89%e8%a3%85-vim" class="header-anchor">#&lt;/a>
通用方法：编译安装 Vim
&lt;/h3>&lt;p>如果你希望安装最新版本的 Vim 或自定义编译选项，可以从源代码编译安装。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装必要的依赖项（以 Ubuntu 为例）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install git make ncurses-dev gcc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>克隆 Vim 的源代码仓库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/vim/vim.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置并编译 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./configure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="在ide中安装vim插件">
&lt;a href="#%e5%9c%a8ide%e4%b8%ad%e5%ae%89%e8%a3%85vim%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
在IDE中安装vim插件
&lt;/h3>&lt;p>许多现代集成开发环境（IDE）提供了 Vim 模拟插件。我们在享受 IDE 强大功能的同时，可以继续使用Vim的编辑风格。&lt;/p>
&lt;p>要在IDE中安装vim插件，只需要在对应IDE的插件市场搜索安装即可，我常用的：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>JetBrains系列&lt;/strong>：IdeaVim
&lt;ul>
&lt;li>可以配置 &lt;code>~/.ideavimrc&lt;/code> 文件来个性化设置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Visual Studio Code (VS Code)&lt;/strong>：Vim
&lt;ul>
&lt;li>可通过 &lt;code>settings.json&lt;/code> 文件进行配置和自定义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Sublime Text&lt;/strong>：Vintageous
&lt;ul>
&lt;li>可以通过 Sublime Text 的设置进行配置和自定义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="配置vim">
&lt;a href="#%e9%85%8d%e7%bd%aevim" class="header-anchor">#&lt;/a>
配置vim
&lt;/h2>&lt;p>Vim 是一个高度可配置的文本编辑器，可以通过编辑其配置文件来调整和扩展其功能。&lt;/p>
&lt;h3 id="配置文件介绍">
&lt;a href="#%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e4%bb%8b%e7%bb%8d" class="header-anchor">#&lt;/a>
配置文件介绍
&lt;/h3>&lt;p>Vim没有提供图形化的配置界面，配置Vim都是通过配置文件（&lt;code>.vimrc&lt;/code>）实现的：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在 Unix 或 Linux 系统中，&lt;code>.vimrc&lt;/code> 文件通常位于用户的主目录中，例如 &lt;code>~/.vimrc&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 Windows 系统中，&lt;code>.vimrc&lt;/code> 文件可以放在用户主目录下，例如 &lt;code>C:\Users\&amp;lt;username&amp;gt;\_vimrc&lt;/code>，或者 &lt;code>C:\Users\&amp;lt;username&amp;gt;\.vimrc&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**总结：Vim配置文件都在用户的家目录下，名称都可以用&lt;code>.vimrc&lt;/code>表示。**没有手动创建一个空文件，直接使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>要修改配置，就在&lt;code>.vimrc&lt;/code>文件中修改就行。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>注意事项&lt;/strong>&lt;/em>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>注释是以&lt;code>&amp;quot;&lt;/code>开头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部分vim插件版的配置文件名并不是&lt;code>.vimrc&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>如ideavim：&lt;code>~/.ideavimr&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这里总结一下git bash内置的vim插件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>该vim版本也可以用&lt;code>~/.vimrc&lt;/code>进行配置值。&lt;/p>
&lt;ul>
&lt;li>默认的配置文件在&lt;code>git安装位置/etc/vimrc&lt;/code>。只读。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>如果期望git bash不使用内置的vim插件&lt;/strong>，使用的是自己安装的vim版本：&lt;/p>
&lt;ul>
&lt;li>可以修改git bash的配置文件&lt;code>.bashrc&lt;/code>，添加vim的安装位置。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/d/vim/vim91:&lt;/span>&lt;span class="nv">$PATH&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>原理：使自己安装的vim版本优先级最高。先加载。尽管我在PATH变量中添加了自己安装的vim版本路径，但是无法保证谁的优先级高，所以使用了上面办法，使自己安装的vim版本优先级最高。先加载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="常见的-vim-配置项">
&lt;a href="#%e5%b8%b8%e8%a7%81%e7%9a%84-vim-%e9%85%8d%e7%bd%ae%e9%a1%b9" class="header-anchor">#&lt;/a>
常见的 Vim 配置项
&lt;/h3>&lt;p>&lt;code>.vimrc&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>基本设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">filetype on &lt;span class="s2">&amp;#34;开启文件类型侦测
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">filetype indent on &amp;#34;&lt;/span>适应不同语言的缩进
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">syntax &lt;span class="nb">enable&lt;/span> &lt;span class="s2">&amp;#34;开启语法高亮功能
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">syntax on &amp;#34;&lt;/span>允许使用用户配色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>显示设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">shortmess&lt;/span>&lt;span class="o">=&lt;/span>atI &lt;span class="s2">&amp;#34;不显示启动提示信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set laststatus=2 &amp;#34;&lt;/span>总是显示状态栏,命令行（在状态行下）的高度，默认为1，这里是2。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 我的状态行显示的内容（包括文件类型和解码）后续用插件美化。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">statusline&lt;/span>&lt;span class="o">=&lt;/span>%F%m%r%h%w&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">FORMAT&lt;/span>&lt;span class="o">=&lt;/span>%&lt;span class="o">{&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>ff&lt;span class="o">}]&lt;/span>&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">TYPE&lt;/span>&lt;span class="o">=&lt;/span>%Y&lt;span class="o">]&lt;/span>&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">POS&lt;/span>&lt;span class="o">=&lt;/span>%l,%v&lt;span class="o">][&lt;/span>%p%%&lt;span class="o">]&lt;/span>&lt;span class="se">\ &lt;/span>%&lt;span class="o">{&lt;/span>strftime&lt;span class="o">(&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>%d/%m/%y&lt;span class="se">\ &lt;/span>-&lt;span class="se">\ &lt;/span>%H:%M&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="o">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">cmdheight&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="s2">&amp;#34; 命令行（在状态行下）的高度，默认为1，这里是2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set ruler &amp;#34;&lt;/span>显示光标位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> number &lt;span class="s2">&amp;#34;显示行号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> cursorline &lt;span class="s2">&amp;#34;高亮显示当前行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> cursorcolumn &lt;span class="s2">&amp;#34;高亮显示当前列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set hlsearch &amp;#34;&lt;/span> 高亮搜索结果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> incsearch &lt;span class="s2">&amp;#34;边输边高亮
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set ignorecase &amp;#34;&lt;/span>搜索时忽略大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> smartcase &lt;span class="s2">&amp;#34; 智能大小写匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> relativenumber &lt;span class="s2">&amp;#34;其他行显示相对行号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set scrolloff=5 &amp;#34;&lt;/span>垂直滚动时光标距底部位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>编码设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">fileencodings&lt;/span>&lt;span class="o">=&lt;/span>utf-8,gb2312,gbk,gb18030,cp936 &lt;span class="s2">&amp;#34; 检测文件编码,将fileencoding设置为最终编码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set fileencoding=utf-8 &amp;#34;&lt;/span> 保存时的文件编码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">termencoding&lt;/span>&lt;span class="o">=&lt;/span>utf-8 &lt;span class="s2">&amp;#34; 终端的输出字符编码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set encoding=utf-8 &amp;#34;&lt;/span> VIM打开文件使用的内部编码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>编辑设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> expandtab &lt;span class="s2">&amp;#34;扩展制表符为空格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set tabstop=4 &amp;#34;&lt;/span>制表符占空格数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">softtabstop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="s2">&amp;#34;将连续数量的空格视为一个制表符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set shiftwidth=4 &amp;#34;&lt;/span>自动缩进所使用的空格数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">textwidth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span> &lt;span class="s2">&amp;#34;设置一行内容的宽度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set linebreak &amp;#34;&lt;/span>防止单词内部折行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">wrapmargin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="s2">&amp;#34;指定折行处与右边缘空格数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set smarttab &amp;#34;&lt;/span>使用智能制表符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> smartindent &lt;span class="s2">&amp;#34;智能缩进(好处是修改代码时会根据代码规则自动缩进，坏处是当用`:n,m&amp;gt;`对齐左侧的注释将不会被移动)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> autoindent &lt;span class="s2">&amp;#34;自动缩进(这两个差不多，感觉在大括号自动配对时，用智能缩进好点)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set wildmenu &amp;#34;&lt;/span>vim命令自动补全
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> autochdir &lt;span class="s2">&amp;#34;自动定位当前目录。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set wrap &amp;#34;&lt;/span>启用自动换行&lt;span class="s2">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set autoread &amp;#34;&lt;/span>文件改动时自动载入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">t_Co&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">256&lt;/span> &lt;span class="s2">&amp;#34;terminal Color 支持256色(默认是8色)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">hi comment ctermfg=6 &amp;#34;&lt;/span>设置注释颜色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> magic &lt;span class="s2">&amp;#34; 设置魔术
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guioptions-=T &amp;#34;&lt;/span> 隐藏gui工具栏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> guioptions-&lt;span class="o">=&lt;/span>m &lt;span class="s2">&amp;#34; 隐藏gui菜单栏
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guioptions-=r &amp;#34;&lt;/span> 删去gui滚动条&lt;span class="s2">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 使用更友好的颜色方案
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">colorscheme desert
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 设置背景色
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set background=dark
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 显示命令输入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> showcmd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;设置gui字体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guifont=Courier\ New:h20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 设置宽高
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;set lines=15 columns=50
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 启用真彩色颜色支持，让配色方案显示更好。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> termguicolors
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意配置了上面大部分设置，在大多数主题中只需要在&lt;code>vim-plug&lt;/code>后面选择颜色方案&lt;code>colorscheme&lt;/code>即可。&lt;/p>
&lt;hr>
&lt;h2 id="插件使用">
&lt;a href="#%e6%8f%92%e4%bb%b6%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
插件使用
&lt;/h2>&lt;p>Vim 的功能可以通过插件进一步扩展。使用插件可以增强Vim的功能，如语法高亮、代码补全、文件浏览器、版本控制集成、模糊搜索等。&lt;/p>
&lt;p>为了方便安装，更新，删除插件，我们一般使用插件管理器进行插件管理。&lt;/p>
&lt;p>推荐使用的插件管理器是&lt;a class="link" href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener"
>vim-plug&lt;/a>。与其他插件管理器（如 Vundle 和 Pathogen）相比，&lt;code>vim-plug&lt;/code> 提供了更快的性能和更多的功能，如并行安装插件、延迟加载插件、使用简单等。&lt;/p>
&lt;h3 id="安装-vim-plug">
&lt;a href="#%e5%ae%89%e8%a3%85-vim-plug" class="header-anchor">#&lt;/a>
安装 &lt;code>vim-plug&lt;/code>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>下载并安装 &lt;code>vim-plug&lt;/code>&lt;/strong>： 在终端中运行以下命令，这会将 &lt;code>vim-plug&lt;/code> 下载到你的 Vim 自动加载目录下：&lt;/p>
&lt;p>Linux：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Windows：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -fLo ~/vimfiles/autoload/plug.vim --create-dirs &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：需要拥有curl命令，并且终端能够访问外网。&lt;/p>
&lt;p>如果没有，可以手动下载&lt;a class="link" href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" target="_blank" rel="noopener"
>plug.vim&lt;/a>，并将文件放在 windows 中的 &lt;code>~/vimfiles/autoload&lt;/code> 或 Linux 中的 &lt;code>~/.vim/autoload&lt;/code> 文件夹内，没有手动创建。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="插件推荐">
&lt;a href="#%e6%8f%92%e4%bb%b6%e6%8e%a8%e8%8d%90" class="header-anchor">#&lt;/a>
插件推荐
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>状态栏和主题&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/itchyny/lightline.vim" target="_blank" rel="noopener"
>lightline.vim&lt;/a>：轻量级状态栏插件。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener"
>vim-airline&lt;/a>：高级状态栏插件，提供丰富的功能和美观的主题。&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/dracula/dracula-theme" target="_blank" rel="noopener"
>dracula-theme&lt;/a>**主题&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/kaicataldo/material.vim" target="_blank" rel="noopener"
>material.vim&lt;/a>**主题&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/tribela/vim-transparent" target="_blank" rel="noopener"
>vim-transparent&lt;/a>**&lt;strong>终端透明&lt;/strong>。
&lt;ul>
&lt;li>这个插件，可以配置让其他插件也透明。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ajmwagar/vim-deus" target="_blank" rel="noopener"
>vim-deus&lt;/a>主题&lt;/li>
&lt;li>配置主题建议都配置&lt;code>set termguicolors&lt;/code>&amp;quot; &lt;strong>启用真彩色颜色支持&lt;/strong>，&lt;strong>让配色方案显示更好。会让终端透明效果更好。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如果喜欢用gvim(我用sublme的&lt;a class="link" href="#%e5%9c%a8IDE%e4%b8%ad%e5%ae%89%e8%a3%85vim%e6%8f%92%e4%bb%b6" >Vim插件&lt;/a>)。可以：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>全屏显示：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/derekmcloughlin/gvimfullscreen_win32" target="_blank" rel="noopener"
>gvimfullscreen_win32&lt;/a>
32位系统:
- 下载&lt;code>gvimfullscreen.dll&lt;/code>
- 将其放入&lt;code>gvim.exe&lt;/code>同目录的文件夹下
- 配置文件中&lt;code>map &amp;lt;F11&amp;gt; &amp;lt;Esc&amp;gt;:call libcallnr(&amp;quot;gvimfullscreen.dll&amp;quot;, &amp;quot;ToggleFullScreen&amp;quot;, 0)&amp;lt;CR&amp;gt;&lt;/code>&lt;/p>
&lt;p>64位系统同上, 用&lt;code>gvimfullscreen_64&lt;/code>代替&lt;/p>
&lt;p>现在你就可以用&lt;code>&amp;lt;F11&amp;gt;&lt;/code>来进行全屏操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>透明显示&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mattn/vimtweak" target="_blank" rel="noopener"
>vimtweak&lt;/a>&lt;/p>
&lt;p>方法基本同上, 选择&lt;code>vimtweak32.dll&lt;/code>或&lt;code>vimtweak64.dll&lt;/code>放入文件夹, 在vimrc中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">au GUIEnter * call libcallnr&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;vimtweak64.dll&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;SetAlpha&amp;#34;&lt;/span>, 200&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中数值200可以选择0-255, 255为不透明&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>一组默认配置（每个人都同意默认的配置）：&lt;a class="link" href="https://github.com/tpope/vim-sensible" target="_blank" rel="noopener"
>vim-sensible&lt;/a>：插件的功能：&lt;/p>
&lt;ol>
&lt;li>&lt;code>'backspace'&lt;/code>：在插入模式下按退格键可删除任何内容。默认只能删除新添加的。&lt;/li>
&lt;li>&lt;code>'incsearch'&lt;/code>：按回车键之前开始搜索。&lt;/li>
&lt;li>&lt;code>'listchars'&lt;/code>：使&lt;code>:set list&lt;/code>（可见空白）更漂亮。&lt;/li>
&lt;li>&lt;code>'scrolloff'&lt;/code>：始终在光标上方/下方显示至少一行。&lt;/li>
&lt;li>&lt;code>'autoread'&lt;/code>：自动加载文件更改。您可以按 撤消&lt;code>u&lt;/code>。&lt;/li>
&lt;li>&lt;code>runtime! macros/matchit.vim&lt;/code>：加载 Vim 附带的 matchit.vim 版本。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文件浏览和导航&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/preservim/nerdtree" target="_blank" rel="noopener"
>NERDTree&lt;/a>：文件系统浏览器，提供树状目录视图。
&lt;ul>
&lt;li>也可以用内置的&lt;code>:Vex&lt;/code>浏览目录。它没有目录树结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/junegunn/fzf.vim" target="_blank" rel="noopener"
>fzf.vim&lt;/a>：模糊查找工具，基于 &lt;code>fzf&lt;/code> 命令行工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语法高亮和语法检查&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/sheerun/vim-polyglot" target="_blank" rel="noopener"
>vim-polyglot&lt;/a>：支持多种编程语言的语法高亮。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/dense-analysis/ale" target="_blank" rel="noopener"
>ALE&lt;/a>：异步语法检查和修复工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码补全&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/ycm-core/YouCompleteMe" target="_blank" rel="noopener"
>YouCompleteMe&lt;/a>：强大的代码补全插件，支持多种编程语言。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/neoclide/coc.nvim" target="_blank" rel="noopener"
>coc.nvim&lt;/a>：基于 VSCode 插件的代码补全和语言服务器支持。&lt;/li>
&lt;li>&lt;strong>没打算用vim写代码，没花时间去配置&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>版本控制&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-fugitive" target="_blank" rel="noopener"
>vim-fugitive&lt;/a>：Git 集成插件，提供强大的 Git 操作支持。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/airblade/vim-gitgutter" target="_blank" rel="noopener"
>gitgutter&lt;/a>：在编辑器中显示 Git 的改动信息。&lt;/li>
&lt;li>都是在终端中使用git，我没有配置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其他实用插件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/machakann/vim-highlightedyank" target="_blank" rel="noopener"
>vim-highlightedyank&lt;/a>：让复制区域高亮。（ideavim内置插件。）&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/jiangmiao/auto-pairs" target="_blank" rel="noopener"
>auto-pairs&lt;/a>：成对添加、删除、高亮括号。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener"
>surround.vim&lt;/a>：轻松操作成对符号（例如引号、括号）。
&lt;ul>
&lt;li>auto-pairs的扩展。成对修改括号为别的括号。如&lt;code>cs&amp;quot;'&lt;/code>将成对&lt;code>&amp;quot;&lt;/code>改为&lt;code>'&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-commentary" target="_blank" rel="noopener"
>commentary.vim&lt;/a>：快速注释和取消注释代码。
&lt;ul>
&lt;li>在普通模式下，移动光标到要注释的行，然后使用 &lt;code>gcc&lt;/code> 注释/取消注释当前行。&lt;/li>
&lt;li>在可视模式下，选择要注释的代码块，然后使用 &lt;code>gc&lt;/code> 注释/取消注释选定的代码。&lt;/li>
&lt;li>&lt;strong>很智能，好用。&lt;/strong>（ideavim内置插件。）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="配置插件">
&lt;a href="#%e9%85%8d%e7%bd%ae%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
配置插件
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>编辑 &lt;code>.vimrc&lt;/code> 文件，添加插件管理器配置&lt;/strong>：&lt;/p>
&lt;p>windwos为例，将插件安装位置保存在&lt;code>$VIM/vimfiles/plugged&lt;/code>，将下面代码追加到&lt;code>.vimrc&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>插件vim-plug&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 初始化 vim-plug
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Linux上默认
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; call plug#begin()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> windows上自定义插件安装位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#begin&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;$VIM/vimfiles/plugged&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; The default plugin directory will be as follows:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - Vim &lt;span class="o">(&lt;/span>Linux/macOS&lt;span class="o">)&lt;/span>: &lt;span class="s1">&amp;#39;~/.vim/plugged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - Vim (Windows): &amp;#39;~/vimfiles/plugged&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - Neovim &lt;span class="o">(&lt;/span>Linux/macOS/Windows&lt;span class="o">)&lt;/span>: stdpath&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> . &lt;span class="s1">&amp;#39;/plugged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; You can specify a custom plugin directory by passing it as the argument
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - e.g. &lt;span class="sb">`&lt;/span>call plug#begin&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;~/.vim/plugged&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - Avoid using standard Vim directory names like &amp;#39;plugin&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 添加插件列表,确保使用的是单引号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; Plug &amp;#39;tpope/vim-sensible&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Plug &lt;span class="s1">&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; Plug &amp;#39;itchyny/lightline.vim&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Call plug#end to update &lt;span class="p">&amp;amp;&lt;/span>runtimepath and initialize the plugin system.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - It automatically executes `filetype plugin indent on` and `syntax enable`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 结束插件配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#end&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; You can revert the settings after the call like so:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> filetype indent off &lt;span class="s2">&amp;#34; Disable file-type-specific indentation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> syntax off &lt;span class="s2">&amp;#34; Disable syntax highlighting
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;插件vim-plug结束&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>添加插件&lt;/strong>：我们只需要将插件添加到&lt;code>Plug ''&lt;/code>里面即可，别忘记取消注释。插件名一般为为&lt;code>github作者/仓库名&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安装插件&lt;/strong>：打开vim运行&lt;code>:PlugInstall&lt;/code>命令来安装 &lt;code>.vimrc&lt;/code> 中定义的插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>更新插件&lt;/strong>： 要更新所有插件，运行：&lt;code>:PlugUpdate&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>清除未使用的插件&lt;/strong>： 如果你从配置中移除了一些插件，可以运行&lt;code>:PlugClean&lt;/code>命令来删除未使用的插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查插件状态&lt;/strong>： 要检查插件的状态和版本，运行&lt;code>:PlugStatus&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Done&lt;/code>表示成功，&lt;code>:q&lt;/code>退出插件管理器。失败退出重试。或R重试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插件安装成功示例：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059_huee49f788443b9dc26c2bb4e8763bb219_1388323_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059_huee49f788443b9dc26c2bb4e8763bb219_1388323_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=":PlugInstall"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="效果展示">
&lt;a href="#%e6%95%88%e6%9e%9c%e5%b1%95%e7%a4%ba" class="header-anchor">#&lt;/a>
&lt;strong>效果展示&lt;/strong>
&lt;/h2>&lt;p>vim配置效果：&lt;/p>
&lt;p>material：default：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165_huee49f788443b9dc26c2bb4e8763bb219_1505492_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165_huee49f788443b9dc26c2bb4e8763bb219_1505492_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="material：default"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>material：palenight：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541_huee49f788443b9dc26c2bb4e8763bb219_1509648_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541_huee49f788443b9dc26c2bb4e8763bb219_1509648_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="material：palenight"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>区别不是很大。&lt;/p>
&lt;p>deus：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263_huee49f788443b9dc26c2bb4e8763bb219_1510375_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263_huee49f788443b9dc26c2bb4e8763bb219_1510375_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="deus"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>我的&lt;a class="link" href="https://github.com/arlettebrook/arlettebrook/tree/main/vim.cfg" target="_blank" rel="noopener"
>完整配置&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="扩展">
&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">#&lt;/a>
扩展
&lt;/h2>&lt;h3 id="自定义快捷键">
&lt;a href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%bf%ab%e6%8d%b7%e9%94%ae" class="header-anchor">#&lt;/a>
自定义快捷键
&lt;/h3>&lt;p>在Vim中自定义快捷键，其实就创建快捷键与命令之间的映射关系。&lt;/p>
&lt;p>用到的命令是&lt;code>map&lt;/code>或&lt;code>noremap&lt;/code>。注意：要将命令配置在&lt;code>.vimrc&lt;/code>中。&lt;/p>
&lt;p>格式：&lt;code>映射命令 自定义快捷键 命令&lt;/code>，中间用空格分隔开。&lt;/p>
&lt;p>前面有&lt;code>n, i, v, c&lt;/code>中的任意一个字符表示对应的模式。如&lt;code>nmap&lt;/code>或&lt;code>nnoremap&lt;/code>表示Normal模式下的映射关系。没有表示所有模式的映射关系。&lt;/p>
&lt;p>&lt;strong>二者区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>map&lt;/code>会递归解析映射。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>noremap&lt;/code>不会递归解析映射。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>意思是如果命令中有别的映射，一个会解析，一个不会。如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">nmap yy dd &lt;span class="c1"># 修改了默认映射。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap ,y &lt;span class="s2">&amp;#34;*yy # 会执行复制一行命令到剪切板。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">nmap ,d &amp;#34;&lt;/span>*yy &lt;span class="c1"># 会删除一行命令到剪切板。解析了yy映射。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>看需求使用，是否需要递归映射。没有需求推荐使用&lt;code>noremap&lt;/code>创建映射，防止映射多了，递归解析，导致无限循环或意外行为。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当自定义的快捷键与vim预定义的快捷键冲突时，自定义的快捷键会覆盖预定义的快捷键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看自定义的快捷键&lt;code>:map&lt;/code>。或者查看&lt;code>.vimrc&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>:verbose map&lt;/code> 命令可以查看详细的映射信息，包括映射是在哪里定义的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>取消自定义的快捷键：在自定义快捷键的后面添加&lt;code>u+自定义的快捷键&lt;/code>。如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">nnoremap ,y &lt;span class="s2">&amp;#34;*yy # 自定义快捷键
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">unnoremap ,y # 取消快捷键
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>常用键表示法&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>普通字符&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>直接输入字母、数字、符号。例如：&lt;code>a&lt;/code>, &lt;code>b&lt;/code>, &lt;code>1&lt;/code>, &lt;code>2&lt;/code>, &lt;code>#&lt;/code>, &lt;code>*&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>控制键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>&amp;lt;Ctrl&amp;gt;&lt;/code>（或 &lt;code>&amp;lt;C&amp;gt;&lt;/code>）表示控制键。例如：&lt;code>&amp;lt;C-a&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>功能键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>&amp;lt;F1&amp;gt;&lt;/code> 到 &lt;code>&amp;lt;F12&amp;gt;&lt;/code> 表示功能键。例如：&lt;code>&amp;lt;F2&amp;gt;&lt;/code> 表示功能键 &lt;code>F2&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特殊键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用尖括号包围的特殊键表示法。例如：
&lt;ul>
&lt;li>&lt;code>&amp;lt;Esc&amp;gt;&lt;/code>：Escape 键&lt;/li>
&lt;li>&lt;code>&amp;lt;CR&amp;gt;&lt;/code>：回车键（Enter）&lt;/li>
&lt;li>&lt;code>&amp;lt;Tab&amp;gt;&lt;/code>：制表符键（Tab）&lt;/li>
&lt;li>&lt;code>&amp;lt;Space&amp;gt;&lt;/code>：空格键（Space）&lt;/li>
&lt;li>&lt;code>&amp;lt;BS&amp;gt;&lt;/code>：退格键（Backspace）&lt;/li>
&lt;li>&lt;code>&amp;lt;Del&amp;gt;&lt;/code>：删除键（Delete）&lt;/li>
&lt;li>&lt;code>&amp;lt;Up&amp;gt;&lt;/code>：上箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Down&amp;gt;&lt;/code>：下箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Left&amp;gt;&lt;/code>：左箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Right&amp;gt;&lt;/code>：右箭头键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组合键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以组合使用。例如：&lt;code>&amp;lt;C-Space&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+Space&lt;/code>，&lt;code>&amp;lt;C-Left&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+Left&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Leader&lt;/strong> 键&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用 &lt;code>&amp;lt;leader&amp;gt;&lt;/code> 键可以避免与默认快捷键冲突。默认情况下，&lt;code>&amp;lt;leader&amp;gt;&lt;/code> 键是反斜杠 &lt;code>\&lt;/code>，但你可以在 &lt;code>.vimrc&lt;/code> 中重新定义它：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">let&lt;/span> &lt;span class="nv">mapleader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;,&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>然后你可以使用 &lt;code>&amp;lt;leader&amp;gt;&lt;/code> 键创建自定义快捷键：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;leader&amp;gt;y &lt;span class="s2">&amp;#34;*yy
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，你的自定义快捷键将使用 &lt;code>,y&lt;/code> 来触发，并且&lt;code>&amp;lt;leader&amp;gt;&lt;/code>可以更改为你喜欢但不冲突的键。逗号跟反斜杠就是，不过我更喜欢用逗号。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>示例：在vim中没有快捷键删除光标后面的字符。我们来自定义映射实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; ctrl-k：删除光标后面的字符，部分版本不支持
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">nnoremap &amp;lt;C-k&amp;gt; D
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">inoremap &amp;lt;C-k&amp;gt; &amp;lt;Esc&amp;gt;lC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">vnoremap &amp;lt;C-k&amp;gt; d
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 定义删除光标后所有字符的函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span>! DeleteAfterCursor&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34; 获取当前光标在命令行中的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> let current_pos = getcmdpos()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&lt;/span> 获取当前命令行的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">let&lt;/span> &lt;span class="nv">cmdline&lt;/span> &lt;span class="o">=&lt;/span> getcmdline&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34; 截取字符串，获取光标前的部分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> let new_cmdline = strpart(cmdline, 0, current_pos - 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&lt;/span> 设置新的命令行内容，只保留光标前的部分，去掉光标位置及其后的所有字符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call setcmdline&lt;span class="o">(&lt;/span>new_cmdline&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">endfunction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 在命令行模式下映射 &amp;lt;C-k&amp;gt; 为删除光标后的所有字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 用表达式寄存器调用删除函数，最后回车
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cnoremap &amp;lt;C-k&amp;gt; &amp;lt;C-r&amp;gt;&lt;span class="o">=&lt;/span>DeleteAfterCursor&lt;span class="o">()&lt;/span>&amp;lt;CR&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过上面的命令，我们实现了终端在Emacs模式下的&lt;code>ctrl-k&lt;/code>快捷键。但是只能在vim中使用，并且vim版本需要支持表达式寄存器。&lt;/p>
&lt;p>如果终端的编辑模式为vi，依旧不能解决问题。在insert模式下不能使用&lt;code>ctl-k&lt;/code>快捷键。需要修改终端的映射关系&lt;code>.inputrc&lt;/code>。不过够用了。&lt;/p>
&lt;p>示例：&lt;strong>配置复制、粘贴、剪切快捷键&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 配置复制、粘贴、剪切
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">vnoremap &amp;lt;C-c&amp;gt; &amp;#34;&lt;/span>*y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inoremap &amp;lt;C-v&amp;gt; &amp;lt;C-r&amp;gt;*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cnoremap &amp;lt;C-v&amp;gt; &amp;lt;C-r&amp;gt;*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vnoremap &amp;lt;C-v&amp;gt; &lt;span class="s2">&amp;#34;*p
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">vnoremap &amp;lt;C-x&amp;gt; &amp;#34;&lt;/span>*d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是不要配置普通模式下的&lt;code>ctrl-v&lt;/code>，它是可视块的快捷键，可以配置visual模式的，需要按两次才能粘贴。不过够用了。&lt;/p>
&lt;p>&lt;strong>命令参考&lt;/strong>：&lt;a class="link" href="https://arlettebrook.github.io/p/vim-common-commands/" target="_blank" rel="noopener"
>Vim Common Commands&lt;/a>&lt;/p></description></item><item><title>Terminal And Shell Introduction</title><link>https://arlettebrook.github.io/p/terminal-and-shell-introduction/</link><pubDate>Mon, 27 May 2024 15:17:13 +0800</pubDate><guid>https://arlettebrook.github.io/p/terminal-and-shell-introduction/</guid><description>&lt;hr>
&lt;h2 id="概念">
&lt;a href="#%e6%a6%82%e5%bf%b5" class="header-anchor">#&lt;/a>
概念
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>终端&lt;/strong>：命令行&lt;strong>交互界面&lt;/strong>。如：
&lt;ul>
&lt;li>windows terminal、windterm、FinalShell。PowerShell。&lt;/li>
&lt;li>控制台：一种特殊的终端。范围更广，既可以指硬件也可以指软件工具，常用于&lt;strong>系统管理&lt;/strong>和&lt;strong>监控&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>TTY&lt;/strong>：终端的&lt;strong>文本输入输出接口&lt;/strong>。可以理解为就是终端。不深入了解😂。&lt;/li>
&lt;li>&lt;strong>Shell&lt;/strong>：命令行&lt;strong>解释器&lt;/strong>。如：
&lt;ul>
&lt;li>Bash、Zsh、PowerShell、git bash。&lt;/li>
&lt;li>终端通过TTY与Shell通信。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://prinsss.github.io/the-difference-between-cli-terminal-shell-tty/" target="_blank" rel="noopener"
>命令行界面 (CLI)、终端 (Terminal)、Shell、TTY，傻傻分不清楚？&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="zsh安装">
&lt;a href="#zsh%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
zsh安装
&lt;/h2>&lt;p>Bash是Linux系统内置的shell，提供了强大的命令行编辑、脚本编写和命令历史功能，广泛用于 Linux 和 macOS 系统中。是目前最流行的 Shell 之一。&lt;/p>
&lt;p>而&lt;strong>Zsh&lt;/strong> 是一个功能强大的 Shell，具有比 Bash 更多的特性，如更高级的自动补全、更强大的脚本能力和更丰富的配置选项，还提供了诸如共享历史、拼写校正、主题支持和插件系统等&lt;strong>增强功能&lt;/strong>，使其成为高级用户和开发者的首选。&lt;/p>
&lt;p>接下来介绍如何安装：&lt;/p>
&lt;h3 id="windows上安装">
&lt;a href="#windows%e4%b8%8a%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
windows上安装
&lt;/h3>&lt;blockquote>
&lt;p>注意：windows上安装zsh是建立在git bash基础上的。&lt;/p>
&lt;p>所以只有安装了git，我们才能在windows上使用zsh。&lt;/p>
&lt;p>安装git：&lt;a class="link" href="https://git-scm.com/downloads" target="_blank" rel="noopener"
>git官网&lt;/a>。&lt;/p>
&lt;p>个人体验：利用上面方法在windows上使用zsh，效果不是特别好，不知道是不是我电脑配置低的原因：每次利用git bash启动zsh都很慢。所以windows上我用的shell一直都是git bash。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>下载zsh对应的windows版本，官方并没有提供，由MSYS2提供。（官方下载需要用包管理工具）&lt;/p>
&lt;ol>
&lt;li>&lt;em>MSYS2&lt;/em> 是针对Windows 的软件分发和构建平台。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>windows上如果没有包管理工具，只能去这里下载：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://packages.msys2.org/package/zsh?repo=msys&amp;amp;variant=x86_64" target="_blank" rel="noopener"
>地址&lt;/a>、&lt;a class="link" href="https://arlettebrook.github.io/docs/zsh-5.9-2-x86_64.pkg.tar.zst" >备用&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752.png"
width="1805"
height="1004"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752_hub9924f94a57f81d5a3f9ba3704840859_162646_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752_hub9924f94a57f81d5a3f9ba3704840859_162646_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318211226752"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>后续教程是以文件下载为例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载完成之后将压缩包解压，用rar就可以解压。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将解压的内容全部剪切到git的安装目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要权限的话就授权（可能需要多次授权），重名的话直接覆盖。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512.png"
width="1123"
height="569"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512_hu0d0d9fcf86c988e4e9d5ae9475f1bc04_305509_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512_hu0d0d9fcf86c988e4e9d5ae9475f1bc04_305509_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="zsh安装"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开 &lt;code>Git Bash&lt;/code> 标签页或者直接右键打开 &lt;code>Git bash&lt;/code> 输入 &lt;code>zsh&lt;/code>，出现下图则安装成功：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689.png"
width="1464"
height="619"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689_hu888a0765c6558b2f5b304f38d42d14d9_183280_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689_hu888a0765c6558b2f5b304f38d42d14d9_183280_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="zsh安装成功"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>暂时先不进行其他设置，直接输入 &lt;code>0&lt;/code> 结束并生成 &lt;code>.zshrc&lt;/code> 配置文件即可。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>该文件在当前用户的家目录，win+r输入.回车进入就是。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于现在没有安装 &lt;code>zsh&lt;/code> 主题，可以这样区分 &lt;code>bash&lt;/code> 和 &lt;code>zsh&lt;/code>，&lt;code>bash&lt;/code>的光标在第二行，&lt;code>zsh&lt;/code>的光标在同一行：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004.png"
width="1122"
height="353"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004_huaa3a3d2a895f8ba462c747670bfa2bbe_107053_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004_huaa3a3d2a895f8ba462c747670bfa2bbe_107053_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318212921004"
class="gallery-image"
data-flex-grow="317"
data-flex-basis="762px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设置默认启动&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每次打开 &lt;code>Git Bash&lt;/code> 终端，你会发现默认还是 &lt;code>Bash&lt;/code> ，而不是 &lt;code>Zsh&lt;/code>，可以通过编辑 &lt;code>Bash&lt;/code> 终端的配置文件 &lt;code>.bashrc&lt;/code> 来实现默认使用 &lt;code>Zsh&lt;/code>，在 &lt;code>Git Bash&lt;/code> 终端中输入命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Vim&lt;/code> 默认是命令模式，你可以直接用文本编辑器打开将配置内容粘贴进去：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -t &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="c1">#1表示标准输出，用于判断标准输出是否连接到终端（tty），如果是，则执行 zsh 命令来切换为 Zsh Shell。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exec&lt;/span> zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476.png"
width="512"
height="81"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476_hu1e5990fd6da39c6510ea70d89bf2b8f4_6754_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476_hu1e5990fd6da39c6510ea70d89bf2b8f4_6754_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318213908476"
class="gallery-image"
data-flex-grow="632"
data-flex-basis="1517px"
>&lt;/p>
&lt;p>后面是vim的常用命令，&lt;code>a、shift+insert、esc、+:wq&lt;/code>最后按回车键，保存退出&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109.png"
width="688"
height="574"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109_hu931784de102814e41646c4d584a25f97_58094_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109_hu931784de102814e41646c4d584a25f97_58094_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318214206109"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>注意：注释（#）调这三行代码，启动git bash时就不会启用zsh。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>之后再打开 &lt;code>Git Bash&lt;/code> 终端，默认就会使用 &lt;code>Zsh&lt;/code> 了。第一次可能有一个警告：大概是找不到 &lt;code>~/bash_profile&lt;/code> 等一些文件，可以忽略，以后不会再出现了。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006.png"
width="1354"
height="303"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006_hufd137b992942db01eb4ba2ae0522f34e_39071_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006_hufd137b992942db01eb4ba2ae0522f34e_39071_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318214357006"
class="gallery-image"
data-flex-grow="446"
data-flex-basis="1072px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>至此windows上安装zsh完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="linux上安装">
&lt;a href="#linux%e4%b8%8a%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
Linux上安装
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>准备：&lt;/p>
&lt;p>查看当前 shell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$SHELL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$0&lt;/span> &lt;span class="c1"># or&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575.png"
width="504"
height="94"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575_hu6eabb1d7bd44ae1fe519b45cc99cdfaf_10368_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575_hu6eabb1d7bd44ae1fe519b45cc99cdfaf_10368_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318234623575"
class="gallery-image"
data-flex-grow="536"
data-flex-basis="1286px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 zsh&lt;/p>
&lt;p>CentOS：要管理员身份&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yum install -y zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ubuntu：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt install -y zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316.png"
width="1449"
height="636"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316_hu2bed67af52d98caf3d11136dc6de7739_97734_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316_hu2bed67af52d98caf3d11136dc6de7739_97734_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318235111316"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>将zsh替换为默认shell&lt;/em>&lt;/p>
&lt;ol>
&lt;li>为 root 设置默认 shell&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">chsh -s /bin/zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回结果如下，表示切换完成（下载安装 oh-my-zsh 成功后也会提示切换）&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1.png"
width="837"
height="139"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1_huf140ac723ea08623c53dd917a2bbf634_32603_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1_huf140ac723ea08623c53dd917a2bbf634_32603_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318235425237"
class="gallery-image"
data-flex-grow="602"
data-flex-basis="1445px"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>为特定用户设置默认 shell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo chsh -s /bin/zsh &amp;lt;username&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;username&amp;gt; 替换为实际用户名&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;em>在 CentOS 8 中可能报错 Command not found，执行&lt;/em> &lt;code>sudo dnf install util-linux-user&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>重新登录shell之后，默认就是zsh&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682.png"
width="1055"
height="150"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682_hu41e05cc99389c4a9c4d54b707fa6ef54_27255_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682_hu41e05cc99389c4a9c4d54b707fa6ef54_27255_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240319000037682"
class="gallery-image"
data-flex-grow="703"
data-flex-basis="1688px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>至此Linux安装zsh完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="安装-oh-my-zsh">
&lt;a href="#%e5%ae%89%e8%a3%85-oh-my-zsh" class="header-anchor">#&lt;/a>
安装 Oh My Zsh
&lt;/h3>&lt;blockquote>
&lt;blockquote>
&lt;p>成功安装了zsh，还需要安装Oh My Zsh，它对zsh进行了扩展，这也是为什么要使用zsh了，而不是bash的原因。&lt;/p>
&lt;/blockquote>
&lt;p>注意：以下方法同适用于安装了zsh的环境，如Linux。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>在安装好 &lt;code>Zsh&lt;/code> 终端之后，看起来跟 &lt;code>Bash&lt;/code> 终端并无太大的区别，我们也没有进行设置。而 &lt;code>Oh My Zsh&lt;/code> 可以用于管理 &lt;code>Zsh&lt;/code>配置。它捆绑了数千个有用的功能、助手、插件、主题等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>官方： &lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener"
>https://github.com/ohmyzsh/ohmyzsh&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在命令行输入命令并按回车执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>这条命令国内需要开代理，且模式为Tun终端才能访问。官方有提供国内的下载地址，失败多试几次。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://install.ohmyz.sh/&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>还需要有curl以及git工具，我MinGW默认安装了curl命令，如果失败可以下载ohmyzsh安装脚本本地运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh ./install.sh &lt;span class="c1">#离线安装,注意要进入脚本的下载位置&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>出现下图的内容就是安装成功了，如果出现错误，或长时间没有响应，多试几次即可：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028.png"
width="1139"
height="591"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028_huad0b7df38215d3d38bab2d1533fb0332_323810_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028_huad0b7df38215d3d38bab2d1533fb0332_323810_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="windows成功安装ohmyzsh"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;blockquote>
&lt;p>最后一行的 &lt;code>ERROR&lt;/code> 可以忽略，windows正常，Linux没有&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971.png"
width="1453"
height="680"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971_huabb79a28aae75544a980d294d720869d_182993_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971_huabb79a28aae75544a980d294d720869d_182993_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Linux成功安装ohmyzsh"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p>
&lt;h4 id="配置-zsh">
&lt;a href="#%e9%85%8d%e7%bd%ae-zsh" class="header-anchor">#&lt;/a>
配置 zsh
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code>的配置文件在用户的家目录，文件名是 &lt;code>.zshrc&lt;/code>，编辑配置文件，可以对 &lt;code>Zsh&lt;/code>进行一些定制化配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑并保存配置文件之后，并不会立即生效，可以关闭所有终端重新打开，或者使用命令让配置生效：&lt;/p>
&lt;p>source可以替换成.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">. ~/.zshrc &lt;span class="c1"># or&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h5 id="配置主题">
&lt;a href="#%e9%85%8d%e7%bd%ae%e4%b8%bb%e9%a2%98" class="header-anchor">#&lt;/a>
&lt;strong>配置主题&lt;/strong>
&lt;/h5>&lt;ol>
&lt;li>
&lt;p>就是对.zshrc配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Oh My Zsh&lt;/code> 安装默之后，默认使用主题是 &lt;code>robbyrussell&lt;/code>，可以修改 &lt;code>.zshrc&lt;/code> 配置中的 &lt;code>ZSH_THEME&lt;/code> 字段，所有可用主题可参考&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" target="_blank" rel="noopener"
>ohmyzsh官方主题页面&lt;/a>，这里先配置一下我个人比较喜欢的主题：gentoo or eastwood or daveverwer or bira&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165.png"
width="1416"
height="645"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165_huef769454bc107dc852ce76255764dbbe_224565_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165_huef769454bc107dc852ce76255764dbbe_224565_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="修改主题"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira.jpg"
width="1650"
height="1110"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira_hu1442ac57ea79dc6d09823129d334f3f8_101939_480x0_resize_q75_box.jpg 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira_hu1442ac57ea79dc6d09823129d334f3f8_101939_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="bira主题"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注意：&lt;code>ZSH_THEME&lt;/code>只能修改为官方提供的主题名，然后重新加载&lt;code>.zshrc&lt;/code>文件，就能修改为指定的主题。&lt;/p>
&lt;ol>
&lt;li>官方提供的主题都保存在&lt;code>~/.oh-my-zsh/themes&lt;/code>目录，你也可以自定义主题。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h5 id="配置插件">
&lt;a href="#%e9%85%8d%e7%bd%ae%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
&lt;strong>配置插件&lt;/strong>
&lt;/h5>&lt;ol>
&lt;li>
&lt;p>插件Oh My Zsh 附带了大量插件供您使用。您可以查看&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins" target="_blank" rel="noopener"
>插件&lt;/a>目录和/或&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins" target="_blank" rel="noopener"
>wiki&lt;/a>，了解当前可用的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过使用插件，可以让 &lt;code>Zsh&lt;/code> 的功能更加强大，&lt;code>Zsh&lt;/code> 和 &lt;code>Oh My Zsh&lt;/code> 自带了一些实用的插件，也可以下载其他的插件。 如 &lt;code>Zsh&lt;/code> 自带 &lt;code>Git&lt;/code> 插件，可以在命令行显示 &lt;code>Git&lt;/code> 相关的信息，并提供了一些操作 &lt;code>Git&lt;/code> 的别名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gaa&lt;/span> &lt;span class="o">=&lt;/span> git add --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gcmsg&lt;/span> &lt;span class="o">=&lt;/span> git commit -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ga&lt;/span> &lt;span class="o">=&lt;/span> git add
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gst&lt;/span> &lt;span class="o">=&lt;/span> git status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gp&lt;/span> &lt;span class="o">=&lt;/span> git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061.png"
width="1005"
height="193"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061_hu25160011d60cf4d886eefedb303c67fd_51614_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061_hu25160011d60cf4d886eefedb303c67fd_51614_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318230853061"
class="gallery-image"
data-flex-grow="520"
data-flex-basis="1249px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h6 id="自动补全">
&lt;a href="#%e8%87%aa%e5%8a%a8%e8%a1%a5%e5%85%a8" class="header-anchor">#&lt;/a>
&lt;strong>自动补全&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>zsh-autosuggestions&lt;/code> 插件，可以在你历史指令中找到与你当前输入指令匹配的记录，并高亮显示，如果想直接使用，可以直接通过右方向键补全。 安装插件，在终端分别执行下面两条命令：官方&lt;a class="link" href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener"
>zsh-autosuggestions&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/.oh-my-zsh/custom/plugins
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#指定了克隆的位置，就是什么切换的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>插件下载完成之后，编辑 &lt;code>~/.zshrc&lt;/code> 配置文件，修改插件相关配置项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>插件下载完成之后，编辑 &lt;code>~/.zshrc&lt;/code> 配置文件，修改插件相关配置项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520.png"
width="1030"
height="276"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520_hu60e5cfc85ad4aa44992b56b8a46f4def_60716_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520_hu60e5cfc85ad4aa44992b56b8a46f4def_60716_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318232212520"
class="gallery-image"
data-flex-grow="373"
data-flex-basis="895px"
>&lt;/p>
&lt;p>&lt;em>请注意，插件由空格（空格、制表符、换行符&amp;hellip;）分隔。&lt;strong>请勿&lt;/strong>在它们之间使用逗号，否则会损坏。&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存退出之后，记得使用命令 &lt;code>source ~/.zshrc&lt;/code> 重载配置。该插件生效之后，在使用命令的时候，就会匹配我们使用的命令，右键可以直接补全：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528.png"
width="719"
height="65"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528_hu33a13ebc7a5392d3e95df131e5ca4c30_6189_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528_hu33a13ebc7a5392d3e95df131e5ca4c30_6189_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318232512528"
class="gallery-image"
data-flex-grow="1106"
data-flex-basis="2654px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你不喜欢提示默认的浅灰色，可以在 &lt;code>~/.zshrc&lt;/code> 中修改（没有配置项就添加），更多配置可以参考&lt;a class="link" href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fzsh-users%2Fzsh-autosuggestions%23suggestion-highlight-style" target="_blank" rel="noopener"
>zsh-autosuggestions官方文档&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;fg=#9fc5e8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h6 id="目录跳转">
&lt;a href="#%e7%9b%ae%e5%bd%95%e8%b7%b3%e8%bd%ac" class="header-anchor">#&lt;/a>
&lt;strong>目录跳转&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code> 自带有一个插件 &lt;code>z&lt;/code>，可以让我们在访问过的目录中快速跳转，将该插件配置到 &lt;code>~/.zshrc&lt;/code> 文件中即可使用：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685.png"
width="827"
height="417"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685_hu52be7fb4b48f942c9e20043399c70353_68900_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685_hu52be7fb4b48f942c9e20043399c70353_68900_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318232841685"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存退出之后，重载配置，随意进入一些目录，之后再使用命令 &lt;code>z&lt;/code> 就可以实现快速跳转，支持模糊匹配：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252.png"
width="985"
height="194"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252_hu1605e0b8e4c38e2a71d1cb2b9776b308_70157_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252_hu1605e0b8e4c38e2a71d1cb2b9776b308_70157_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318233202252"
class="gallery-image"
data-flex-grow="507"
data-flex-basis="1218px"
>&lt;/p>
&lt;blockquote>
&lt;p>或许相比于 &lt;code>z&lt;/code>，更多人会选择使用 &lt;code>autojump&lt;/code>，如果是 &lt;code>Mac&lt;/code> 或者 &lt;code>Linux&lt;/code> 没什么问题，&lt;code>Windows&lt;/code> 就不太建议折腾了。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h6 id="其他插件">
&lt;a href="#%e5%85%b6%e4%bb%96%e6%8f%92%e4%bb%b6" class="header-anchor">#&lt;/a>
&lt;strong>其他插件&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>zsh-syntax-highlighting&lt;/code>：这个插件可以识别的 &lt;code>shell&lt;/code> 命令并高亮显示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-syntax-highlighting
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060.png"
width="1010"
height="455"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060_hu53735137fd792790a8c7ae0e70edb371_83209_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060_hu53735137fd792790a8c7ae0e70edb371_83209_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240319002900060"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/zsh-users/zsh-completions" target="_blank" rel="noopener"
>zsh-completions&lt;/a>：额外的自动补全功能，用于补充 zsh 中尚不支持的命令补全，该项目将在完善时合并到 zsh。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> git clone https://github.com/zsh-users/zsh-completions &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-completions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在&lt;code>.zshrc&lt;/code>文件里面的&lt;code>source &amp;quot;$ZSH/oh-my-zsh.sh&amp;quot;&lt;/code>这一行前添加以下代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">fpath&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-completions/src
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240.png"
width="1342"
height="553"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240_huf5e790ff3f5b1ccb45b3ad89c80b769a_128207_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240_huf5e790ff3f5b1ccb45b3ad89c80b769a_128207_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240319004250240"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>Note: adding it as a regular Oh My ZSH! plugin will not work properly (see &lt;a class="link" href="https://github.com/zsh-users/zsh-completions/issues/603" target="_blank" rel="noopener"
>#603&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Incremental completion on zsh：增强的实时自动命令补全插件：&lt;a class="link" href="https://mimosa-pudica.net/zsh-incremental.html" target="_blank" rel="noopener"
>Incremental completion on zsh&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>*该插件对性能似乎有一点点影响，请根据需要启用。*其实使用默认的自动补齐（tab）够用了。&lt;/p>
&lt;/blockquote>
&lt;p>作用如图：&lt;/p>
&lt;p>​ &lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh.gif"
width="404"
height="204"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh_hu5636cf9d5e0f936b681997f757b3864e_42534_480x0_resize_box_1.gif 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh_hu5636cf9d5e0f936b681997f757b3864e_42534_1024x0_resize_box_1.gif 1024w"
loading="lazy"
alt="incr"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置别名&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code> 的 &lt;code>alias&lt;/code> 配置项可以自定义命令别名，在使用一些比较复杂的命令时，使用别名可以提高效率，这里举例添加一个 &lt;code>Git&lt;/code> 日志的别名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gli&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;git log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意等号两边不要有空格&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="shell使用">
&lt;a href="#shell%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
Shell使用
&lt;/h2>&lt;p>在不同的终端中我们可以指定不同的Shell来使用。如：&lt;/p>
&lt;ol>
&lt;li>在&lt;a class="link" href="#Linux%e4%b8%8a%e5%ae%89%e8%a3%85" >Linux安装zsh&lt;/a>中我们就指定了Linux终端的默认Shell为zsh。&lt;/li>
&lt;li>在稍后介绍的[Windows Terminal](#Windows Terminal)中，也会指定Windows Terminal终端的默认Shell为Git bash。&lt;/li>
&lt;li>下面介绍在IDE终端中设置自己的Shell。&lt;/li>
&lt;/ol>
&lt;h3 id="设置ide终端的shell为git-bash">
&lt;a href="#%e8%ae%be%e7%bd%aeide%e7%bb%88%e7%ab%af%e7%9a%84shell%e4%b8%bagit-bash" class="header-anchor">#&lt;/a>
设置IDE终端的Shell为git bash
&lt;/h3>&lt;p>如果你按照上面的教程成功在windows上安装了zsh，那么设置Shell为git bash，也就是设置为zsh。&lt;/p>
&lt;p>注意：没有安装zsh的情况下也能设置为git bash。&lt;strong>优点：高亮、个人爱好&lt;/strong>。&lt;/p>
&lt;p>这里以goland开发工具为例，jetBrains全系列差不多：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>进入设置找到终端&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766.png"
width="800"
height="471"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766_huf6661fe7348dbc56cdcf4082cea67043_42129_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766_huf6661fe7348dbc56cdcf4082cea67043_42129_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318220456766"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318.png"
width="1472"
height="1069"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318_hu2734f748d7e96269c0f105fe59f8f0bc_156571_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318_hu2734f748d7e96269c0f105fe59f8f0bc_156571_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318220625318"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Shell path为git安装路径里面的&lt;code>bin\bash.exe&lt;/code>,&lt;strong>注意不是git-bash&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>注意：还需要为&lt;code>bash.exe&lt;/code>命令指定启动参数&lt;code>--login -i&lt;/code>：&lt;/p>
&lt;p>图中没有加入，后期发现的问题。&lt;/p>
&lt;p>意思是启动登录Shell，并且交互运行。&lt;/p>
&lt;p>作用：这个环境下git bash不会出现乱码，文件、目录高亮。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>最后应用即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>其他类似的IDE配置差不多：&lt;/p>
&lt;ol>
&lt;li>vscode&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747.png"
width="1907"
height="577"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747_huf882f54ccc6ea14d13611a8e87d42e56_61223_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747_huf882f54ccc6ea14d13611a8e87d42e56_61223_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318221601747"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="793px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366.png"
width="1220"
height="320"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366_hucdeb05991bdd3b9b060ad7f96779cb43_53500_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366_hucdeb05991bdd3b9b060ad7f96779cb43_53500_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318221642366"
class="gallery-image"
data-flex-grow="381"
data-flex-basis="915px"
>&lt;/p>
&lt;p>vscode默认为git bash设置了启动参数，很方便。&lt;/p>
&lt;hr>
&lt;h2 id="terminal使用">
&lt;a href="#terminal%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
Terminal使用
&lt;/h2>&lt;h3 id="windows-terminal">
&lt;a href="#windows-terminal" class="header-anchor">#&lt;/a>
Windows Terminal
&lt;/h3>&lt;p>&lt;strong>Windows Terminal&lt;/strong>可以理解为：是cmd窗口和PowerShell终端的增强版，它将windows环境下的终端（cmd、PowerShell）都集成在了一起。我们只需要指定对应的Shell（cmd、PowerShell、git bash），即可使用。&lt;a class="link" href="https://learn.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;p>&lt;strong>主要特性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>多选项卡支持&lt;/strong>：
&lt;ul>
&lt;li>一个窗口管理多个Shell。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>丰富的自定义选项&lt;/strong>：
&lt;ul>
&lt;li>提供了多种自定义选项，包括更改背景颜色、字体、透明度、主题等，允许用户根据个人喜好定制界面。&lt;/li>
&lt;li>同一套配置应用于不同Shell。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>GPU 加速的文本渲染&lt;/strong>：
&lt;ul>
&lt;li>利用 DirectWrite 和 DirectX 提供 GPU 加速的文本渲染，确保快速、流畅的文本显示和滚动体验。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>支持多种命令行工具和 Shell&lt;/strong>：
&lt;ul>
&lt;li>支持 PowerShell、CMD（Command Prompt）、Windows Subsystem for Linux（WSL）以及任何其他你喜欢的命令行工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Unicode 和 UTF-8 字符支持&lt;/strong>:
&lt;ul>
&lt;li>完整支持 Unicode 和 UTF-8 字符集，包括 emoji 和复杂字符。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>JSON 配置文件&lt;/strong>：
&lt;ul>
&lt;li>使用 JSON 文件进行配置，允许用户灵活地定义设置，如启动命令、默认 Shell、外观等。
&lt;ul>
&lt;li>当然也提供了图形化界面修改配置(没有需要在Microsoft Store中升级到最新版)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>可扩展性和第三方工具支持&lt;/strong>：
&lt;ul>
&lt;li>可以通过扩展和插件进一步增强功能，支持第三方工具集成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="安装">
&lt;a href="#%e5%ae%89%e8%a3%85" class="header-anchor">#&lt;/a>
安装
&lt;/h4>&lt;p>Win11系统自带Windows Terminal终端，并且从Windows 11 22H2 版本开始，Windows Terminal 将&lt;a class="link" href="https://devblogs.microsoft.com/commandline/windows-terminal-is-now-the-default-in-windows-11/" target="_blank" rel="noopener"
>正式成为&lt;/a> Windows 11 的&lt;strong>默认终端&lt;/strong>。&lt;/p>
&lt;p>对于Win10系统需要额外安装，最低要求是Windows 10 2004（内部版本 19041）或更高版本。&lt;/p>
&lt;p>安装方法：&lt;/p>
&lt;ul>
&lt;li>推荐从Microsoft Store中下载安装。会自动更新。&lt;/li>
&lt;li>如果无法从 Microsoft Store 安装 Windows Terminal，可以从&lt;a class="link" href="https://github.com/microsoft/terminal" target="_blank" rel="noopener"
>github仓库&lt;/a>的&lt;a class="link" href="https://github.com/microsoft/terminal/releases" target="_blank" rel="noopener"
>发布页面&lt;/a>手动下载已发布的版本。
&lt;ul>
&lt;li>可以下载MSIX Bundle 文件，双击安装。这种方式不能指定安装位置。&lt;/li>
&lt;li>或者根据自己的操作系统选择对应的压缩包，一般x64。
&lt;ul>
&lt;li>解压到哪里就安装到哪里，需要手动配置path环境变量，值为安装目录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>启动：在运行框中输入&lt;code>wt&lt;/code>，能正常启动，证明安装成功。&lt;/p>
&lt;p>在安装成功之后，建议将Windows Terminal设置为默认的终端应用程序。由Windows决定，一般启动的也是wt。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889.png"
width="1670"
height="884"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889_hu5c28ba441e20ef93d783c5969675f06c_104476_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889_hu5c28ba441e20ef93d783c5969675f06c_104476_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Windows Terminal"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://blog.csdn.net/2201_75372778/article/details/131342522" target="_blank" rel="noopener"
>Windows终端（windows terminal）从下载到运行&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="修改默认shell为git-bash">
&lt;a href="#%e4%bf%ae%e6%94%b9%e9%bb%98%e8%ae%a4shell%e4%b8%bagit-bash" class="header-anchor">#&lt;/a>
修改默认Shell为Git Bash
&lt;/h4>&lt;p>可以根据自己的爱好判断是否修改。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每次打开 &lt;code>Windows Terminal&lt;/code> 默认使用的是 &lt;code>Windows PowerShell&lt;/code>，要改为默认使用 &lt;code>Git Bash&lt;/code>，在设置里面进行设置即可。在更多选项中点击设置，或者右键标题栏空白处再点击设置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>滚动到底部，点击添加新配置文件——新建空配置文件，然后填入你的git bash所在位置。示例：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919.png"
width="1670"
height="884"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919_hue33feb461e1b62e1666cdf423128b31a_100869_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919_hue33feb461e1b62e1666cdf423128b31a_100869_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="git bash"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>指定的git bash是&lt;code>bin&lt;/code>目录下的bash.exe。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>并且需要指定启动参数&lt;code>--login -i&lt;/code>&lt;/p>
&lt;p>意思是启动登录Shell，并且交互运行。&lt;/p>
&lt;p>作用：这个环境下git bash不会出现乱码，文件、目录高亮。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>最后，在启动选项卡中设置 &lt;code>Git Bash&lt;/code> 为默认终端并保存配置：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385.png"
width="1134"
height="574"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385_hu06bad4b213c0bb8ac286672d2aa6ada1_171583_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385_hu06bad4b213c0bb8ac286672d2aa6ada1_171583_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240318215555385"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="美化">
&lt;a href="#%e7%be%8e%e5%8c%96" class="header-anchor">#&lt;/a>
美化
&lt;/h4>&lt;p>我在windows环境下使用的Shell一般是git bash，可定制化并不高，配置的zsh也没有使用，不过对我来说够用了。&lt;/p>
&lt;p>效果如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406_hu46ee813704bb24e925e0f9e86ec4586f_1485751_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406_hu46ee813704bb24e925e0f9e86ec4586f_1485751_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="image-20240527230837406"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>这里就不详细介绍如何实现的了，Windows Terminal都提供了图形化配置。&lt;/p>
&lt;p>我遇到的问题：总结一下：Windows terminal集成git-bash，删除到头的时候窗口总是闪烁：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>解决办法：新建一个~/.inputrc 文件，输入set bell-style none（可以什么都不写也起作用），保存；重启terminal，问题解决。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>.inputrc&lt;/code>是控制命令行界面（终端）行为的配置文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>神奇的是我只要创建了这个空文件，Windows terminal的git bash，删除到头之后就不会闪烁了。&lt;/p>
&lt;ul>
&lt;li>&lt;code>set bell-style none&lt;/code>：关闭终端提示音。&lt;/li>
&lt;li>&lt;code>set bell-style visible&lt;/code>：使用可见提示而不是声音。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>set editing-mode vi&lt;/code>：将编辑模式设置为 Vi 模式。默认为： Emacs 模式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>终端的编辑模式主要有vi和emacs两种模式，区别就是快捷键不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果你会vim，强烈建议修改为vi模式。&lt;/p>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://arlettebrook.github.io/p/vim-common-commands/" target="_blank" rel="noopener"
>vim-common-commands&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>修改之后在insert模式下Emacs模式的部分快捷键&lt;strong>依然可以使用&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Emacs模式常用命令：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：&lt;strong>不同终端部分快捷键可用。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>光标移动&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + A&lt;/code>：移动到行首&lt;/li>
&lt;li>&lt;code>Ctrl + E&lt;/code>：移动到行尾&lt;/li>
&lt;li>&lt;code>Ctrl + B&lt;/code>：向左移动一个字符&lt;/li>
&lt;li>&lt;code>Ctrl + F&lt;/code>：向右移动一个字符&lt;/li>
&lt;li>&lt;code>Alt + B&lt;/code>：向左移动一个词&lt;/li>
&lt;li>&lt;code>Alt + F&lt;/code>：向右移动一个词&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>文本编辑&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + K&lt;/code>：删除从光标位置到行尾的文本&lt;/li>
&lt;li>&lt;code>Ctrl + U&lt;/code>：删除从光标位置到行首的文本&lt;/li>
&lt;li>&lt;code>Ctrl + W&lt;/code>：删除光标位置之前的一个词&lt;/li>
&lt;li>&lt;code>Alt + D&lt;/code>：删除光标位置之后的一个词&lt;/li>
&lt;li>&lt;code>Ctrl + Y&lt;/code>：粘贴（恢复）上次删除的文本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他操作&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + L&lt;/code>：清屏并重新显示当前行&lt;/li>
&lt;li>&lt;code>Ctrl + R&lt;/code>：搜索命令历史&lt;/li>
&lt;li>&lt;code>esc+backspace&lt;/code>：删除一个单词。&lt;/li>
&lt;li>&lt;code>ctrl+P&lt;/code>：上一条历史命令&lt;/li>
&lt;li>&lt;code>ctrl+n&lt;/code>:下一条历史命令&lt;/li>
&lt;li>&lt;code>ctrl+j&lt;/code>：回车&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>这里就不详细介绍控制终端行为的选项了。能配置终端的编辑模式、提示音、补缺行为、快捷键等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>此外如果你喜欢使用PowerShell也可以使用&lt;a class="link" href="https://ohmyposh.dev/" target="_blank" rel="noopener"
>Oh My Posh&lt;/a>美化它，跟前面介绍的Oh My Zsh差不多。&lt;/p>
&lt;p>推荐文章：&lt;a class="link" href="https://blog.sunguoqi.com/posts/oh-my-posh/" target="_blank" rel="noopener"
>Oh My Posh | Windows Terminal 美化指南&lt;/a>&lt;/p>
&lt;h3 id="windterm">
&lt;a href="#windterm" class="header-anchor">#&lt;/a>
WindTerm
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/kingToolbox/WindTerm" target="_blank" rel="noopener"
>WindTerm&lt;/a>是一款跨平台的终端应用，同时也是 SSH/Telnet/Serial/Shell/Sftp 客户端。通常用于&lt;strong>远程连接&lt;/strong>。类似于FinalShell，它有的功能，WindTerm同样支持，并且拥有更多的配色方案，直接上图：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark.png"
width="2560"
height="1520"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark_huab2f69f062de70eaa15c1469f0e2930e_435465_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark_huab2f69f062de70eaa15c1469f0e2930e_435465_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="WindTerm-dark"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme.png"
width="2560"
height="1520"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme_hu7fdcaec243e45adecf0edd95a0d6522f_339075_480x0_resize_box_3.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme_hu7fdcaec243e45adecf0edd95a0d6522f_339075_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="WindTerm_DigeWhite_Theme"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;h4 id="安装-1">
&lt;a href="#%e5%ae%89%e8%a3%85-1" class="header-anchor">#&lt;/a>
安装
&lt;/h4>&lt;p>WindTerm是一款部分开源的软件，现目前(2024/5/28)仍存在部分小问题，不过不影响正常使用。&lt;/p>
&lt;p>安装可以从&lt;a class="link" href="https://github.com/kingToolbox/WindTerm" target="_blank" rel="noopener"
>github仓库&lt;/a>的&lt;a class="link" href="https://github.com/kingToolbox/WindTerm/releases" target="_blank" rel="noopener"
>发布页面&lt;/a>根据自己的操作系统手动下载已发布的版本。&lt;/p>
&lt;h4 id="使用">
&lt;a href="#%e4%bd%bf%e7%94%a8" class="header-anchor">#&lt;/a>
使用
&lt;/h4>&lt;p>使用WindTerm也很简单，语言支持中文。花点时间就能学会。&lt;/p>
&lt;p>WindTerm在windows环境下建议将默认的shell修改为git bash。个人爱好。&lt;/p>
&lt;p>Windows Terminal和WindTerm两款终端应用都建议安装，各有各的优点和用图。不过我一般使用WindTerm多一点，因为Windows Terminal有的功能WindTerm都有，并且后者有更好的配色方案，支持文件传输，内置远程连接。&lt;/p>
&lt;p>安装Windows Terminal主要是因为Windows Terminal集成了Win10的cmd、PowerShell终端。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ul>
&lt;li>原文地址: &lt;a class="link" href="https://juejin.cn/post/7229507721795993661" target="_blank" rel="noopener"
>https://juejin.cn/post/7229507721795993661&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Vim Common Commands</title><link>https://arlettebrook.github.io/p/vim-common-commands/</link><pubDate>Mon, 27 May 2024 00:43:37 +0800</pubDate><guid>https://arlettebrook.github.io/p/vim-common-commands/</guid><description>&lt;hr>
&lt;h2 id="简介">
&lt;a href="#%e7%ae%80%e4%bb%8b" class="header-anchor">#&lt;/a>
简介
&lt;/h2>&lt;p>Vim是一个高度可配置的文本编辑器，主要用于编写和编辑文本和源代码。它最初由Bram Moolenaar在1991年发布，至今已经成为了许多程序员和系统管理员的首选工具。&lt;/p>
&lt;p>Vim的特点包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>高度可配置：Vim具有大量的命令和选项，可以根据用户的需求进行定制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令模式（COMMAND)：Vim在默认情况下处于命令模式，用户需要通过键盘输入命令来进行文本编辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入模式(INSERT)：在插入模式下，用户可以输入文本内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通模式(NORMAL)：普通模式是Vim的默认模式，可以进行光标移动、删除字符等操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>（&lt;strong>补充&lt;/strong>）可视模式（VISUAL)：允许用户以可视方式选择和操作文本。Visual 模式有三种类型：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>字符模式（Visual mode）&lt;/strong>：用于选择字符。&lt;code>v&lt;/code>命令进入。&lt;/li>
&lt;li>&lt;strong>行模式（Visual Line mode）&lt;/strong>：用于选择整行。&lt;code>V&lt;/code>命令进入。&lt;/li>
&lt;li>&lt;strong>块模式（Visual Block mode）&lt;/strong>：用于选择文本块（矩形区域）。&lt;code>ctrl+v&lt;/code>命令进入。&lt;/li>
&lt;li>可以与&lt;code>p, y, d, c, r, &amp;lt;, &amp;gt;, ~, gU, gu&lt;/code>等命令组合使用。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>大量快捷键：Vim具有大量的快捷键，可以提高编辑效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宏记录：Vim支持宏记录，可以录制一系列键盘操作并重复执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插件支持：Vim支持大量的插件，可以扩展其功能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在Linux和Unix系统中，Vim通常已经预装。Windows系统则需要手动安装。对于初次使用Vim的用户，建议先学习一些基础操作命令，并通过互联网上的资源来深入了解它的使用方法和高级功能。&lt;/p>
&lt;blockquote>
&lt;p>提示：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>阅读本文需要&lt;strong>有一定的vim了解&lt;/strong>，还要拥有vim环境，并且你应该一边阅读，&lt;strong>一边实操&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你觉得本教程啰嗦，你可以运行&lt;code>vimtutor&lt;/code>学习官方提供的tutor教程。有的vim版本是中文教程。如果你的不是可以网上搜索。&lt;a class="link" href="https://arlettebrook.github.io/docs/vimtutor.txt" >备用(1.7中文版）&lt;/a>（下载之后用vim打开阅读）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当然强烈建议你学习完本教程之后去过一边&lt;code>vimtutor&lt;/code>，它可以让你边学边练。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="史上最好用的文本编辑器vim">
&lt;a href="#%e5%8f%b2%e4%b8%8a%e6%9c%80%e5%a5%bd%e7%94%a8%e7%9a%84%e6%96%87%e6%9c%ac%e7%bc%96%e8%be%91%e5%99%a8vim" class="header-anchor">#&lt;/a>
史上最好用的文本编辑器VIM
&lt;/h3>&lt;p>对于vi/vim只是点评一点：这是一个你不需要使用鼠标，不需使用小键盘，只需要使用大键盘就可以完成很多复杂功能文本编辑的编辑器。不然主流IDE也不会有vim插件，如：jetbrains全系列都支持的&lt;a class="link" href="https://github.com/JetBrains/ideavim" target="_blank" rel="noopener"
>ideavim插件&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>学习 &lt;a class="link" href="http://www.vim.org/" target="_blank" rel="noopener"
>vim&lt;/a> 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim的学习曲线相当的大（参看&lt;a class="link" href="http://coolshell.cn/articles/3125.html" target="_blank" rel="noopener"
>各种文本编辑器的学习曲线&lt;/a>），所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下面的文章翻译自《&lt;a class="link" href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="noopener"
>Learn Vim Progressively&lt;/a>》，我觉得这是给新手最好的VIM的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。非常不错。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>警告：&lt;/p>
&lt;ul>
&lt;li>学习vim在开始时是痛苦的。&lt;/li>
&lt;li>需要时间&lt;/li>
&lt;li>需要不断地练习，就像你学习一个乐器一样。&lt;/li>
&lt;li>不要期望你能在3天内把vim练得比别的编辑器更有效率。&lt;/li>
&lt;li>事实上，你需要2周时间的苦练，而不是3天。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>将常用命令总结为四个步骤：&lt;/p>
&lt;ol>
&lt;li>存活&lt;/li>
&lt;li>感觉良好&lt;/li>
&lt;li>觉得更好，更强，更快&lt;/li>
&lt;li>使用VIM的超能力&lt;/li>
&lt;/ol>
&lt;p>当你走完这篇文章，你会成为一个vim的 superstar。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div align="center" style='color:red'>
——————————正文开始——————————
&lt;/div>
&lt;h2 id="vim常用命令总结">
&lt;a href="#vim%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4%e6%80%bb%e7%bb%93" class="header-anchor">#&lt;/a>
vim常用命令总结
&lt;/h2>&lt;h3 id="第一级--存活">
&lt;a href="#%e7%ac%ac%e4%b8%80%e7%ba%a7--%e5%ad%98%e6%b4%bb" class="header-anchor">#&lt;/a>
第一级 – 存活
&lt;/h3>&lt;p>在Normal模式下【用vim正常打开的文件都会进入该普通模式】的常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">i &lt;span class="c1">#进入Insert 模式，按 ESC 回到 Normal 模式，光标处插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># I: 行首插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a &lt;span class="c1">#进入Insert 模式，按 ESC 回到 Normal 模式，光标后插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># A：行尾插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x &lt;span class="c1">#删除光标后的一个字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># X：删除光标前的一个字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dd &lt;span class="c1">#删除光标所在行，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># D：删除光标后面的所有字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p &lt;span class="c1">#粘贴剪切板，在光标后粘贴，P：光标处粘贴。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:q！ &lt;span class="c1"># 强制退出vim。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">esc &lt;span class="c1"># 退出命令、回到normal模式。输入的命令没效果，就点它，直到起作用为止。与ctrl+c等效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#推荐&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hjkl &lt;span class="c1">#强例推荐使用其移动光标，但不必需，你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>块光标，所在的位置由头部决定。头部就是光标所在位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>光标后是指隔一个字符，就是块光标的尾部。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除命令都会将删除的存到剪切板里，但&lt;strong>只有vim命令删除的，粘贴p命令才能粘贴（与vim版本有关）。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如果要粘贴系统的剪切板内容用&lt;code>shift+insert&lt;/code>：将在光标处粘贴系统剪切板内容。
&lt;ul>
&lt;li>其他可能终端需要进入INSERT模式。&lt;/li>
&lt;li>注意不同的终端启动不同的vim版本，p粘贴命令效果可能不一样。删除命令有的会进剪切板，有的不会，但是p能粘贴。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我的环境：ideavim插件。&lt;/li>
&lt;li>补充：（后面学习之后知道：粘贴效果是与默认&lt;a class="link" href="#%e5%af%84%e5%ad%98%e5%99%a8" >寄存器&lt;/a>有关系）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>粘贴命令在粘贴一行内容时（ideavim）：&lt;/p>
&lt;ul>
&lt;li>如果光标所在位置是空行，将粘贴到该行。p与P效果一样&lt;/li>
&lt;li>如果光标所以位置不为空行，p将粘贴到下一行，P将粘贴到上一行。&lt;/li>
&lt;li>也就是以行为单位：p：在光标后粘贴，P：光标处粘贴。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Windows版本vim粘贴命令行，无论是不是空行，p会粘贴到下一行，P会粘贴到上一行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>你能在vim幸存下来只需要上述的那几个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。&lt;/p>
&lt;p>在命令模式【输入&lt;code>:&lt;/code>进入该模式，输入的命令都需要敲回车】下的常用命令（扩展）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用vim提供的在线帮助系统&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:help &amp;lt;command&amp;gt; &lt;span class="c1"># 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。或者键盘上的HELP。或者F1。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果打开的是vim内置的帮助文档，可以用ctrl+w w在文档和vim编辑窗口之间跳转。不起作用多点几下。其实是分屏切换快捷键。后续介绍。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选中帮助文档:q退出。选择编辑窗口:q!将会关闭所有窗口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:q &lt;span class="c1"># 只退出命令，可以退出未修改的文件、退出帮助等退出作用。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第二级--感觉良好">
&lt;a href="#%e7%ac%ac%e4%ba%8c%e7%ba%a7--%e6%84%9f%e8%a7%89%e8%89%af%e5%a5%bd" class="header-anchor">#&lt;/a>
第二级 – 感觉良好
&lt;/h3>&lt;p>vim常用命令（难度一下就上来了）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1.各种插入模式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> o &lt;span class="c1">#在光标所在行后插入一个空行，从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> O &lt;span class="c1">#在光标所在行前插入一个空行，从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cw &lt;span class="c1">#向后剪切光标所在字符的同类型字符。可以是一个字符串，或者一串标点符号，并从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s &lt;span class="c1"># 该命令与x命令功能一样，区别：会进入insert模式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2.简单的移动光标&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="c1">#数字0到所在行头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ &lt;span class="c1">#到所在行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ^ &lt;span class="c1">#到所在行首不是空白的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> g_ &lt;span class="c1">#到所在行尾不是空白的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 匹配搜索跳转 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /pattern &lt;span class="c1">#回车搜索 pattern 的字符串,如果搜索出多个匹配，可按n键到下一个，N上一个。匹配之后一直存在。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ?pattern &lt;span class="c1"># 逆向搜索跳转到指定字符，ctrl+o相对于大写的N&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hls &lt;span class="c1"># 开启高亮显示：have light search。默认关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hlsearch &lt;span class="c1"># 开启高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nohls &lt;span class="c1"># 关闭高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :nohlsearch &lt;span class="c1"># 临时关闭高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :nohls &lt;span class="c1">#临时关闭高亮显示，在次搜索或者n会出现高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set incsearch &lt;span class="c1"># 动态显示搜索结果，通常配合高亮使用。默认关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set is &lt;span class="c1"># 动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set noincsearch &lt;span class="c1"># 关闭动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nois &lt;span class="c1"># 关闭动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hls is
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nohls nois
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 可以将set命令保存到vim的配置文件中让其永久生效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 匹配的时候：默认没有有忽略大小写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set ic &lt;span class="c1"># ignore case&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set noic &lt;span class="c1"># no ignore case 不忽略大小写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /搜索的字符&lt;span class="se">\c&lt;/span> &lt;span class="c1"># 临时忽略大小写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#3.拷贝/粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> p &lt;span class="c1">#光标后粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> P &lt;span class="c1">#光标出粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> yy &lt;span class="c1">#复制光标所在行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Y &lt;span class="c1"># 与yy等效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#4.撤销/恢复&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> u &lt;span class="c1">#撤销 相对于ctrl+z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrl+r &lt;span class="c1"># 恢复撤销，相对于ctrl+shift+z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#5.打开/保存/退出/另存为/清空&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e &amp;lt;path/to/file&amp;gt; &lt;span class="c1">#打开指定文件，不存在会创建，e是edit的缩写。ideavim版本不存在打不开。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e! &lt;span class="c1"># 放弃所有的更改，重新加载当前文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :bn &lt;span class="c1">#你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :bp &lt;span class="c1">#上一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#冒号后可以加数字，:2bn表示下2个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :w &lt;span class="c1">#保存，w死write的缩写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#指定文件名就是另存为，后面加!: 强制保存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :sav &amp;lt;path/to/file&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#二者区别：后者将修改保存到指定文件，并打开指定文件，可以继续编辑&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 旧文件的修改会被抛弃掉，sav是saveas的缩写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wq &lt;span class="c1">#保存退出，随便那个都行。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wq! &lt;span class="c1"># 强制保存并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wa &lt;span class="c1"># 保存所有打开的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wqa &lt;span class="c1"># 保存所有打开的文件并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 后面加！都是强制&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :x &lt;span class="c1">#保存退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ZZ &lt;span class="c1">#保存退出，效果一样&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zz &lt;span class="c1"># 如果可能，将该行水平居中。等于与M。m是标记。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :q &lt;span class="c1">#退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :q! &lt;span class="c1">#强制退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :qa! &lt;span class="c1">#强行退出所有的正在编辑的文件，就算别的文件有更改。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :%d &lt;span class="c1">#删除文件所有内容&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很好，花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>c&lt;/code>命令是一个组合命令，与d命令类似，都是删除命令，区别是c命令使用之后会&lt;strong>进入insert模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>C&lt;/code>与&lt;code>D&lt;/code>命令一样，从光标位置删除到行尾部，区别D不会进入insert模式。&lt;/li>
&lt;li>&lt;code>cc&lt;/code>清空光标所在行并进入insert，与&lt;code>dd&lt;/code>区别：不会删除该行，只是清空到剪切板。&lt;/li>
&lt;li>&lt;code>w&lt;/code>光标移动到不同类字符的头部（对空格字符会忽略，&lt;strong>就是移动到下一个单词的开头&lt;/strong>），
&lt;ul>
&lt;li>有大写命令，移动字符范围更广。就是对同类型字符判断更广。&lt;/li>
&lt;li>&lt;code>cw&lt;/code>从光标处&lt;strong>删除到不同类字符的头部&lt;/strong>（不会忽略空格字符）。&lt;code>dw&lt;/code>会忽略空格。
&lt;ul>
&lt;li>推荐使用&lt;code>de&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ciw&lt;/code>删除光标所在的同类字符，并进入insert模式。&lt;code>diw&lt;/code>不会进入insert模式。
&lt;ul>
&lt;li>&lt;code>caw&lt;/code>删除光标所在的同类字符，并删除后面的所以空格。&lt;/li>
&lt;li>&lt;strong>这种类型&lt;/strong>，都是删除一个单词，但是不能与e组合。如cae。三个的不能与e组合，用w。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>e&lt;/code>移动到不同类字符的尾部（忽略空格字符），如果自身不在同类字符的尾部会先移动到尾部，在往下跳转。
&lt;ul>
&lt;li>注意：尾部是指光标在同类字符的最后一个单词前面。&lt;/li>
&lt;li>&lt;code>ce&lt;/code>删除单词并进入insert模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>c0&lt;/code>从光标位置删除到行头部。&lt;/li>
&lt;li>&lt;code>c$&lt;/code>从光标位置删除到行尾部。
&lt;ul>
&lt;li>当然也可以组合&lt;code>c^&lt;/code>, &lt;code>cg_&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ct字符&lt;/code>删除光标到第一个指定字符之间的字符（删除到指定的字符），并进入insert模式。&lt;/li>
&lt;li>&lt;code>%&lt;/code>会在最近括号之间来回跳转。
&lt;ul>
&lt;li>&lt;code>d%&lt;/code>光标在括号上，会删除括号及括号内的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>意味着d命令也可以和上面组合，区别就是不会进入insert模式。
&lt;ul>
&lt;li>前面加数字表示重复几次。
&lt;ul>
&lt;li>&lt;code>2w&lt;/code>光标移动两次不同类字符。注意w命令没有其他命令组合时会忽略空格。加数字也会忽略。&lt;/li>
&lt;li>&lt;code>2dd&lt;/code>类型删除两行。&lt;code>2cc&lt;/code>删除之后进入insert模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>y&lt;/code>命令也是一个组合命令，用于与复制相关的命令。需要配合其他命令使用，如：：&lt;/p>
&lt;ul>
&lt;li>&lt;code>yy&lt;/code>复制光标所在行。
&lt;ul>
&lt;li>&lt;code>3yy&lt;/code>表示连续复制三行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>yw&lt;/code>复制到不同类字符的前面，不会忽略空格。空格属于字符（就是复制一个单词）。
&lt;ul>
&lt;li>&lt;code>yiw&lt;/code>复制所在的字符，就是复制完整单词。&lt;/li>
&lt;li>&lt;code>yaw&lt;/code>复制完整单词包括单词后面的空格，不包括前面的，不能与e组合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>y0&lt;/code>: 从光标位置复制到行头，&lt;code>y^&lt;/code>不包括空格。&lt;/li>
&lt;li>&lt;code>y$&lt;/code>: 从光标位置复制到行尾，&lt;code>yg_&lt;/code>不包括空格。&lt;/li>
&lt;li>&lt;code>v&lt;/code>进入可视模式之后移动光标，选择文本之后，&lt;code>y&lt;/code>命令可以复制选中的文本，自动返回normal。&lt;code>c&lt;/code>会进入insert模式。
&lt;ul>
&lt;li>意味着前面的组合命令都可以与visual模式配合使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>yt字符&lt;/code>从光标位置复制到指定字符之间的字符。&lt;/li>
&lt;li>&lt;code>y%&lt;/code>如果光标在括号上，将复制括号及括号内的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>u&lt;/code>命令相对于&lt;code>ctrl+z&lt;/code>撤销命令：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>u&lt;/code>命令会将光标移动到最近修改的地方，如果光标所在位置正是最近修改的地方，将执行撤销操作。(与vim版本有关，有的直接撤销)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>U&lt;/code>撤销对当前行的所有更改,以行为单位，&lt;strong>撤销到insert之前的状态&lt;/strong>。部分vim版本不能使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+u&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>normal模式下：光标向上移动半页。&lt;/li>
&lt;li>insert模式下：与Emacs模式一样。&lt;/li>
&lt;li>command模式下：与Emacs模式一样，但是不会删除&lt;code>:&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="第三级--更好更强更快">
&lt;a href="#%e7%ac%ac%e4%b8%89%e7%ba%a7--%e6%9b%b4%e5%a5%bd%e6%9b%b4%e5%bc%ba%e6%9b%b4%e5%bf%ab" class="header-anchor">#&lt;/a>
第三级 – 更好，更强，更快
&lt;/h3>&lt;p>先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。&lt;/p>
&lt;p>这里你将会学到以下常用vim常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1.重复命令【更好】&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> . &lt;span class="c1">#重复上一次命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> N&amp;lt;command&amp;gt; &lt;span class="c1">#数字N重复后面的命令N词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#演示：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2dd &lt;span class="c1">#删除两行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3p &lt;span class="c1">#粘贴剪切板3次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 10iide &lt;span class="o">[&lt;/span>Esc&lt;span class="o">]&lt;/span> &lt;span class="c1">#光标所在字符前插入10个ide字符串，可以换成a就是后面，效果更好&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> . &lt;span class="c1">#重复上一次插入10ide命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3. &lt;span class="c1">#插入3个ide，这里不是30个ide，要注意。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2.光标移动【更强】：你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :N &lt;span class="c1">#光标到数字N行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NG &lt;span class="c1">#同理光标到数字N行，等同于Ngg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrl+g &lt;span class="c1"># 显示文件的信息，包括行号，百分比，部分vim版本起作用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gg &lt;span class="c1">#光标到第一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> G &lt;span class="c1">#光标到最后一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> w &lt;span class="c1">#光标移动到下一个不同类型的字符的开头，就是移动到不同类型的字符前，忽略空格字符。就是跳转到下一个单词前。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> e &lt;span class="c1">#光标移动到 当前 或者 下一个 不同类型的最后一个字符上。效果：移动到当前同类型字符的末尾 或者 移动到下一个不同类型字符的末尾。【跳过单词】忽略空格字符。就是跳转到本单词或下一个单词末尾。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 他们的大写命令，移动范围更广，就是对同类型字符判断更广。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#最强的光标移动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> % &lt;span class="c1">#匹配括号移动，自己体会，超级好用。支持(, {, [。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * &lt;span class="c1"># 匹配光标当前所在的单词，移动到下一个单词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="se">\#&lt;/span> &lt;span class="c1"># 匹配光标当前所在的单词，移动到上一个单词，实际\没有，这里是转义作用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#二者匹配之后都可以重复使用，起到切换的作用，n下一个同理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#更快&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;start position&amp;gt;&amp;lt;command&amp;gt;&amp;lt;end position&amp;gt; &lt;span class="c1">#光标的移动与命令的联动，组合命令通常与光标移动命令组合使用，官方解释是操作加动作。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#演示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0y$ &lt;span class="c1">#拷贝当前行，一般用yy，0行首，y拷贝，$行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ye &lt;span class="c1">#拷贝当前同类型字符的末尾，y拷贝，e跳到同类型字符末尾，与yw效果一样&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 注意这两个要考虑光标的位置，光标必须在单词的头部。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 用yiw,无论光标在哪里，只要在单词上，就能复制整个单词。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># yaw复制完整单词包括单词后面的空格，不包括前面的，不能与e组合。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dw &lt;span class="c1">#删除当前同类型字符&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d$ &lt;span class="c1">#从当前删除到行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d0 &lt;span class="c1">#从当前删除到行首&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dgg &lt;span class="c1">#从当前删除到文件开头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dG &lt;span class="c1">#从当前删除到文件末尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :%d &lt;span class="c1"># 清空整个文件内容。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e! &lt;span class="c1"># 忽略所有修改，重新加载当前文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#更多可组合命令d (删除 )、v (可视化的选择)、gU (变大写)、gu (变小写)、y（复制）、c（删除进入insert）等等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 示例：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y2/apple &lt;span class="c1"># 复制两个apple之间的内容，不包括最后一个apple。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gUiw &lt;span class="c1"># 将光标所在单词转大写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> diw &lt;span class="c1"># 删除当前光标所在单词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#d上面演示了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#注意变大小写要有对象才能变，不然出错。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>补充&lt;/strong>（这部分可以最后在看，或看vimtutor在来）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>r字符&lt;/code>：替换光标后的字符为指定字符。&lt;/p>
&lt;ol>
&lt;li>&lt;code>R&lt;/code>连续替换光标后的字符。esc退出。&lt;/li>
&lt;li>&lt;code>:r 输入流&lt;/code>可以提取文件（指定路径），或者输入流的内容到光标位置后面，如：&lt;code>:r !ls&lt;/code>：将在光标后插入&lt;code>ls&lt;/code>命令的输出。
&lt;ol>
&lt;li>用于提取文件内容到光标后&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>输入 &lt;strong>:s/old/new/g&lt;/strong> 可以替换光标所在行的old字符串为new字符串。g表示替换区全部，没有只替换第一个&lt;/p>
&lt;p>要替换两行之间出现的每个匹配串，请
输入 :#,#s/old/new/g 其中 #,# 代表的是替换操作的若干行中首尾两行的行号。
输入 :%s/old/new/g 则是替换整个文件中的每个匹配串。
输入 :%s/old/new/gc 会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:!外部命令&lt;/code>执行外部命令，如&lt;code>:!ls&lt;/code>，支持所有的外部命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim支持保存一个文件的部分内容：&lt;/p>
&lt;ol>
&lt;li>进入可视模式之后，选中要保存的部分，然后按 : 字符。将看到屏幕底部会出现 :&amp;rsquo;&amp;lt;,&amp;rsquo;&amp;gt; 。在后面输入另存为文件命令即可&lt;code>w 文件名&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在命令模式下，可以使用&lt;code>tab&lt;/code>键补全命令，&lt;code>ctrl+d&lt;/code>显示能补全的命令。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ctrl+u&lt;/code>清空光标前的字符，除了&lt;code>:&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>f字符&lt;/code>光标向前移动到指定字符前。&lt;code>F字符&lt;/code>反向。&lt;/p>
&lt;ol>
&lt;li>&lt;code>t字符&lt;/code>光标向前移动到指定字符的前一个字符前。&lt;code>T字符&lt;/code>反向。&lt;/li>
&lt;li>在使用这个两个命令之后&lt;code>;&lt;/code>光标跳转到下一个相同字符，&lt;code>,&lt;/code>上一个。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gf&lt;/code>将光标所在行文本内容作为文件打开，会自动光标当前文件（前提已经保存）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>H&lt;/code>光标移动到光标去过的屏幕最高行，&lt;code>L&lt;/code>屏幕的最低行。（与版本有关）&lt;/p>
&lt;ol>
&lt;li>&lt;code>J&lt;/code>删除末尾的换行符，&lt;code>ctrl-j&lt;/code>换行、回车的意思，（重要）寄存器中用&lt;code>^J&lt;/code>表示。&lt;/li>
&lt;li>&lt;code>K&lt;/code>查看光标所在单词的&lt;code>man&lt;/code>页面。（ideavim不支持）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>b&lt;/code>与&lt;code>w&lt;/code>命令反向。&lt;code>B&lt;/code>范围更广。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ge&lt;/code>与&lt;code>e&lt;/code>命令反向。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+u&lt;/code>normal模式下光标&lt;strong>向上移动半页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+b&lt;/code>光标&lt;strong>向上移动差不多一页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+f&lt;/code>&lt;strong>向下移动一页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+d&lt;/code>&lt;strong>向下移动半页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M&lt;/code>光标移动到屏幕中间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>(&lt;/code>向上移动到句子的开头&lt;/p>
&lt;ol>
&lt;li>&lt;code>)&lt;/code>向下移动到句子的开头&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>{&lt;/code>向上移动到段落的开头。&lt;/p>
&lt;ol>
&lt;li>&lt;code>}&lt;/code>向下移动到段落的开头。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>da(&lt;/code>删除括号及括号内的内容。括号可以换成&lt;code>&amp;quot;, ', (, ), {, }, [, ].&lt;/code>中的一个，删除对应的括号。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>di(&lt;/code>删除不包括括号。括号可以换成&lt;code>&amp;quot;, ', (, ), {, }, [, ].&lt;/code>中的一个，删除对应的括号内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>i不包括括号，a包括括号。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;gt;&amp;gt;&lt;/code>向后缩进光标所在行。&lt;/p>
&lt;ol>
&lt;li>&lt;code>&amp;lt;&amp;lt;&lt;/code>反向缩进&lt;/li>
&lt;li>&lt;code>.&lt;/code>命令重复上一次命令。（部分命令不可重复：如&lt;code>2j&lt;/code>)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gU移动光标命令&lt;/code>选中的字符转大写。&lt;/p>
&lt;ol>
&lt;li>&lt;code>gu移动光标命令&lt;/code>选中的字符转小写&lt;/li>
&lt;li>&lt;code>~&lt;/code>将光标后的字符大小写互转，可以选中多个互转。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在insert模式下&lt;code>ctrl-o&lt;/code>会临时进入Normal模式，执行别的命令之后会，自动返回insert模式。&lt;/p>
&lt;ol>
&lt;li>可用于删除光标后的单词继续编辑：如：&lt;code>ctrl-o de&lt;/code>&lt;/li>
&lt;li>vi模式中不可以使用。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在insert模式下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>ctrl-w&lt;/code>向光标前删除到同类字符。忽略空格，就是删除一个单词。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ctrl-u&lt;/code>全部删除。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl-h&lt;/code>等同于退格键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim在insert模式下没有提供向后删除字符的命令&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="第四级--vim-超能力">
&lt;a href="#%e7%ac%ac%e5%9b%9b%e7%ba%a7--vim-%e8%b6%85%e8%83%bd%e5%8a%9b" class="header-anchor">#&lt;/a>
第四级 – Vim 超能力
&lt;/h3>&lt;p>你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。&lt;/p>
&lt;p>其实是对上面的命令再次复习😂（不在解释其作用，如果你还看不懂，证明练得还不够。）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">g_
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">f&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="c1"># F&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">, or &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">t， &lt;span class="c1"># T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">, or &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3f,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dt,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ct,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ye
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yt&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dt&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ce
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ct&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">P
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">diw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">daw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ciw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yiw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yaw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果你搞不明白上面的复杂组合命令，可以看v模式选择的是那个部分。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">viw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vaw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>补充&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>&amp;lt;motion&amp;gt;i&amp;lt;option&amp;gt;&lt;/code>、&lt;code>&amp;lt;motion&amp;gt;a&amp;lt;object&amp;gt;&lt;/code>根据动作（motion）、范围（i、a）操作对象（object）。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>motion动作：常用：d, c, v, y,&lt;/p>
&lt;ul>
&lt;li>
&lt;p>i与a的区别：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对于空格&lt;/strong>i会忽略，a会保留&lt;strong>后面&lt;/strong>的使用空格。&lt;/li>
&lt;li>其他字符：&lt;strong>i不包括，a包括。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>object：操作对象，常用：&lt;/p>
&lt;ul>
&lt;li>w：一个单词。&lt;/li>
&lt;li>s：一个句子（不包括缩进、前后空白）。&lt;/li>
&lt;li>p：一个段落（包括缩进，前后空白）。&lt;/li>
&lt;li>其他字符：&lt;code>&amp;quot;, ', (, ), {, }, [, ].&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注意：是向后搜索包裹光标的对象。没有，只有&lt;code>&amp;quot;&lt;/code>对象会向内查找。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>示例：假设你有一个字符串 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>而光标键在第一个 &lt;code>o &lt;/code>的位置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>vi&amp;quot;&lt;/code> → 会选择 &lt;code>foo&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>va&amp;quot;&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vi)&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>va(&lt;/code> → 会选择&lt;code>(&amp;quot;foo&amp;quot;)&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>v2i)&lt;/code> → 会选择 &lt;code>map (+) (&amp;quot;foo&amp;quot;)&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>v2a)&lt;/code> → 会选择 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>光标在&lt;code>a&lt;/code>位置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>vi&amp;quot;&lt;/code> → 会选择 &lt;code>foo&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>va&amp;quot;&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vi)&lt;/code> → 会选择 &lt;code>map (+) (&amp;quot;foo&amp;quot;)&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>va(&lt;/code> → 会选择 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>v2i)&lt;/code>、&lt;code>v2a)&lt;/code>两个无法选中，不会向内查找。&lt;/p>
&lt;ul>
&lt;li>只有&lt;code>&amp;quot;&lt;/code>会。并不考虑数量。&lt;code>v2i&amp;quot;&lt;/code>→ 会选择 &lt;code>foo&lt;/code>, 与&lt;code>vi&amp;quot;&lt;/code>等效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>可视（VISUAL）模式操作：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ctrl+v&lt;/code>进入可视模式的块模式（Windows占用，用&lt;code>ctrl+q&lt;/code>代替）。&lt;code>v&lt;/code>字符模式，&lt;code>V&lt;/code>行模式。&lt;/li>
&lt;li>以上模式可以配合其他移动动作使用，如&lt;code>0&lt;/code>, &lt;code>ctrl+f&lt;/code> , &lt;code>$&lt;/code>方便选择。如：
&lt;ul>
&lt;li>选择多行，&lt;code>J&lt;/code>命令批量&lt;strong>移除选择行的换行符&lt;/strong>。&lt;/li>
&lt;li>向后缩进&lt;code>&amp;gt;&lt;/code>选中的文本，&lt;code>&amp;lt;&lt;/code>向前。
&lt;ul>
&lt;li>选中之后&lt;code>=&lt;/code>自动给缩进。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>块模式还可以批量修改多行。典型的操作，如：
&lt;ul>
&lt;li>&lt;strong>添加注释&lt;/strong>： &lt;code>0 ctrl+v ctrl+d 选中要注释的 I # ESC&lt;/code>
&lt;ul>
&lt;li>注释只能用行首插入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>末尾添加分号：&lt;code>$ ctrl+v ctrl+d 选择要修改的 A ; esc &lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意：只有块模式可以批量修改。并且只有在块头或者块尾可以修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自动补全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在insert模式下，输入一个词的开头，然后按&lt;code>ctrl+n&lt;/code>or&lt;code>ctrl+p&lt;/code>自动补全就出现了。&lt;/li>
&lt;li>如果有多个，n是下一个，p是上一个。&lt;/li>
&lt;li>在ideavim中是代码提示。&lt;/li>
&lt;li>选中之后，继续输入，不用回车确定。ideavim代码中需要回车确定。&lt;/li>
&lt;li>具体看情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="标记">
&lt;a href="#%e6%a0%87%e8%ae%b0" class="header-anchor">#&lt;/a>
标记
&lt;/h4>&lt;p>在 Vim 中，&lt;code>m&lt;/code> 命令用于设置标记（mark）。标记是 Vim 提供的一种功能，用于在文件中记住特定的位置，以便以后快速跳转到这些位置。标记可以是局部标记（仅在当前文件中有效）或全局标记（在所有文件中有效）。以下是 &lt;code>m&lt;/code> 命令的详细使用方法：&lt;/p>
&lt;p>&lt;strong>设置标记&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>设置局部标记&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，按 &lt;code>m&lt;/code> 然后按一个小写字母（例如 &lt;code>a&lt;/code>）。&lt;/li>
&lt;li>例子：按 &lt;code>ma&lt;/code> 在当前光标位置设置标记 &lt;code>a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>设置全局标记&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，按 &lt;code>m&lt;/code> 然后按一个大写字母（例如 &lt;code>A&lt;/code>）。&lt;/li>
&lt;li>例子：按 &lt;code>mA&lt;/code> 在当前光标位置设置全局标记 &lt;code>A&lt;/code>。&lt;/li>
&lt;li>在ideavim中会有高亮。&lt;/li>
&lt;li>0-9字符也表示全局标记。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>m&lt;/code>命令是&lt;code>:mark 标记字符&lt;/code>的快捷键。
&lt;ol>
&lt;li>区别是&lt;code>m&lt;/code>会记录光标的列位置，&lt;code>:mark&lt;/code>不会，它的列号始终为0。&lt;/li>
&lt;li>所以&lt;code>:mark&lt;/code>跳转只会到标记行的头部。不会跳转到标记行光标的位置。&lt;/li>
&lt;li>一般使用&lt;code>m&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>注意：
&lt;ol>
&lt;li>标记字符只有一个。
&lt;ol>
&lt;li>标记字符常用的字母、数字。其他的部分能用。不用考虑。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>标记信息包括标记字符、光标的行号、列号以及行的文本内容。&lt;/li>
&lt;li>后续设置存在的标记会覆盖。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>跳转到标记&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>' 标记字符&lt;/code>：自动跳转到标记行的行头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>`` 标记字符`：自动跳转到标记行的光标位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>'a&lt;/code>：跳转到局部标记a的行头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>``A`跳转到全局标记A所在行光标的位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跳转标记的开头如何有空格，都会忽略。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>查看标记&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>:marks&lt;/code>：显示所有已设置的标记及其光标位置、行文本内容。&lt;/li>
&lt;li>使用&lt;code>:mark&lt;/code>标记的行，光标的列号为0。所以`` `也只能跳到标记行头。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>删除标记&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>删除指定标记：&lt;code>:delmarks ...标记字符&lt;/code>&lt;/p>
&lt;ol>
&lt;li>后面可以跟多个标记字符，用不用空格隔开都行。如： &lt;code>:delmarks ab&lt;/code> 删除标记 &lt;code>a&lt;/code> 和 &lt;code>b&lt;/code>。&lt;/li>
&lt;li>还可以删除范围内标记：如： &lt;code>:delmarks a-d&lt;/code> 删除标记 &lt;code>a&lt;/code> 到 &lt;code>d&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>删除所有标记：&lt;code>:delmarks!&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>注意该命令只能删除用户设置的所有本地标记，并且内置的特殊标记、全局标记不能删除。如&lt;code>', &amp;lt;, &amp;gt;&lt;/code>。（我快崩溃了😭）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>上面的三个内置特殊标记，不建议用来做标记。他们具有特殊的含义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>他们是动态生成的内置特殊标记，无法删除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>含义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;lt; # 可表示上次visual模式选择的行头。还可表示标记的行头。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&lt;/span>&amp;gt; &lt;span class="c1"># 可表示上次visual模式选择的末尾的行头。还可以表示标记的行头。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>&amp;lt; &lt;span class="c1"># 可表示上次visual模式选择开始的位置。还可表示标记行鼠标的位置。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>&amp;gt; &lt;span class="c1"># 可表示上次visual模式选择的末尾。还可表示标记行鼠标的位置。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">不用他们做标记。通常用在visual模式中，会动态自动生成。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">例子：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:&lt;span class="s1">&amp;#39;&amp;lt;,&amp;#39;&lt;/span>&amp;gt;y 复制上次选择的内容。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:&lt;span class="s1">&amp;#39;&amp;lt;,&amp;#39;&lt;/span>&amp;gt;d 删除上次选择的内容。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="c1"># 跳到光标上次所在的行头。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">配合标记可以实现来回两个标记行头之间跳转
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">``&lt;/span> &lt;span class="c1"># 跳转到光标上次所在的确切位置（行和列）。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">配合标记可以实现来回两个标记光标确切位置之间跳转
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">意味着：&lt;span class="sb">`&lt;/span> &lt;span class="err">&amp;#39;&lt;/span> 做的标记会随时改变。不用他们做标记，会动态自动生成。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类似命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl-o&lt;/code>：跳转到上一个位置。&lt;/li>
&lt;li>&lt;code>Ctrl-i&lt;/code>：跳转到下一个位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>全局标记需要指定标记字符才能删除。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Vim 内置的特殊标记是 Vim 自动管理的，用于记录特定的编辑位置和选择范围。这些标记不能手动删除，因为它们是为特定功能设计的，并且在相应操作时会动态更新。用户可以删除自己设置的标记，但不能删除这些内置特殊标记。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="寄存器">
&lt;a href="#%e5%af%84%e5%ad%98%e5%99%a8" class="header-anchor">#&lt;/a>
寄存器
&lt;/h4>&lt;p>在 Vim 中，寄存器（register）是一个&lt;strong>临时存储位置&lt;/strong>，用于&lt;strong>存储和检索文本、命令、宏等&lt;/strong>。寄存器的使用可以大大提高编辑效率。以下是对寄存器的详细介绍和使用方法：&lt;/p>
&lt;p>&lt;strong>寄存器的分类&lt;/strong>：&lt;/p>
&lt;p>Vim 中有多种类型的寄存器，每种类型都有特定的用途：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>无名寄存器&lt;/strong>（&lt;code>&amp;quot;&lt;/code>）Unnamed Register：
&lt;ul>
&lt;li>默认寄存器，所有的删除（&lt;code>d&lt;/code>）、复制（&lt;code>y&lt;/code>）、粘贴（&lt;code>p&lt;/code>）操作都与此寄存器关联。&lt;strong>缓存最后一次操作内容&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>具名寄存器&lt;/strong>（&lt;code>a&lt;/code> 到 &lt;code>z&lt;/code> 和 &lt;code>A&lt;/code> 到 &lt;code>Z&lt;/code>）Named Register：
&lt;ul>
&lt;li>用于存储用户指定的文本或宏。&lt;/li>
&lt;li>小写字母（&lt;code>a&lt;/code> 到 &lt;code>z&lt;/code>）：&lt;strong>覆盖存储&lt;/strong>。&lt;/li>
&lt;li>大写字母（&lt;code>A&lt;/code> 到 &lt;code>Z&lt;/code>）：&lt;strong>追加存储&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>剪贴板寄存器&lt;/strong>（&lt;code>*&lt;/code> 或 &lt;code>+&lt;/code>）selection and drop：
&lt;ul>
&lt;li>用于与系统剪贴板交互。二者可以画等号，区别：&lt;/li>
&lt;li>&lt;code>*&lt;/code>：与选择剪贴板（primary selection）交互（在 X Window 系统中）。&lt;/li>
&lt;li>&lt;code>+&lt;/code>：与系统剪贴板（clipboard）交互。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>数字寄存器&lt;/strong>（&lt;code>0&lt;/code> 到 &lt;code>9&lt;/code>）numbered：
&lt;ul>
&lt;li>自动存储最近的删除文本。&lt;/li>
&lt;li>&lt;code>0&lt;/code>：最近的复制（&lt;code>yank&lt;/code>）操作。&lt;/li>
&lt;li>&lt;code>1&lt;/code> 到 &lt;code>9&lt;/code>：最近的删除（&lt;code>delete&lt;/code>）操作，&lt;code>1&lt;/code> 是最新的，&lt;code>9&lt;/code> 是最旧的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>读取（命令）寄存器&lt;/strong>（&lt;code>:&lt;/code>）：
&lt;ul>
&lt;li>存储最近的命令行输入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>搜索寄存器&lt;/strong>（&lt;code>/&lt;/code>）last search pattern：
&lt;ul>
&lt;li>存储最近的搜索模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>小删除寄存器&lt;/strong>（&lt;code>-&lt;/code>）small delete：
&lt;ul>
&lt;li>用于存储小于一行的删除操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>黑洞寄存器&lt;/strong>（&lt;code>_&lt;/code>）black hole：
&lt;ul>
&lt;li>丢弃写入其中的任何内容，不对其进行存储。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>表达式寄存器&lt;/strong>（&lt;code>=&lt;/code>）expression：
&lt;ul>
&lt;li>允许你输入数学运算进行计算。&lt;/li>
&lt;li>只能在Insert和Command模式使用，且部分版本不支持。&lt;/li>
&lt;li>如：insert模式下：&lt;code>ctrl-r =2+2 enter&lt;/code>结果为4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>只读寄存器&lt;/strong>read only：
&lt;ul>
&lt;li>命令寄存器&lt;code>:&lt;/code>&lt;/li>
&lt;li>点寄存器&lt;code>.&lt;/code>：上次insert模式插入的文本内容。&lt;/li>
&lt;li>搜索寄存器&lt;code>/&lt;/code>&lt;/li>
&lt;li>当前文件名寄存器&lt;code>%&lt;/code>&lt;/li>
&lt;li>上一个文件名寄存器&lt;code>#&lt;/code>&lt;/li>
&lt;li>这些寄存器都只能读。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>使用寄存器&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>查看寄存器内容&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>:reg&lt;/code> 或 &lt;code>:registers&lt;/code>&lt;/strong>：查看所有寄存器的内容。
&lt;ul>
&lt;li>例子：输入 &lt;code>:reg&lt;/code> 查看所有寄存器的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;code>:reg {register}&lt;/code>&lt;/strong>：查看指定寄存器的内容。
&lt;ul>
&lt;li>寄存器可以有多个，用不用空格隔开都行。&lt;code>:reg 01 2&lt;/code>查看寄存器0, 1, 2的内容。&lt;/li>
&lt;li>例子：输入 &lt;code>:reg a&lt;/code> 查看寄存器 &lt;code>a&lt;/code> 的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>引用寄存器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在Nomal模式下寄存器可以通过&lt;strong>在名字前加双引号来引用&lt;/strong>。例如，我们可以通过 &lt;code>&amp;quot;a&lt;/code> 来访问在 &lt;code>a&lt;/code> 寄存器中的内容。&lt;/li>
&lt;li>在Command或Insert模式下寄存器可以通过&lt;code>ctrl-r 名字&lt;/code>来引用。
&lt;ul>
&lt;li>注意在这两个模式下引用的寄存器会&lt;strong>立即输出其存储的内容&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复制到寄存器&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}y{motion}&lt;/code>：复制文本到指定寄存器。
&lt;ul>
&lt;li>例子：输入 &lt;code>&amp;quot;ayiw&lt;/code> 将当前单词复制到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>粘贴寄存器内容&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}p&lt;/code> 或 &lt;code>&amp;quot;{register}P&lt;/code>：粘贴寄存器内容。
&lt;ul>
&lt;li>&lt;code>p&lt;/code> 在光标后粘贴，&lt;code>P&lt;/code> 在光标前粘贴。&lt;/li>
&lt;li>例子：输入 &lt;code>&amp;quot;ap&lt;/code> 将寄存器 &lt;code>a&lt;/code> 的内容粘贴到光标后。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除到寄存器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}d{motion}&lt;/code>：删除文本并存储到指定寄存器。
&lt;ul>
&lt;li>例子：输入 &lt;code>&amp;quot;adiw&lt;/code> 删除当前单词并将其存储到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="#%e5%ae%8f%e5%bd%95%e5%88%b6" >录制宏&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>注意事项：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>无名寄存器：是默认的寄存器。d、c、s、x，y，p这些操作的文本，都在&lt;code>&amp;quot;&amp;quot;&lt;/code>无名寄存器中（&lt;strong>存储最后一次操作内容&lt;/strong>）。除非修改默认寄存器。&lt;/p>
&lt;ol>
&lt;li>意味着删除的可以使用p命令粘贴，因为默认从无名寄存器取值。&lt;/li>
&lt;li>默认寄存器如果是无名寄存器，p粘贴命令不能粘贴剪切板内容。要引用剪切板寄存器&lt;code>*&lt;/code>或&lt;code>+&lt;/code>才能粘贴。&lt;/li>
&lt;li>自然在vim中复制、删除的也就不能进剪切板。需要指定剪切板寄存器。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>数字寄存器：用于存储最近复制、删除的内容，删除的要以行为单位才会存储，否则删除的存储到&lt;code>-&lt;/code>寄存器。复制的不影响。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>复制用0存储。复制的只有0和无名寄存器存储。后者很快失效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除用1-9存储。数字越大，删除的时间越久。&lt;/p>
&lt;ul>
&lt;li>意味着指定寄存器，可以访问删除的内容:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;2p # 粘贴第二条删除的内容。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>数字寄存器不可以被自定义的具名也就是字母寄存器替代。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具名也就是字母寄存器存在的意义是固化需要频繁剪切的内容，不会因为操作频繁被覆盖。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>我们一般操作具名寄存器：复制，粘贴，删除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器只可以覆盖，不可以删除，由vim自身管理生命周期。不是永久存在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可跨文件使用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>寄存器的意义&lt;/strong>：&lt;/p>
&lt;p>首先，寄存器是可以&lt;strong>跨文本文件使用&lt;/strong>的，只有&lt;strong>有删除动作都会自动记录到1-9数字寄存器&lt;/strong>，&lt;strong>0存储复制动作&lt;/strong>，而这些寄存器是动态的，会变化的，如果操作动作很多，有一些操作是需要频繁使用的，那么，使用&lt;strong>自定义具名寄存器会大大的提高我们的效率&lt;/strong>，因为字母寄存器是不会改变的，除非你删除了这个寄存器。&lt;/p>
&lt;p>再次，我们如果有某些文件误修改了，或者有非法入侵，如果恶意闯入者没有删除所有寄存器的内容，我们有可能追踪到它的修改轨迹。&lt;/p>
&lt;p>最后，多说一句，寄存器的生命周期是很长的，即使服务器重启什么的，只要能正常进入系统，寄存器里的内容都是一直存在的。&lt;/p>
&lt;/blockquote>
&lt;p>Vim 的寄存器功能强大而灵活，通过熟练掌握寄存器的使用，可以极大地提升编辑效率。寄存器不仅可以用于基本的复制和粘贴，还可以存储宏、命令等，更好地管理和重用编辑内容。&lt;/p>
&lt;h4 id="宏录制">
&lt;a href="#%e5%ae%8f%e5%bd%95%e5%88%b6" class="header-anchor">#&lt;/a>
宏录制
&lt;/h4>&lt;p>在 Vim 中，宏是一组记录的&lt;strong>按键序列&lt;/strong>，可以重复执行以自动化重复性的任务。以下是使用宏的详细步骤和相关命令：&lt;/p>
&lt;p>&lt;strong>宏录制&lt;/strong>其实就是记录宏到&lt;a class="link" href="#%e5%af%84%e5%ad%98%e5%99%a8" >寄存器&lt;/a>（都是在&lt;strong>普通模式&lt;/strong>下开始、结束）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>&lt;code>q{register}&lt;/code>&lt;/strong>：在Normal模式下，开始录制宏到指定寄存器。&lt;/p>
&lt;ul>
&lt;li>例子：按 &lt;code>qa&lt;/code> 开始录制宏到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>开始录制之后可以任意执行vim命令。进行你希望录制的所有按键操作。Vim 会记录这些按键。&lt;/p>
&lt;ul>
&lt;li>例子：输入一系列编辑命令，如插入文本、删除文本、移动光标等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>q&lt;/code>&lt;/strong>：结束录制宏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>@{register}&lt;/code>&lt;/strong>：执行存储在寄存器中的宏。&lt;/p>
&lt;ul>
&lt;li>例子：按 &lt;code>@a&lt;/code> 执行寄存器 &lt;code>a&lt;/code> 中的宏。&lt;/li>
&lt;li>（ideavim目前不支持执行宏）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>@@&lt;/code>&lt;/strong>：重复执行上一次执行的宏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多次执行宏：&lt;/p>
&lt;ul>
&lt;li>操作：在普通模式下，输入一个数字，然后按 &lt;code>@&lt;/code> 和寄存器字母键。
&lt;ul>
&lt;li>&lt;code>10@@&lt;/code>执行10上次执行的宏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>例子：按 &lt;code>10@a&lt;/code> 将宏 &lt;code>a&lt;/code> 执行 10 次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>编辑和查看宏&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>查看宏内容&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，输入 &lt;code>:reg&lt;/code> 查看所有寄存器的内容，包括宏。&lt;/li>
&lt;li>例子：输入 &lt;code>:reg a&lt;/code> 查看寄存器 &lt;code>a&lt;/code> 的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>编辑宏内容&lt;/strong>：
&lt;ul>
&lt;li>操作：将宏内容复制到一个缓冲区进行编辑，然后将其粘贴回寄存器。&lt;/li>
&lt;li>例子：
&lt;ol>
&lt;li>输入 &lt;code>:let @a='your edited macro'&lt;/code>，将 &lt;code>'your edited macro'&lt;/code> 替换为编辑后的宏内容。&lt;/li>
&lt;li>或者，先用 &lt;code>:put a&lt;/code> 将寄存器内容粘贴到缓冲区，编辑后用 &lt;code>:let @a=join(getline(1, &amp;quot;$&amp;quot;), &amp;quot;\n&amp;quot;)&lt;/code> 保存修改。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>实例1&lt;/strong>：&lt;/p>
&lt;p>假设你想录制一个宏，用于在每行的末尾添加一个分号：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>开始录制&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>qa&lt;/code> 开始录制宏到寄存器 &lt;code>a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>进行操作&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>$&lt;/code> 移动到行尾。&lt;/li>
&lt;li>按 &lt;code>a;&lt;/code> 在行尾插入分号。&lt;/li>
&lt;li>按 &lt;code>Esc&lt;/code> 退出插入模式。&lt;/li>
&lt;li>按 &lt;code>j&lt;/code> 移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>结束录制&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>q&lt;/code> 结束宏录制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>执行宏&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>@a&lt;/code> 执行宏，在当前行末尾添加分号并移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>多次执行宏&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>10@a&lt;/code> 执行宏 10 次，每次在行末尾添加分号并移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>ctrl-a&lt;/code>会对光标所在数字加1.&lt;/p>
&lt;p>示例2：&lt;/p>
&lt;p>在一个只有一行且这一行只有“1”的文本中，键入如下命令：&lt;/p>
&lt;p>&lt;code>qaYp&amp;lt;C-a&amp;gt;q&lt;/code>&lt;/p>
&lt;p>解释：&lt;/p>
&lt;ul>
&lt;li>&lt;code>qa&lt;/code> 开始录制。&lt;/li>
&lt;li>&lt;code>Yp&lt;/code> 复制行并粘贴。&lt;/li>
&lt;li>&lt;code>&amp;lt;C-a&amp;gt;&lt;/code> 增加1。&lt;/li>
&lt;li>&lt;code>q&lt;/code> 停止录制。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>@a&lt;/code> → 在1下面写下 2&lt;/p>
&lt;p>&lt;code>@@&lt;/code> → 在2 正面写下3&lt;/p>
&lt;p>现在做 &lt;code>100@@&lt;/code> 会创建新的100行，并把数据增加到 103.&lt;/p>
&lt;p>通过使用宏，你可以在 Vim 中有效地自动化重复性任务，提高编辑效率。录制、执行和编辑宏的灵活性使得它们成为强大的工具，适用于各种编辑场景。&lt;/p>
&lt;h4 id="分屏">
&lt;a href="#%e5%88%86%e5%b1%8f" class="header-anchor">#&lt;/a>
分屏
&lt;/h4>&lt;p>在 Vim 中，分屏（split screen）功能非常强大，允许你在同一个 Vim 会话中同时查看和编辑多个文件或同一个文件的不同部分。以下是 Vim 分屏操作的详细介绍：&lt;/p>
&lt;p>&lt;strong>分类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>水平分屏：命令：&lt;code>:sp [file]&lt;/code>or&lt;code>:split [file]&lt;/code>：
&lt;ul>
&lt;li>指定文件水平分屏，没有指定为当前文件。&lt;/li>
&lt;li>快捷键：&lt;code>ctrl+w s&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>垂直分屏：命令：&lt;code>:vsp [file]&lt;/code>or &lt;code>:vsplit [file]&lt;/code> ：
&lt;ul>
&lt;li>指定文件重置分屏，没有指定默认为当前文件。&lt;/li>
&lt;li>快捷键：&lt;code>ctrl+w v&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>操作（最后一个快捷键可以分开按）：&lt;/p>
&lt;ul>
&lt;li>分屏窗口跟普通窗口一模一样，可以执行vim的所有的命令。
&lt;ul>
&lt;li>分屏的窗口还可以继续分屏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>切换到其他窗口&lt;/strong>
&lt;ul>
&lt;li>&lt;code>ctrl+w w&lt;/code>不同分屏窗口之间来回切换。&lt;/li>
&lt;li>&lt;code>Ctrl-w h&lt;/code>：切换到左边的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w j&lt;/code>：切换到下面的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w k&lt;/code>：切换到上面的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w l&lt;/code>：切换到右边的窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>调整窗口高度&lt;/strong>（部分vim版本不起作用）：
&lt;ul>
&lt;li>&lt;code>Ctrl-w +&lt;/code>：增加当前窗口高度。&lt;/li>
&lt;li>&lt;code>Ctrl-w -&lt;/code>：减少当前窗口高度。&lt;/li>
&lt;li>&lt;code>Ctrl-w =&lt;/code>：使所有窗口等高。&lt;/li>
&lt;li>&lt;code>ctrl-w _&lt;/code>：最大化当前水平窗口。&lt;/li>
&lt;li>&lt;code>ctrl-w |&lt;/code>：最大化当前垂直窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>调整窗口宽度&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl-w &amp;gt;&lt;/code>：增加当前窗口宽度。&lt;/li>
&lt;li>&lt;code>Ctrl-w &amp;lt;&lt;/code>：减少当前窗口宽度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关闭当前窗口&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:q&lt;/code> 或 &lt;code>:quit&lt;/code>：关闭当前窗口。&lt;/li>
&lt;li>&lt;strong>快捷键&lt;/strong>：&lt;code>Ctrl-w c&lt;/code> 或 &lt;code>Ctrl-w q&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关闭其他窗口&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:only&lt;/code>：关闭除了当前窗口之外的所有窗口。&lt;/li>
&lt;li>&lt;strong>快捷键&lt;/strong>：&lt;code>Ctrl-w o&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>交换窗口位置&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl-w r&lt;/code>：旋转窗口布局。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>拆分到标签页&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:tab split&lt;/code>：在新标签页中水平分屏当前文件。&lt;/li>
&lt;li>&lt;code>:tab vsplit&lt;/code>：在新标签页中垂直分屏当前文件。&lt;/li>
&lt;li>我测试二者效果一样，就是将指定文件，默认当前文件拆分到标签页中。跟浏览器标签页类似。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>vim打开多个文件，默认不会分屏，是以多窗口的方式打开，可以使用&lt;code>bn, bp&lt;/code>切换。
&lt;ul>
&lt;li>&lt;code>-o[n]&lt;/code>选项:指定打开的分屏窗口数量，默认n为1个，默认水平分屏。
&lt;ul>
&lt;li>可以不用指定n，根据后面的文件数来确定分屏。&lt;/li>
&lt;li>如果n与文件数不等，n有几个就分几屏，多出的文件到分别一个完整的窗口中。&lt;/li>
&lt;li>&lt;code>-O&lt;/code>垂直分屏。后面有几个文件，就几个垂直分屏。（n与文件数相等的情况）。不等分屏数由n决定，多的文件分别单独一个窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="结束语">
&lt;a href="#%e7%bb%93%e6%9d%9f%e8%af%ad" class="header-anchor">#&lt;/a>
结束语
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>上面是作者最常用的90%的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我建议你每天都学1到2个新的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在两到三周后，你会感到vim的强大的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有时候，学习VIM就像是在死背一些东西。&lt;/p>
&lt;ul>
&lt;li>官方建议：要在使用中学习，而不是在记忆中学习。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>幸运的是，vim有很多很不错的工具和优秀的文档。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行vimtutor直到你熟悉了那些基本命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其实在线帮助文档中你应该要仔细阅读的是 &lt;code>:help usr_02.txt&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你会学习到诸如 &lt;code>!，&lt;/code> 目录，寄存器，插件等很多其它的功能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>学习vim就像学弹钢琴一样，一旦学会，受益无穷。&lt;/p>
&lt;div align="center" style='color:red'>
——————————正文结束——————————
&lt;/div>
&lt;h2 id="扩展">
&lt;a href="#%e6%89%a9%e5%b1%95" class="header-anchor">#&lt;/a>
扩展
&lt;/h2>&lt;p>更多内容参考&lt;a class="link" href="https://arlettebrook.github.io/p/vim-introduction/" target="_blank" rel="noopener"
>vim-introduction&lt;/a>。&lt;/p>
&lt;h3 id="目录操作">
&lt;a href="#%e7%9b%ae%e5%bd%95%e6%93%8d%e4%bd%9c" class="header-anchor">#&lt;/a>
目录操作
&lt;/h3>&lt;p>Vim 自带的 &lt;code>netrw&lt;/code> 插件提供了文件浏览器功能，可以用来&lt;strong>浏览、操作目录和文件&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>打开目录浏览&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Explore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Ex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>会关闭当前文件。&lt;/li>
&lt;li>用vim移动命令移动，回车打开文件或命令。&lt;/li>
&lt;li>&lt;code>:q&lt;/code>退出浏览。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在垂直分屏窗口中打开目录浏览器&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Vexplore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Vex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>分屏命令都可以用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在水平分屏窗口中打开目录浏览器&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Sexplore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Sex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>浏览指定目录&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">:Explore /path/to/directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Vex /path/to/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>部分vim版本不带该目录浏览插件。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
&lt;a href="#%e5%8f%82%e8%80%83" class="header-anchor">#&lt;/a>
参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>原文地址&lt;a class="link" href="https://blog.csdn.net/niushuai666/article/details/7275406" target="_blank" rel="noopener"
>Vim简明教程【CoolShell】&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.51cto.com/u_15966109/6082781" target="_blank" rel="noopener"
>vim的寄存器详解&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://segmentfault.com/a/1190000038477576" target="_blank" rel="noopener"
>(译)Vim 寄存器：由浅入深&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Linux Common Commands</title><link>https://arlettebrook.github.io/p/linux-common-commands/</link><pubDate>Wed, 08 May 2024 19:24:26 +0800</pubDate><guid>https://arlettebrook.github.io/p/linux-common-commands/</guid><description>&lt;blockquote>
&lt;p>Linux常用命令有很多，本文不会逐个介绍。以下命令是我在后期使用中遇到的，算是我对Linux常用命令的补充、回顾、总结。本篇文章阅读需要一定的Linux基础。更多常见命令可参考：&lt;a class="link" href="https://wiki.deepin.org/zh/04_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98FAQ/600%E6%9D%A1Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93" target="_blank" rel="noopener"
>600条Linux命令总结&lt;/a>。&lt;/p>
&lt;p>&lt;strong>持续更新中&amp;hellip;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="ln">
&lt;a href="#ln" class="header-anchor">#&lt;/a>
ln
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>ln&lt;/code>命令在Linux系统中用于&lt;strong>创建文件链接&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>Linux中文件链接的方式有两种：
&lt;ul>
&lt;li>&lt;strong>符号链接&lt;/strong>（也称为软链接Symbolic Link）：包含了到原文件的路径信息，相当于一个指向原文件的&lt;strong>快捷方式&lt;/strong>。
&lt;ul>
&lt;li>符号链接有自己的文件属性及权限等。&lt;/li>
&lt;li>可对不存在的文件或目录创建符号链接。&lt;/li>
&lt;li>符号链接可交叉文件系统，即可以在不同的文件系统之间创建。&lt;/li>
&lt;li>删除符号链接并不影响被指向的文件，但若被指向的原文件被删除，则相关符号链接被称为死链接（dangling link）。若被指向的文件重新被创建，死链接可恢复为正常的符号链接。&lt;/li>
&lt;li>符号链接文件的大小是其指向的文件的路径字符串的字节数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>硬链接&lt;/strong>：硬链接本质上是给一个文件取一个新的名称，原文件和硬链接在物理上仍然是同一个文件。它们共享相同的inode（索引节点）和数据块。
&lt;ul>
&lt;li>创建硬链接会在对应的目录中增加额外的记录项以引用文件。&lt;/li>
&lt;li>原文件和硬链接文件对应于同一文件系统上的一个物理文件。&lt;/li>
&lt;li>创建硬链接时原文件的连接数（i_nlink）会递增。即&lt;strong>硬链接数&lt;/strong>递增。&lt;/li>
&lt;li>删除文件时，&lt;code>rm&lt;/code>命令会递减计数的链接数。文件要是存在，至少有一个链接数。当链接数为零时，该文件才会被真正删除。&lt;/li>
&lt;li>硬链接不能跨域驱动器或分区，也不支持对目录创建硬链接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>总结来说，符号链接（软链接）和硬链接的主要区别在于：
&lt;ul>
&lt;li>符号链接是一个独立的文件，它包含了到原文件的路径信息（&lt;strong>快捷方式&lt;/strong>）；而硬链接则与原文件共享相同的inode和数据块（&lt;strong>文件别名&lt;/strong>）。&lt;/li>
&lt;li>符号链接可以&lt;strong>跨文件系统&lt;/strong>，并且可以对不存在的文件或目录创建；而硬链接则&lt;strong>不能跨域驱动器或分区&lt;/strong>，&lt;strong>也不能对目录创建&lt;/strong>。&lt;/li>
&lt;li>删除符号链接不影响原文件，但删除原文件会使符号链接成为死链接；而删除硬链接文件时，只有当所有硬链接都被删除且原文件的链接数为零时，文件才会被真正删除。即硬链接数为0，文件才真正被删除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这个命令允许你在不同的位置为同一个文件或目录建立同步的链接，从而避免了在多个位置重复存储相同的文件内容，&lt;strong>节省了磁盘空间&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ln&lt;/code>命令的基本语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ln &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;源文件或目录&amp;gt; &amp;lt;链接文件或目录&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>常用选项包括：
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：创建符号链接（软链接）。这会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，而是保存了原始文件的路径。（创建快捷方式）
&lt;ul>
&lt;li>不使用&lt;code>-s&lt;/code>选项时创建硬链接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-f&lt;/code>：强制执行，如果链接文件已存在则覆盖。&lt;/li>
&lt;li>&lt;code>-v&lt;/code>：显示详细的输出信息。&lt;/li>
&lt;li>&lt;code>--help&lt;/code>：查看帮助文档。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>理解记忆：ln可以理解为link的缩写，s可以理解为soft软的意思。&lt;/li>
&lt;li>注意：源文件一般用绝对路径，相对会出现死链接情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>简单介绍一些&lt;code>ls -lh&lt;/code>输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:15 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># l显示详细信息，h文件大小用人类可读懂的方式显示。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw- r-- r--
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-开头表示文件，d表示目录，l表示链接，三位为一组用rwx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx r-x r-x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前用户权限 用户所属组权限 其他用户权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">数字1表示硬链接数，理解为别名，别名为0，文件才会被删除。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有多少种方式可以访问该文件或目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 文件一般为1：绝对路径
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 目录只有一层一般为2：绝对和cd .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2层为3：绝对、cd . 、cd ..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：拥有者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：所在组，没指定默认同名。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5月 &lt;span class="m">8&lt;/span> 22:49 文件最后修改日期时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">最后：文件或目录名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有箭头表示软连接，没有硬链接。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>演示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -sv ~/test/abc.txt ./demo/soft
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/soft’ -&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -v ~/test/abc.txt ./demo/hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/hard’ &lt;span class="o">=&lt;/span>&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">42&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ &lt;span class="nb">cd&lt;/span> demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost demo $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 soft -&amp;gt; /root/test/abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">2&lt;/span> root root &lt;span class="m">6&lt;/span> May &lt;span class="m">8&lt;/span> 23:15 &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost demo $
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：测试环境是在Linux中，&lt;code>ln&lt;/code>命令并不适用于windows环境。创建的文件链接无效。&lt;/p>
&lt;hr>
&lt;h2 id="curl">
&lt;a href="#curl" class="header-anchor">#&lt;/a>
curl
&lt;/h2>&lt;p>&lt;code>curl&lt;/code>命令是一个利用URL规则在命令行下工作的文件传输工具，它支持文件的上传和下载，因此被视为综合传输工具，但传统上习惯称其为下载工具。curl支持包括HTTP、HTTPS、FTP等众多协议，并具备多种特性，如POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等。这些特性使得curl在处理网页处理流程和数据检索自动化方面非常有用。&lt;/p>
&lt;p>总结：用于发送网络请求，可以下载和上传文件。而&lt;code>wget&lt;/code>只能用于下载文件，但&lt;a class="link" href="#wget" >wget&lt;/a>下载文件的功能比&lt;code>curl&lt;/code>强大。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>linux系统：根据你的Linux发行版，使用相应的包管理器来安装curl。
&lt;ul>
&lt;li>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install curl&lt;/code>&lt;/li>
&lt;li>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install curl&lt;/code>&lt;/li>
&lt;li>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S curl&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>windows系统：
&lt;ol>
&lt;li>&lt;a class="link" href="https://curl.se/download.html" target="_blank" rel="noopener"
>官网&lt;/a>下载对应版本，添加一个CURL_HOME环境变量名，指向的是curl.exe文件所在路径。并将其添加到path环境变量中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.mingw-w64.org/downloads/#mingw-builds" target="_blank" rel="noopener"
>Mingw&lt;/a>自带curl，Mingw也可以用msys2来安装。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>MacOS系统自带。&lt;/li>
&lt;/ol>
&lt;p>基本使用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>curl命令的基本语法格式为：&lt;code>curl [选项] URL&lt;/code>。其中，URL是要请求的目标地址，而选项则用于指定各种参数和功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-X&lt;/code> 或 &lt;code>--request&lt;/code>：用于指定HTTP请求方法，如GET、POST、PUT、DELETE等。&lt;/p>
&lt;ul>
&lt;li>默认发送get请求。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -X POST http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-H&lt;/code> 或 &lt;code>--header&lt;/code>: 添加自定义的 HTTP 头信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-d&lt;/code> 或 &lt;code>--data&lt;/code>: 发送 POST 请求时，将数据作为请求体发送。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s2">&amp;#34;param1=value1&amp;amp;param2=value2&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 JSON 数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s1">&amp;#39;{&amp;#34;key1&amp;#34;:&amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;value2&amp;#34;}&amp;#39;&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-F&lt;/code> 或 &lt;code>--form&lt;/code>: 用于发送 multipart/form-data 格式的数据，通常用于文件上传。&lt;/p>
&lt;ul>
&lt;li>参数&lt;code>&amp;quot;文件名=@path&amp;quot;&lt;/code>,还可以指定类型&lt;code>&amp;quot;文件名=@path;type=MIME&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -F &lt;span class="s2">&amp;#34;file=@filename.txt&amp;#34;&lt;/span> http://example.com/upload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-o&lt;/code> 或 &lt;code>--output&lt;/code>: 将响应输出到文件，而不是显示在终端上。默认当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -o output.html http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>-O&lt;/code>: 将响应保存到本地文件，文件名与远程文件的文件名相同。在当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -O http://example.com/file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-s&lt;/code> 或 &lt;code>--silent&lt;/code>: 静默模式，不显示进度或错误消息。常用S组合使用，显示错误消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v&lt;/code> 或 &lt;code>--verbose&lt;/code>: 详细模式，显示详细的通信过程，包括请求头和响应头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i&lt;/code>: 显示响应头信息以及返回的内容 body。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-I&lt;/code>: 只显示响应头信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u&lt;/code> 用户名:密码: 指定用户名和密码进行身份验证。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -u username:password http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-L&lt;/code>: 跟随重定向。当 HTTP 响应是一个重定向时，curl 会自动获取重定向后的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-k&lt;/code> 或 &lt;code>--insecure&lt;/code>: 允许连接到不安全的 SSL 站点，即忽略 SSL 证书验证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>常用组合：&lt;code>curl -fsSL&lt;/code>，默认get请求。&lt;/p>
&lt;ul>
&lt;li>f不显示客户端错误。&lt;/li>
&lt;li>s不显示进度、错误消息。配合S显示错误消息&lt;/li>
&lt;li>L接受重定向。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="wget">
&lt;a href="#wget" class="header-anchor">#&lt;/a>
wget
&lt;/h2>&lt;p>&lt;code>wget&lt;/code> 是一个在 Unix 和 Linux 系统上常用的命令行工具，用于从网络上下载文件。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>支持断点续传：如果下载过程中连接中断，可以在之后从断点处继续下载。&lt;/li>
&lt;li>支持递归下载：可以下载网页上的所有链接文件，并重建目录结构。&lt;/li>
&lt;li>强大的重试机制：在下载过程中如果网络出现问题，&lt;code>wget&lt;/code> 会自动重试，直到下载完成。&lt;/li>
&lt;li>后台执行：支持在后台运行下载任务，用户无需保持登录状态。&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="#curl" >curl&lt;/a>没有以上优点，但它支持更多的协议。wget只支持HTTP、HTTPS和FTP协议。curl使用更广泛。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>linux系统：根据你的Linux发行版，使用相应的包管理器来安装wget。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S wget&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>windows系统：&lt;/p>
&lt;ul>
&lt;li>官网&lt;a class="link" href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener"
>GNU Wget&lt;/a>下载安装或其他可靠的软件下载，然后路径添加到环境变量path中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>macos系统：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于macOS，使用&lt;a class="link" href="https://github.com/Homebrew/brew" target="_blank" rel="noopener"
>Homebrew&lt;/a>包管理器来安装wget。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">brew&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="nx">wget&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>基本使用：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>-b, &amp;ndash;background&lt;/strong>：在后台执行下载任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-c, &amp;ndash;continue&lt;/strong>：继续下载之前未完成的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-r, &amp;ndash;recursive&lt;/strong>：递归下载，下载指定 URL 中的所有链接。可以下载整个目录及其子目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -r http://www.example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：在使用递归下载时，建议加上 &lt;code>-np&lt;/code> 和 &lt;code>-nH&lt;/code> 选项，以避免下载过多的不必要文件和创建复杂的目录结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-np, &amp;ndash;no-parent&lt;/strong>：不递归下载上级目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nH, &amp;ndash;no-host-directories&lt;/strong>：不创建主机目录，将文件保存在当前目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-P DIRECTORY, &amp;ndash;directory-prefix=DIRECTORY&lt;/strong>：将下载的文件保存到指定的目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -P /tmp http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-O FILE, &amp;ndash;output-document=FILE&lt;/strong>：将下载的文件保存为指定的文件名。如果存在会覆盖。&lt;code>-N&lt;/code>（时间戳检查），如果旧会覆盖，反之不会。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -O new_file.zip http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nc, &amp;ndash;no-clobber&lt;/strong>：如果文件已经存在，不覆盖原有文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nv, &amp;ndash;no-verbose&lt;/strong>：下载时只显示更新和出错信息，不显示详细的执行过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-v, &amp;ndash;verbose&lt;/strong>：详细模式，增加输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-q, &amp;ndash;quiet&lt;/strong>：静默模式，减少输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;no-check-certificate&lt;/strong>：下载 HTTPS 网站资源时，跳过证书检测过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-t NUM 或 &amp;ndash;tries=NUM&lt;/strong>：指定最大尝试次数。如果下载失败，wget 会尝试重新下载指定的次数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-U AGENT 或 &amp;ndash;user-agent=AGENT&lt;/strong>：指定 User-Agent 字符串。这可以用来伪装为不同的浏览器或客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-N 或 &amp;ndash;timestamping&lt;/strong>：如果本地文件存在且时间戳较新，则不重新下载文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-T SEC 或 &amp;ndash;timeout=SEC&lt;/strong>：指定超时时间（以秒为单位）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-A TYPES 或 &amp;ndash;accept=TYPES&lt;/strong>：指定下载文件的类型。例如，&lt;code>-A jpg,png,gif&lt;/code> 表示只下载 jpg、png 和 gif 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-d 或 &amp;ndash;debug&lt;/strong>：打印调试输出。这会在标准错误上输出大量信息，通常用于诊断问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>常用组合：&lt;/p>
&lt;p>&lt;code>wget -O-&lt;/code>:O表示指定文件名，后面-表示没有指定文件名，内容将输出到TTY。&lt;/p>
&lt;p>通常配合&lt;code>bash -c &amp;quot;$(wget -O- url)&amp;quot;&lt;/code>运行脚本。url为脚本地址。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>其中$()表示在当前TTY中运行子命令，下载脚本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[bash -c](#bash -c)表示将下载的字符串做为命令执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="bash--c">
&lt;a href="#bash--c" class="header-anchor">#&lt;/a>
bash -c
&lt;/h3>&lt;p>&lt;code>bash -c&lt;/code> 命令用于在 Bash shell 中执行一个字符串作为命令。&lt;/p>
&lt;p>基本语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">bash -c &lt;span class="s1">&amp;#39;command_string&amp;#39;&lt;/span> &lt;span class="o">[&lt;/span>arg0 &lt;span class="o">[&lt;/span>arg1 ...&lt;span class="o">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>command_string&lt;/code> 是你想要执行的命令字符串。&lt;/li>
&lt;li>&lt;code>arg0&lt;/code>、&lt;code>arg1&lt;/code> 等是可选的，它们会被用作 &lt;code>$0&lt;/code>、&lt;code>$1&lt;/code>、&lt;code>$2&lt;/code> 等 shell 变量在 &lt;code>command_string&lt;/code> 内部。
&lt;ul>
&lt;li>注意这里的$0并不是脚本名或终端名，而是第一个参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>字符串可以用&lt;code>&amp;quot;&amp;quot;/''&lt;/code>，区别在于双引号会转义特殊字符，单引号不会。执行脚本时建议双引号。&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo Hello, World!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello, World!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo $0 $1&amp;#39;&lt;/span> bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bash -c &amp;#34;$(wget -O- https://gist.githubusercontent.com/lss233/2fdd75be3f0724739368d0dcd9d1367d/raw/62a790da4a391af096074b3355c2c2b7ecab3c28/chatgpt-mirai-installer-gocqhttp.sh)&amp;#34; chatgpt-qq-bot安装脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr></description></item></channel></rss>