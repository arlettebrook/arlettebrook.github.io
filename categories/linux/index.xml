<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Arlettebrook's blog</title><link>https://arlettebrook.github.io/categories/linux/</link><description>Recent content in Linux on Arlettebrook's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Arlettebrook</copyright><lastBuildDate>Fri, 16 Aug 2024 19:24:26 +0800</lastBuildDate><atom:link href="https://arlettebrook.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>SSH Introduction</title><link>https://arlettebrook.github.io/p/ssh-introduction/</link><pubDate>Sat, 03 Aug 2024 23:59:44 +0800</pubDate><guid>https://arlettebrook.github.io/p/ssh-introduction/</guid><description>&lt;hr>
&lt;h2 id="ssh-介绍">SSH 介绍
&lt;/h2>&lt;p>SSH（Secure Shell 的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。&lt;/p>
&lt;p>实际中，它主要用于保证远程登录和远程通信的安全，任何网络服务都可以用这个协议来加密。&lt;/p>
&lt;h3 id="ssh-是什么">SSH 是什么
&lt;/h3>&lt;p>历史上，网络主机之间的通信是不加密的，属于明文通信。这使得通信很不安全，一个典型的例子就是服务器登录。登录远程服务器的时候，需要将用户输入的密码传给服务器，如果这个过程是明文通信，就意味着传递过程中，线路经过的中间计算机都能看到密码，这是很可怕的。&lt;/p>
&lt;p>SSH 就是为了解决这个问题而诞生的，它能够加密计算机之间的通信，保证不被窃听或篡改。它还能对操作者进行认证（authentication）和授权（authorization）。明文的网络协议可以套用在它里面，从而实现加密。&lt;/p>
&lt;h3 id="历史">历史
&lt;/h3>&lt;p>1995年，芬兰赫尔辛基工业大学的研究员 Tatu Ylönen 设计了 SSH 协议的第一个版本（现称为 SSH 1），同时写出了第一个实现（称为 SSH1）。&lt;/p>
&lt;p>当时，他所在的大学网络一直发生密码嗅探攻击，他不得不为服务器设计一个更安全的登录方式。写完以后，他就把这个工具公开了，允许其他人免费使用。&lt;/p>
&lt;p>SSH 可以替换 rlogin、TELNET、FTP 和 rsh 这些不安全的协议，所以大受欢迎，用户快速增长，1995年底已经发展到五十个国家的20,000个用户。SSH 1 协议也变成 IETF 的标准文档。&lt;/p>
&lt;p>1995年12月，由于客服需求越来越大，Tatu Ylönen 就成立了一家公司 SCS，专门销售和开发 SSH。这个软件的后续版本，逐渐从免费软件变成了专有的商业软件。&lt;/p>
&lt;p>SSH 1 协议存在一些安全漏洞，所以1996年又提出了 SSH 2 协议（或者称为 SSH 2.0）。这个协议与1.0版不兼容，在1997年进行了标准化，1998年推出了软件实现 SSH2。但是，官方的 SSH2 软件是一个专有软件，不能免费使用，而且 SSH1 的有些功能也没有提供。&lt;/p>
&lt;p>1999年，OpenBSD 的开发人员决定写一个 SSH 2 协议的开源实现，这就是 OpenSSH 项目。该项目最初是基于 SSH 1.2.12 版本，那是当时 SSH1 最后一个开源版本。但是，OpenSSH 很快就完全摆脱了原始的官方代码，在许多开发者的参与下，按照自己的路线发展。OpenSSH 随 OpenBSD 2.6 版本一起提供，以后又移植到其他操作系统，成为最流行的 SSH 实现。目前，Linux 的所有发行版几乎都自带 OpenSSH。&lt;/p>
&lt;p>现在，SSH-2 有多种实现，既有免费的，也有收费的。本书的内容主要是针对 OpenSSH。&lt;/p>
&lt;h3 id="ssh-架构">SSH 架构
&lt;/h3>&lt;p>SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 &lt;strong>ssh&lt;/strong>；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 &lt;strong>sshd&lt;/strong>。&lt;/p>
&lt;p>本教程约定，大写的 SSH 表示协议，小写的 ssh 表示客户端软件。&lt;/p>
&lt;p>另外，OpenSSH 还提供一些辅助工具软件（比如 ssh-keygen 、ssh-agent）和专门的客户端工具（比如 scp 和 sftp），这个教程也会予以介绍。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-客户端">SSH 客户端
&lt;/h2>&lt;h3 id="简介">简介
&lt;/h3>&lt;p>OpenSSH 的&lt;strong>客户端&lt;/strong>是&lt;strong>二进制程序 ssh&lt;/strong>。它在 Linux/Unix 系统的位置是&lt;code>/usr/local/bin/ssh&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在Linux上安装SSH客户端:&lt;/p>
&lt;p>在大多数Linux发行版中，OpenSSH客户端通常&lt;strong>默认已安装&lt;/strong>。如果没有安装，可以通过包管理器来安装。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ubuntu 和 Debian&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install openssh-client
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS 和 RHEL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo yum install openssh-clients
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install openssh-clients
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在macOS上安装SSH客户端:&lt;/p>
&lt;p>macOS预装了OpenSSH客户端，因此不需要额外安装。可以直接在终端使用&lt;code>ssh&lt;/code>命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在Windows上安装SSH客户端:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>从Windows 10版本1709开始，系统已经内置了OpenSSH客户端。可以通过以下步骤启用：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>打开设置&lt;/strong> &amp;gt; &lt;strong>应用&lt;/strong> &amp;gt; &lt;strong>可选功能&lt;/strong>(没有：搜索添加可选可能）。&lt;/li>
&lt;li>向下滚动并找到“OpenSSH Client”，如果未安装，点击&lt;strong>添加功能&lt;/strong>按钮。&lt;/li>
&lt;li>在列表中找到“OpenSSH Client”，然后点击&lt;strong>安装&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;p>之后，可以在命令提示符（cmd）或PowerShell中使用&lt;code>ssh&lt;/code>命令。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>或者使用封装了ssh客户端的工具：&lt;/p>
&lt;ul>
&lt;li>如Termius、FinalShell、WindTerm等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>安装以后，可以使用&lt;code>-V&lt;/code>参数输出版本号，查看一下是否安装成功。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -V
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="基本用法">基本用法
&lt;/h3>&lt;p>ssh 最常见的用途就是&lt;strong>登录服务器&lt;/strong>，这要求服务器安装并&lt;strong>正在运行 SSH 服务器软件&lt;/strong>(sshd)。&lt;/p>
&lt;p>ssh 登录服务器的命令如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>hostname&lt;/code>是主机名，它可以是域名，也可能是 IP 地址或局域网内部的主机名。不指定用户名的情况下，将使用客户端的当前用户名，作为远程服务器的登录用户名。如果要指定用户名，可以采用下面的语法:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh username@hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令中，用户名和主机名写在一起了，之间使用&lt;code>@&lt;/code>分隔。&lt;/p>
&lt;p>用户名也可以使用&lt;code>ssh&lt;/code>的&lt;code>-l&lt;/code>参数指定，这样的话，用户名和主机名就不用写在一起了:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -l username hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ssh 默认连接服务器的22端口，&lt;code>-p&lt;/code>参数可以指定其他端口:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -p &lt;span class="m">8821&lt;/span> foo.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令连接服务器&lt;code>foo.com&lt;/code>的8821端口，用户名为当前客户端主机登录的用户名。&lt;/p>
&lt;h3 id="连接流程">连接流程
&lt;/h3>&lt;p>ssh 连接远程服务器后，首先有一个&lt;strong>验证过程&lt;/strong>，&lt;strong>验证远程服务器是否为陌生地址&lt;/strong>。&lt;/p>
&lt;p>如果是第一次连接某一台服务器，命令行会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">The authenticity of host &lt;span class="s1">&amp;#39;foo.com (192.168.121.111)&amp;#39;&lt;/span> can&lt;span class="err">&amp;#39;&lt;/span>t be established.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Are you sure you want to &lt;span class="k">continue&lt;/span> connecting &lt;span class="o">(&lt;/span>yes/no&lt;span class="o">)&lt;/span>?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面这段文字告诉用户，&lt;code>foo.com&lt;/code>这台服务器的指纹是陌生的，让用户选择是否要继续连接（输入 yes 或 no）。&lt;/p>
&lt;p>所谓“服务器指纹”，指的是 SSH 服务器公钥的哈希值。每台 SSH 服务器都有唯一一对密钥，用于跟客户端通信，其中公钥的哈希值就可以用来识别服务器。&lt;/p>
&lt;p>在上面这段文字后面，输入&lt;code>yes&lt;/code>，就可以将当前服务器的指纹也储存在本机&lt;code>~/.ssh/known_hosts&lt;/code>文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Warning: Permanently added &lt;span class="s1">&amp;#39;foo.com (192.168.121.111)&amp;#39;&lt;/span> &lt;span class="o">(&lt;/span>RSA&lt;span class="o">)&lt;/span> to the list of known hosts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，客户端就会跟服务器建立连接。接着，ssh 就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。&lt;/p>
&lt;p>下面的命令可以查看某个公钥的指纹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">256&lt;/span> da:24:43:0b:2e:c1:3f:a1:84:13:92:01:52:b4:84:ff &lt;span class="o">(&lt;/span>ECDSA&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中，&lt;code>ssh-keygen -l -f&lt;/code>命令会输出公钥&lt;code>/etc/ssh/ssh_host_ecdsa_key.pub&lt;/code>的指纹。&lt;/p>
&lt;p>ssh 会将本机连接过的所有服务器公钥的指纹，都储存在本机的&lt;code>~/.ssh/known_hosts&lt;/code>文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。&lt;/p>
&lt;h3 id="加密参数">加密参数
&lt;/h3>&lt;p>SSH 连接的握手阶段，客户端必须跟服务端约定加密参数集（cipher suite）。&lt;/p>
&lt;p>加密参数集包含了若干不同的加密参数，它们之间使用下划线连接在一起，下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">TLS_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>它的含义如下：&lt;/p>
&lt;ul>
&lt;li>TLS：加密通信协议&lt;/li>
&lt;li>RSA：密钥交换算法&lt;/li>
&lt;li>AES：加密算法&lt;/li>
&lt;li>128：加密算法的强度&lt;/li>
&lt;li>CBC：加密算法的模式&lt;/li>
&lt;li>SHA：数字签名的 Hash 函数&lt;/li>
&lt;/ul>
&lt;p>下面是一个例子，客户端向服务器发出的握手信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">Handshake protocol: ClientHello
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Version: TLS 1.2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Client time: May 22, 2030 02:43:46 GMT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random bytes: b76b0e61829557eb4c611adfd2d36eb232dc1332fe29802e321ee871
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Session ID: (empty)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Cipher Suites
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_AES_128_GCM_SHA256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_AES_128_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Suite: TLS_RSA_WITH_RC4_128_SHA
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Compression methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Method: null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extensions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: server_name
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Hostname: www.feistyduck.com
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: renegotiation_info
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: elliptic_curves
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Named curve: secp256r1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Named curve: secp384r1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: signature_algorithms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha1/rsa
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha256/rsa
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha1/ecdsa
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Algorithm: sha256/ecdsa”
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的握手信息（ClientHello）之中，&lt;code>Cipher Suites&lt;/code>字段就是客户端列出可选的加密参数集，服务器在其中选择一个自己支持的&lt;strong>参数集&lt;/strong>。&lt;/p>
&lt;p>服务器选择完毕之后，向客户端发出回应：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">Handshake protocol: ServerHello
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Version: TLS 1.2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Server time: Mar 10, 2059 02:35:57 GMT”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Random bytes: 8469b09b480c1978182ce1b59290487609f41132312ca22aacaf5012
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Session ID: 4cae75c91cf5adf55f93c9fb5dd36d19903b1182029af3d527b7a42ef1c32c80
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Compression method: null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extensions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: server_name
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> Extension: renegotiation_info”
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的回应信息（ServerHello）中，&lt;code>Cipher Suite&lt;/code>字段就是服务器最终选定的加密参数。&lt;/p>
&lt;h3 id="服务器密钥变更">服务器密钥变更
&lt;/h3>&lt;p>服务器指纹可以防止有人恶意冒充远程主机。如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时，客户端就会中断连接，并显示一段警告信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Someone could be eavesdropping on you right now &lt;span class="o">(&lt;/span>man-in-the-middle attack&lt;span class="o">)&lt;/span>!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">It is also possible that the RSA host key has just been changed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The fingerprint &lt;span class="k">for&lt;/span> the RSA key sent by the remote host is
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">77:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Please contact your system administrator.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Add correct host key in /home/me/.ssh/known_hosts to get rid of this message.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Offending key in /home/me/.ssh/known_hosts:36
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面这段文字的意思是，该主机的公钥指纹跟&lt;code>~/.ssh/known_hosts&lt;/code>文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因，使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。&lt;/p>
&lt;p>如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从&lt;code>~/.ssh/known_hosts&lt;/code>文件删除。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -R hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>hostname&lt;/code>是发生公钥变更的主机名。&lt;/p>
&lt;p>除了使用上面的命令，你也可以手工修改&lt;code>known_hosts&lt;/code>文件，将公钥指纹删除。&lt;/p>
&lt;p>删除了原来的公钥指纹以后，重新执行 ssh 命令连接远程服务器，将新的指纹加入&lt;code>known_hosts&lt;/code>文件，就可以顺利连接了。&lt;/p>
&lt;h3 id="ssh-命令行配置项">ssh 命令行配置项
&lt;/h3>&lt;p>&lt;strong>-c&lt;/strong>&lt;/p>
&lt;p>&lt;code>-c&lt;/code>参数指定加密算法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -c blowfish,3des server.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -c blowfish -c 3des server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定使用加密算法&lt;code>blowfish&lt;/code>或&lt;code>3des&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-C&lt;/strong>&lt;/p>
&lt;p>&lt;code>-C&lt;/code>参数表示压缩数据传输。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -C server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-D&lt;/strong>&lt;/p>
&lt;p>&lt;code>-D&lt;/code>参数指定本机的 Socks 监听端口，该端口收到的请求，都将转发到远程的 SSH 主机，又称动态端口转发，详见《端口转发》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -D &lt;span class="m">1080&lt;/span> server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将本机 1080 端口收到的请求，都转发到服务器&lt;code>server&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-f&lt;/strong>&lt;/p>
&lt;p>&lt;code>-f&lt;/code>参数表示 SSH 连接在后台运行。&lt;/p>
&lt;p>&lt;strong>-F&lt;/strong>&lt;/p>
&lt;p>&lt;code>-F&lt;/code>参数指定配置文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -F /usr/local/ssh/other_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定使用配置文件&lt;code>other_config&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-i&lt;/strong>&lt;/p>
&lt;p>&lt;code>-i&lt;/code>参数用于指定私钥，意为“identity_file”，默认值为&lt;code>~/.ssh/id_dsa&lt;/code>（DSA 算法）和&lt;code>~/.ssh/id_rsa&lt;/code>（RSA 算法）。注意，对应的公钥必须存放到服务器，详见《密钥登录》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -i my-key server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-l&lt;/strong>&lt;/p>
&lt;p>&lt;code>-l&lt;/code>参数指定远程登录的账户名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -l sally server.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh sally@server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-L&lt;/strong>&lt;/p>
&lt;p>&lt;code>-L&lt;/code>参数设置本地端口转发，详见《端口转发》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 9999:targetServer:80 user@remoteserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，所有发向本地&lt;code>9999&lt;/code>端口的请求，都会经过&lt;code>remoteserver&lt;/code>发往 targetServer 的 80 端口，这就相当于直接连上了 targetServer 的 80 端口。&lt;/p>
&lt;p>&lt;strong>-m&lt;/strong>&lt;/p>
&lt;p>&lt;code>-m&lt;/code>参数指定校验数据完整性的算法（message authentication code，简称 MAC）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -m hmac-sha1,hmac-md5 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定数据校验算法为&lt;code>hmac-sha1&lt;/code>或&lt;code>hmac-md5&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-N&lt;/strong>&lt;/p>
&lt;p>&lt;code>-N&lt;/code>参数用于端口转发，表示建立的 SSH 只用于端口转发，不能执行远程命令，这样可以提供安全性，详见《端口转发》一章。&lt;/p>
&lt;p>&lt;strong>-o&lt;/strong>&lt;/p>
&lt;p>&lt;code>-o&lt;/code>参数用来指定一个配置命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -o &lt;span class="s2">&amp;#34;Keyword Value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>举例来说，配置文件里面有如下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">User sally
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">220&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>-o&lt;/code>参数，可以把上面两个配置命令从命令行传入。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -o &lt;span class="s2">&amp;#34;User sally&amp;#34;&lt;/span> -o &lt;span class="s2">&amp;#34;Port 220&amp;#34;&lt;/span> server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用等号时，配置命令可以不用写在引号里面，但是等号前后不能有空格。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -o &lt;span class="nv">User&lt;/span>&lt;span class="o">=&lt;/span>sally -o &lt;span class="nv">Port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">220&lt;/span> server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-p&lt;/strong>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数指定 SSH 客户端连接的服务器端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -p &lt;span class="m">2035&lt;/span> server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令连接服务器的2035端口。&lt;/p>
&lt;p>&lt;strong>-q&lt;/strong>&lt;/p>
&lt;p>&lt;code>-q&lt;/code>参数表示安静模式（quiet），不向用户输出任何警告信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh –q foo.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root’s password:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令使用&lt;code>-q&lt;/code>参数，只输出要求用户输入密码的提示。&lt;/p>
&lt;p>&lt;strong>-R&lt;/strong>&lt;/p>
&lt;p>&lt;code>-R&lt;/code>参数指定远程端口转发，详见《端口转发》一章。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R 9999:targetServer:902 &lt;span class="nb">local&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令需在跳板服务器执行，指定本地计算机&lt;code>local&lt;/code>监听自己的 9999 端口，所有发向这个端口的请求，都会转向 targetServer 的 902 端口。&lt;/p>
&lt;p>&lt;strong>-t&lt;/strong>&lt;/p>
&lt;p>&lt;code>-t&lt;/code>参数在 ssh 直接运行远端命令时，提供一个互动式 Shell。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -t server.example.com emacs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-v&lt;/strong>&lt;/p>
&lt;p>&lt;code>-v&lt;/code>参数显示详细信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -v server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-v&lt;/code>可以重复多次，表示信息的详细程度，比如&lt;code>-vv&lt;/code>和&lt;code>-vvv&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -vvv server.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -v -v -v server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会输出最详细的连接信息。&lt;/p>
&lt;p>&lt;strong>-V&lt;/strong>&lt;/p>
&lt;p>&lt;code>-V&lt;/code>参数输出 ssh 客户端的版本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh –V
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh: SSH Secure Shell 3.2.3 &lt;span class="o">(&lt;/span>non-commercial version&lt;span class="o">)&lt;/span> on i686-pc-linux-gnu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令输出本机 ssh 客户端版本是&lt;code>SSH Secure Shell 3.2.3&lt;/code>。&lt;/p>
&lt;p>&lt;strong>-X&lt;/strong>&lt;/p>
&lt;p>&lt;code>-X&lt;/code>参数表示打开 X 窗口转发。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -X server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-1，-2&lt;/strong>&lt;/p>
&lt;p>&lt;code>-1&lt;/code>参数指定使用 SSH 1 协议。&lt;/p>
&lt;p>&lt;code>-2&lt;/code>参数指定使用 SSH 2 协议。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ssh -2 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>-4，-6&lt;/strong>&lt;/p>
&lt;p>&lt;code>-4&lt;/code>指定使用 IPv4 协议，这是默认值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -4 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-6&lt;/code>指定使用 IPv6 协议。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -6 server.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="执行远程命令">执行远程命令
&lt;/h3>&lt;p>SSH 登录成功后，用户就进入了远程主机的命令行环境，所看到的提示符，就是远程主机的提示符。这时，你就可以输入想要在远程主机执行的命令。&lt;/p>
&lt;p>另一种&lt;strong>执行远程命令的方法&lt;/strong>，是将命令直接写在&lt;code>ssh&lt;/code>命令的后面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh username@hostname &lt;span class="nb">command&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会使得 SSH 在&lt;strong>登录成功后&lt;/strong>，立刻在远程主机上执行命令&lt;code>command&lt;/code>。命令执行完成之后会自动退出连接。&lt;/p>
&lt;p>&lt;strong>多行命令用引号或双引号括起来&lt;/strong>。&lt;/p>
&lt;p>下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh foo@server.example.com cat /etc/hosts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会在登录成功后，立即远程执行命令&lt;code>cat /etc/hosts&lt;/code>。&lt;/p>
&lt;p>采用这种语法执行命令时，ssh 客户端不会提供互动式的 Shell 环境，而是直接将远程命令的执行结果输出在命令行。但是，有些命令需要互动式的 Shell 环境，这时就要使用&lt;code>-t&lt;/code>参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 报错&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh remote.server.com emacs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">emacs: standard input is not a tty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 不报错&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -t server.example.com emacs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>emacs&lt;/code>命令需要一个互动式 Shell，所以报错。只有加上&lt;code>-t&lt;/code>参数，ssh 才会分配一个互动式 Shell。&lt;/p>
&lt;p>不是交互式命令，使用&lt;code>-t&lt;/code>参数之后，&lt;strong>也会立即退出连接&lt;/strong>。交互命令需要主动退出。&lt;/p>
&lt;h3 id="客户端配置文件">客户端配置文件
&lt;/h3>&lt;h4 id="位置">位置
&lt;/h4>&lt;p>SSH 客户端的全局配置文件是&lt;code>/etc/ssh/ssh_config&lt;/code>，用户个人的配置文件在&lt;code>~/.ssh/config&lt;/code>，优先级高于全局配置文件。&lt;/p>
&lt;p>除了配置文件，&lt;code>~/.ssh&lt;/code>目录还有一些用户个人的密钥文件和其他文件。下面是其中一些常见的文件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/.ssh/id_ecdsa&lt;/code>：用户的 ECDSA 私钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/id_ecdsa.pub&lt;/code>：用户的 ECDSA 公钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/id_rsa&lt;/code>：用于 SSH 协议版本2 的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/id_rsa.pub&lt;/code>：用于SSH 协议版本2 的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/identity&lt;/code>：用于 SSH 协议版本1 的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/identity.pub&lt;/code>：用于 SSH 协议版本1 的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>~/.ssh/known_hosts&lt;/code>：包含 SSH 服务器的公钥指纹。&lt;/li>
&lt;/ul>
&lt;h4 id="主机设置">主机设置
&lt;/h4>&lt;p>用户个人的配置文件&lt;code>~/.ssh/config&lt;/code>，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。&lt;/p>
&lt;p>下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Host *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">2222&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host remoteserver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName remote.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User neo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port &lt;span class="m">2112&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>Host *&lt;/code>表示对所有主机生效，后面的&lt;code>Port 2222&lt;/code>表示所有主机的默认连接端口都是2222，这样就不用在登录时特别指定端口了。这里的缩进并不是必需的，只是为了视觉上，易于识别针对不同主机的设置。&lt;/p>
&lt;p>后面的&lt;code>Host remoteserver&lt;/code>表示，下面的设置只对主机&lt;code>remoteserver&lt;/code>生效。&lt;code>remoteserver&lt;/code>只是一个别名，具体的主机由&lt;code>HostName&lt;/code>命令指定，&lt;code>User&lt;/code>和&lt;code>Port&lt;/code>这两项分别表示用户名和端口。这里的&lt;code>Port&lt;/code>会覆盖上面&lt;code>Host *&lt;/code>部分的&lt;code>Port&lt;/code>设置。&lt;/p>
&lt;p>以后，登录&lt;code>remote.example.com&lt;/code>时，只要执行&lt;code>ssh remoteserver&lt;/code>命令，就会自动套用 config 文件里面指定的参数。
单个主机的配置格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh remoteserver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -p &lt;span class="m">2112&lt;/span> neo@remote.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Host&lt;/code>命令的值可以使用通配符，比如&lt;code>Host *&lt;/code>表示对所有主机都有效的设置，&lt;code>Host *.edu&lt;/code>表示只对一级域名为&lt;code>.edu&lt;/code>的主机有效的设置。它们的设置都可以被单个主机的设置覆盖。&lt;/p>
&lt;h4 id="配置命令的语法">配置命令的语法
&lt;/h4>&lt;p>ssh 客户端配置文件的每一行，就是一个配置命令。配置命令与对应的值之间，可以使用空格，也可以使用等号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Compression yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Compression&lt;/span> &lt;span class="o">=&lt;/span> yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>#&lt;/code>开头的行表示注释，会被忽略。空行等同于注释。&lt;/p>
&lt;h4 id="主要配置命令">主要配置命令
&lt;/h4>&lt;p>下面是 ssh 客户端的一些主要配置命令，以及它们的范例值。&lt;/p>
&lt;ul>
&lt;li>&lt;code>AddressFamily inet&lt;/code>：表示只使用 IPv4 协议。如果设为&lt;code>inet6&lt;/code>，表示只使用 IPv6 协议。&lt;/li>
&lt;li>&lt;code>BindAddress 192.168.10.235&lt;/code>：指定本机的 IP 地址（如果本机有多个 IP 地址）。&lt;/li>
&lt;li>&lt;code>CheckHostIP yes&lt;/code>：检查 SSH 服务器的 IP 地址是否跟公钥数据库吻合。&lt;/li>
&lt;li>&lt;code>Ciphers blowfish,3des&lt;/code>：指定加密算法。&lt;/li>
&lt;li>&lt;code>Compression yes&lt;/code>：是否压缩传输信号。&lt;/li>
&lt;li>&lt;code>ConnectionAttempts 10&lt;/code>：客户端进行连接时，最大的尝试次数。&lt;/li>
&lt;li>&lt;code>ConnectTimeout 60&lt;/code>：客户端进行连接时，服务器在指定秒数内没有回复，则中断连接尝试。&lt;/li>
&lt;li>&lt;code>DynamicForward 1080&lt;/code>：指定动态转发端口。&lt;/li>
&lt;li>&lt;code>GlobalKnownHostsFile /users/smith/.ssh/my_global_hosts_file&lt;/code>：指定全局的公钥数据库文件的位置。&lt;/li>
&lt;li>&lt;code>Host server.example.com&lt;/code>：指定连接的域名或 IP 地址，也可以是别名，支持通配符。&lt;code>Host&lt;/code>命令后面的所有配置，都是针对该主机的，直到下一个&lt;code>Host&lt;/code>命令为止。&lt;/li>
&lt;li>&lt;code>HostKeyAlgorithms ssh-dss,ssh-rsa&lt;/code>：指定密钥算法，优先级从高到低排列。&lt;/li>
&lt;li>&lt;code>HostName myserver.example.com&lt;/code>：在&lt;code>Host&lt;/code>命令使用别名的情况下，&lt;code>HostName&lt;/code>指定域名或 IP 地址。&lt;/li>
&lt;li>&lt;code>IdentityFile keyfile&lt;/code>：指定私钥文件。&lt;/li>
&lt;li>&lt;code>LocalForward 2001 localhost:143&lt;/code>：指定本地端口转发。&lt;/li>
&lt;li>&lt;code>LogLevel QUIET&lt;/code>：指定日志详细程度。如果设为&lt;code>QUIET&lt;/code>，将不输出大部分的警告和提示。&lt;/li>
&lt;li>&lt;code>MACs hmac-sha1,hmac-md5&lt;/code>：指定数据校验算法。&lt;/li>
&lt;li>&lt;code>NumberOfPasswordPrompts 2&lt;/code>：密码登录时，用户输错密码的最大尝试次数。&lt;/li>
&lt;li>&lt;code>PasswordAuthentication no&lt;/code>：指定是否支持密码登录。不过，这里只是客户端禁止，真正的禁止需要在 SSH 服务器设置。&lt;/li>
&lt;li>&lt;code>Port 2035&lt;/code>：指定客户端连接的 SSH 服务器端口。&lt;/li>
&lt;li>&lt;code>PreferredAuthentications publickey,hostbased,password&lt;/code>：指定各种登录方法的优先级。&lt;/li>
&lt;li>&lt;code>Protocol 2&lt;/code>：支持的 SSH 协议版本，多个版本之间使用逗号分隔。&lt;/li>
&lt;li>&lt;code>PubKeyAuthentication yes&lt;/code>：是否支持密钥登录。这里只是客户端设置，还需要在 SSH 服务器进行相应设置。&lt;/li>
&lt;li>&lt;code>RemoteForward 2001 server:143&lt;/code>：指定远程端口转发。&lt;/li>
&lt;li>&lt;code>SendEnv COLOR&lt;/code>：SSH 客户端向服务器发送的环境变量名，多个环境变量之间使用空格分隔。环境变量的值从客户端当前环境中拷贝。&lt;/li>
&lt;li>&lt;code>ServerAliveCountMax 3&lt;/code>：如果没有收到服务器的回应，客户端连续发送多少次&lt;code>keepalive&lt;/code>信号，才断开连接。该项默认值为3。&lt;/li>
&lt;li>&lt;code>ServerAliveInterval 300&lt;/code>：客户端建立连接后，如果在给定秒数内，没有收到服务器发来的消息，客户端向服务器发送&lt;code>keepalive&lt;/code>消息。如果不希望客户端发送，这一项设为&lt;code>0&lt;/code>。&lt;/li>
&lt;li>&lt;code>StrictHostKeyChecking yes&lt;/code>：&lt;code>yes&lt;/code>表示严格检查，服务器公钥为未知或发生变化，则拒绝连接。&lt;code>no&lt;/code>表示如果服务器公钥未知，则加入客户端公钥数据库，如果公钥发生变化，不改变客户端公钥数据库，输出一条警告，依然允许连接继续进行。&lt;code>ask&lt;/code>（默认值）表示询问用户是否继续进行。&lt;/li>
&lt;li>&lt;code>TCPKeepAlive yes&lt;/code>：客户端是否定期向服务器发送&lt;code>keepalive&lt;/code>信息。&lt;/li>
&lt;li>&lt;code>User userName&lt;/code>：指定远程登录的账户名。&lt;/li>
&lt;li>&lt;code>UserKnownHostsFile /users/smith/.ssh/my_local_hosts_file&lt;/code>：指定当前用户的&lt;code>known_hosts&lt;/code>文件（服务器公钥指纹列表）的位置。&lt;/li>
&lt;li>&lt;code>VerifyHostKeyDNS yes&lt;/code>：是否通过检查 SSH 服务器的 DNS 记录，确认公钥指纹是否与&lt;code>known_hosts&lt;/code>文件保存的一致。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="ssh-密钥登录">SSH 密钥登录
&lt;/h2>&lt;p>SSH 默认采用密码登录，这种方法有很多缺点，简单的密码不安全，复杂的密码不容易记忆，每次手动输入也很麻烦。&lt;strong>密钥登录是比密码登录更好的解决方案&lt;/strong>。&lt;/p>
&lt;h3 id="密钥是什么">密钥是什么
&lt;/h3>&lt;p>密钥（key）是一个非常大的数字，通过加密算法得到。对称加密只需要一个密钥，非对称加密需要两个密钥成对使用，分为公钥（public key）和私钥（private key）。&lt;/p>
&lt;p>&lt;strong>SSH 密钥登录采用的是非对称加密&lt;/strong>，每个用户通过自己的密钥登录。其中，&lt;strong>私钥必须私密保存，不能泄漏&lt;/strong>；&lt;strong>公钥则是公开的，可以对外发送&lt;/strong>。它们的关系是，&lt;strong>公钥和私钥是一一对应的&lt;/strong>，&lt;strong>每一个私钥都有且仅有一个对应的公钥&lt;/strong>，&lt;strong>反之亦然&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>如果数据使用公钥加密，那么只有使用对应的私钥才能解密，其他密钥都不行&lt;/strong>；&lt;strong>反过来，如果使用私钥加密（这个过程一般称为“签名”），也只有使用对应的公钥解密。&lt;/strong>&lt;/p>
&lt;h3 id="密钥登录的过程">密钥登录的过程
&lt;/h3>&lt;p>SSH 密钥登录分为以下的步骤:&lt;/p>
&lt;p>预备步骤，客户端通过&lt;code>ssh-keygen&lt;/code>生成自己的公钥和私钥。&lt;/p>
&lt;p>第一步，手动将客户端的公钥放入远程服务器的指定位置。&lt;/p>
&lt;p>第二步，客户端向服务器发起 SSH 登录的请求。&lt;/p>
&lt;p>第三步，服务器收到用户 SSH 登录的请求，发送一些随机数据给用户，要求用户证明自己的身份。&lt;/p>
&lt;p>第四步，客户端收到服务器发来的数据，使用私钥对数据进行签名，然后再发还给服务器。&lt;/p>
&lt;p>第五步，服务器收到客户端发来的加密签名后，使用对应的公钥解密，然后跟原始数据比较。如果一致，就允许用户登录。&lt;/p>
&lt;h3 id="ssh-keygen命令生成密钥">&lt;code>ssh-keygen&lt;/code>命令：生成密钥
&lt;/h3>&lt;h4 id="基本用法-1">基本用法
&lt;/h4>&lt;p>密钥登录时，首先需要生成公钥和私钥。OpenSSH 提供了一个工具程序&lt;code>ssh-keygen&lt;/code>命令，&lt;strong>用来生成密钥&lt;/strong>。&lt;/p>
&lt;p>直接输入&lt;code>ssh-keygen&lt;/code>，程序会询问一系列问题，然后生成密钥:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常做法是使用&lt;code>-t&lt;/code>参数，指定密钥的加密算法:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，&lt;code>-t&lt;/code>参数用来指定密钥的加密算法，一般会选择 DSA 算法或 RSA 算法。如果省略该参数，默认使用 RSA 算法。&lt;/p>
&lt;p>一般都加&lt;code>-t&lt;/code>选项，有的ssh版本默认的加密算法不同。&lt;/p>
&lt;p>输入上面的命令以后，&lt;code>ssh-keygen&lt;/code>会要求用户回答一些问题:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Generating public/private dsa key pair.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter file in which to save the key &lt;span class="o">(&lt;/span>/home/username/.ssh/id_dsa&lt;span class="o">)&lt;/span>: press ENTER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter passphrase &lt;span class="o">(&lt;/span>empty &lt;span class="k">for&lt;/span> no passphrase&lt;span class="o">)&lt;/span>: ********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter same passphrase again: ********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your identification has been saved in /home/username/.ssh/id_dsa.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your public key has been saved in /home/username/.ssh/id_dsa.pub.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The key fingerprint is:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14:ba:06:98:a8:98:ad:27:b5:ce:55:85:ec:64:37:19 username@shell.isp.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，执行&lt;code>ssh-keygen&lt;/code>命令以后，会出现第一个问题，&lt;strong>询问密钥保存的文件名&lt;/strong>，默认是&lt;code>~/.ssh/id_dsa&lt;/code>文件，这个是私钥的文件名，对应的公钥文件&lt;code>~/.ssh/id_dsa.pub&lt;/code>是自动生成的。用户的密钥一般都放在主目录的&lt;code>.ssh&lt;/code>目录里面。&lt;/p>
&lt;p>如果选择&lt;code>rsa&lt;/code>算法，生成的密钥文件默认就会是&lt;code>~/.ssh/id_rsa&lt;/code>（私钥）和&lt;code>~/.ssh/id_rsa.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>接着，就会是第二个问题**，询问是否要为私钥文件设定密码保护（passphrase）&lt;strong>。这样的话，即使入侵者&lt;/strong>拿到私钥，还是需要破解密码**。如果为了方便，不想设定密码保护，可以直接按回车键，密码就会为空。后面还会让你再输入一次密码，两次输入必须一致。注意，这里“密码”的英文单词是 passphrase，这是为了避免与 Linux 账户的密码单词 password 混淆，表示这不是用户系统账户的密码。&lt;/p>
&lt;p>秘钥密码如果不为空，那么每次连接都需要输入密码。&lt;/p>
&lt;p>最后，就会生成私钥和公钥，屏幕上还会给出公钥的指纹，以及当前的用户名和主机名作为注释，&lt;strong>用来识别密钥的来源&lt;/strong>。&lt;/p>
&lt;p>公钥文件和私钥文件都是文本文件，可以用文本编辑器看一下它们的内容。公钥文件的内容类似下面这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">ssh-dss AAAAB3NzaC1yc2EAAAABIwAAAIEAvpB4lUbAaEbh9u6HLig7amsfywD4fqSZq2ikACIUBn3GyRPfeF93l/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">weQh702ofXbDydZAKMcDvBJqRhUotQUwqV6HJxqoqPDlPGUUyo8RDIkLUIPRyq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ypZxmK9aCXokFiHoGCXfQ9imUP/w/jfqb9ByDtG97tUJF6nFMP5WzhM= username@shell.isp.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，末尾的&lt;code>username@shell.isp.com&lt;/code>是公钥的注释，用来识别不同的公钥，表示这是哪台主机（&lt;code>shell.isp.com&lt;/code>）的哪个用户（&lt;code>username&lt;/code>）的公钥，&lt;strong>不是必需项&lt;/strong>。&lt;/p>
&lt;p>注意，公钥只有一行。因为它太长了，所以上面分成三行显示。&lt;/p>
&lt;p>下面的命令可以列出用户所有的公钥:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ls -l ~/.ssh/id_*.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>生成密钥以后，建议修改它们的权限，防止其他人读取:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> ~/.ssh/id_rsa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> ~/.ssh/id_rsa.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="配置项">配置项
&lt;/h4>&lt;p>&lt;code>ssh-keygen&lt;/code>的命令行配置项，主要有下面这些:&lt;/p>
&lt;p>&lt;strong>（1）&lt;code>-b&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-b&lt;/code>参数指定密钥的二进制位数。这个参数值越大，密钥就越不容易破解，但是加密解密的计算开销也会加大。&lt;/p>
&lt;p>一般来说，&lt;code>-b&lt;/code>至少应该是&lt;code>1024&lt;/code>，更安全一些可以设为&lt;code>2048&lt;/code>或者更高。&lt;/p>
&lt;p>&lt;strong>（2）&lt;code>-C&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-C&lt;/code>参数可以为密钥文件指定新的注释，格式为&lt;code>username@host&lt;/code>。&lt;/p>
&lt;p>下面命令生成一个4096位 RSA 加密算法的密钥对，并且给出了用户名和主机名。一般默认即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -C &lt;span class="s2">&amp;#34;your_email@domain.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）&lt;code>-f&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-f&lt;/code>参数指定生成的私钥文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa -f mykey
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会在当前目录生成私钥文件&lt;code>mykey&lt;/code>和公钥文件&lt;code>mykey.pub&lt;/code>。&lt;/p>
&lt;p>&lt;strong>（4）&lt;code>-F&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-F&lt;/code>参数检查某个主机名是否在&lt;code>known_hosts&lt;/code>文件里面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -F example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（5）&lt;code>-N&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-N&lt;/code>参数用于指定私钥的密码（passphrase）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t dsa -N secretword
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（6）&lt;code>-p&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数用于重新指定私钥的密码（passphrase）。它与&lt;code>-N&lt;/code>的不同之处在于，新密码不在命令中指定，而是执行后再输入。ssh 先要求输入旧密码，然后要求输入两遍新密码。&lt;/p>
&lt;p>&lt;strong>（7）&lt;code>-R&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-R&lt;/code>参数将指定的主机公钥指纹移出&lt;code>known_hosts&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -R example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（8）&lt;code>-t&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-t&lt;/code>参数用于指定生成密钥的加密算法，一般为&lt;code>dsa&lt;/code>或&lt;code>rsa&lt;/code>&lt;/p>
&lt;h3 id="手动上传公钥">手动上传公钥
&lt;/h3>&lt;p>&lt;strong>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>OpenSSH 规定，用户公钥保存在服务器的&lt;code>~/.ssh/authorized_keys&lt;/code>文件&lt;/strong>。你要以哪个用户的身份登录到服务器，密钥就必须保存在&lt;strong>该用户主目录&lt;/strong>的&lt;code>~/.ssh/authorized_keys&lt;/code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。&lt;strong>每个公钥占据一行&lt;/strong>。如果该文件不存在，可以手动创建。&lt;/p>
&lt;p>用户可以手动编辑该文件，把公钥粘贴进去，也可以在本机计算机上，执行下面的命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ cat ~/.ssh/id_rsa.pub &lt;span class="p">|&lt;/span> ssh user@host &lt;span class="s2">&amp;#34;mkdir -p ~/.ssh &amp;amp;&amp;amp; cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，&lt;code>user@host&lt;/code>要替换成你所要登录的用户名和主机名。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>，&lt;code>authorized_keys&lt;/code>文件的权限要设为&lt;code>644&lt;/code>，即只有文件所有者才能写。如果权限设置不对，SSH 服务器可能会拒绝读取该文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">644&lt;/span> ~/.ssh/authorized_keys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只要公钥上传到服务器，下次登录时，&lt;strong>OpenSSH 就会自动采用密钥登录&lt;/strong>，不再提示输入密码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -l username shell.isp.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter passphrase &lt;span class="k">for&lt;/span> key &lt;span class="s1">&amp;#39;/home/you/.ssh/id_dsa&amp;#39;&lt;/span>: ************
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Last login: Mon Mar &lt;span class="m">24&lt;/span> 02:17:27 &lt;span class="m">2014&lt;/span> from ex.ample.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">shell.isp.com&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面例子中，SSH 客户端使用私钥之前，会要求用户输入密码（passphrase），用来解开私钥。如果秘钥有密码，那么每次都需要输入密码。&lt;/p>
&lt;h3 id="ssh-copy-id-命令自动上传公钥">ssh-copy-id 命令：自动上传公钥
&lt;/h3>&lt;p>OpenSSH 自带一个&lt;code>ssh-copy-id&lt;/code>命令，可以自动将公钥拷贝到远程服务器的&lt;code>~/.ssh/authorized_keys&lt;/code>文件。如果&lt;code>~/.ssh/authorized_keys&lt;/code>文件不存在，&lt;code>ssh-copy-id&lt;/code>命令会自动创建该文件。&lt;/p>
&lt;p>用户在本地计算机执行下面的命令，就可以把本地的公钥拷贝到服务器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-copy-id -i key_file user@host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-i&lt;/code>参数用来指定公钥文件，&lt;code>user&lt;/code>是所要登录的账户名，&lt;code>host&lt;/code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。&lt;/p>
&lt;p>注意，公钥文件可以&lt;strong>不指定&lt;code>.pub&lt;/code>后缀名&lt;/strong>，&lt;code>ssh-copy-id&lt;/code>会自动在当前目录里面寻找。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ~/.ssh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh-copy-id -i id_rsa user@host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，公钥文件会自动匹配到&lt;code>~/.ssh/id_rsa.pub&lt;/code>。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>，&lt;code>ssh-copy-id&lt;/code>是直接将公钥添加到&lt;code>authorized_keys&lt;/code>文件的末尾。如果&lt;code>authorized_keys&lt;/code>文件的末尾不是一个换行符，会导致新的公钥添加到前一个公钥的末尾，两个公钥连在一起，使得它们都无法生效。所以，如果&lt;code>authorized_keys&lt;/code>文件已经存在，使用&lt;code>ssh-copy-id&lt;/code>命令之前，务必保证&lt;code>authorized_keys&lt;/code>文件的末尾是换行符（假设该文件已经存在）。&lt;/p>
&lt;h3 id="ssh-agent-命令ssh-add-命令">ssh-agent 命令，ssh-add 命令
&lt;/h3>&lt;h4 id="基本用法-2">基本用法
&lt;/h4>&lt;p>私钥设置了密码以后，每次使用都必须输入密码，有时让人感觉非常麻烦。比如，连续使用&lt;code>scp&lt;/code>命令远程拷贝文件时，每次都要求输入密码。&lt;/p>
&lt;p>&lt;code>ssh-agent&lt;/code>命令就是为了解决这个问题而设计的，它让用户在整个 Bash 对话（session）之中，&lt;strong>只在第一次使用 SSH 命令时输入密码，然后将私钥保存在内存中，后面都不需要再输入私钥的密码了&lt;/strong>。&lt;/p>
&lt;p>第一步，使用下面的命令新建一次命令行对话:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-agent bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，如果你使用的命令行环境不是 Bash，可以用其他的 Shell 命令代替。比如&lt;code>zsh&lt;/code>和&lt;code>fish&lt;/code>。&lt;/p>
&lt;p>如果想在当前对话启用&lt;code>ssh-agent&lt;/code>，可以使用下面的命令:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">eval&lt;/span> &lt;span class="sb">`&lt;/span>ssh-agent&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>ssh-agent&lt;/code>会先自动在后台运行，并将需要设置的环境变量输出在屏幕上，类似下面这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-agent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SSH_AUTH_SOCK&lt;/span>&lt;span class="o">=&lt;/span>/tmp/ssh-barrett/ssh-22841-agent&lt;span class="p">;&lt;/span> &lt;span class="nb">export&lt;/span> SSH_AUTH_SOCK&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SSH_AGENT_PID&lt;/span>&lt;span class="o">=&lt;/span>22842&lt;span class="p">;&lt;/span> &lt;span class="nb">export&lt;/span> SSH_AGENT_PID&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> Agent pid 22842&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>eval&lt;/code>命令的作用，就是运行上面的&lt;code>ssh-agent&lt;/code>命令的输出，设置环境变量。&lt;/p>
&lt;p>第二步，在新建的 Shell 对话里面，使用&lt;code>ssh-add&lt;/code>命令添加默认的私钥（比如&lt;code>~/.ssh/id_rsa&lt;/code>，或&lt;code>~/.ssh/id_dsa&lt;/code>，或&lt;code>~/.ssh/id_ecdsa&lt;/code>，或&lt;code>~/.ssh/id_ed25519&lt;/code>）:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-add
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter passphrase &lt;span class="k">for&lt;/span> /home/you/.ssh/id_dsa: ********
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Identity added: /home/you/.ssh/id_dsa &lt;span class="o">(&lt;/span>/home/you/.ssh/id_dsa&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面例子中，添加私钥时，会要求输入密码。以后，在这个对话里面再使用密钥时，就不需要输入私钥的密码了，因为私钥已经加载到内存里面了。&lt;/p>
&lt;p>如果添加的不是默认私钥，&lt;code>ssh-add&lt;/code>命令需要显式指定私钥文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-add my-other-key-file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令中，&lt;code>my-other-key-file&lt;/code>就是用户指定的私钥文件。&lt;/p>
&lt;p>第三步，使用 ssh 命令正常登录远程服务器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh remoteHost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>remoteHost&lt;/code>是远程服务器的地址，ssh 使用的是默认的私钥。这时如果私钥设有密码，ssh 将不再询问密码，而是直接取出内存里面的私钥。&lt;/p>
&lt;p>如果要使用其他私钥登录服务器，需要使用 ssh 命令的&lt;code>-i&lt;/code>参数指定私钥文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh –i OpenSSHPrivateKey remoteHost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，如果要退出&lt;code>ssh-agent&lt;/code>，可以直接退出子 Shell（按下 Ctrl + d），也可以使用下面的命令:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh-agent -k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ssh-add命令">&lt;code>ssh-add&lt;/code>命令
&lt;/h3>&lt;p>&lt;code>ssh-add&lt;/code>命令用来将私钥加入&lt;code>ssh-agent&lt;/code>，它有如下的参数:&lt;/p>
&lt;p>&lt;strong>（1）&lt;code>-d&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-d&lt;/code>参数从内存中删除指定的私钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-add -d name-of-key-file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（2）&lt;code>-D&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-D&lt;/code>参数从内存中删除所有已经添加的私钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-add -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）&lt;code>-l&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-l&lt;/code>参数列出所有已经添加的私钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-add -l
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="关闭密码登录">关闭密码登录
&lt;/h3>&lt;p>&lt;strong>为了安全性，启用密钥登录之后，最好关闭服务器的密码登录&lt;/strong>。&lt;/p>
&lt;p>对于 OpenSSH，具体方法就是打开服务器 sshd 的配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>，将&lt;code>PasswordAuthentication&lt;/code>这一项设为&lt;code>no&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">PasswordAuthentication no
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改配置文件以后，不要忘了重新启动 sshd，否则不会生效。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-证书登录">SSH 证书登录
&lt;/h2>&lt;p>SSH 是服务器登录工具，一般情况下都采用密码登录或密钥登录。&lt;/p>
&lt;p>但是，SSH 还有第三种登录方法，那就是证书登录。某些情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。&lt;/p>
&lt;h3 id="非证书登录的缺点">非证书登录的缺点
&lt;/h3>&lt;p>密码登录和密钥登录，都有各自的缺点。&lt;/p>
&lt;p>密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。&lt;/p>
&lt;p>密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。&lt;/p>
&lt;h3 id="证书登录是什么">证书登录是什么？
&lt;/h3>&lt;p>证书登录就是为了解决上面的缺点而设计的。它引入了一个&lt;strong>证书颁发机构&lt;/strong>（Certificate Authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。&lt;/p>
&lt;p>登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。&lt;/p>
&lt;p>证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。&lt;/p>
&lt;h3 id="证书登录的流程">证书登录的流程
&lt;/h3>&lt;p>SSH 证书登录之前，如果还没有证书，需要生成证书。具体方法是：（1）用户和服务器都将自己的公钥，发给 CA；（2）CA 使用服务器公钥，生成服务器证书，发给服务器；（3）CA 使用用户的公钥，生成用户证书，发给用户。&lt;/p>
&lt;p>有了证书以后，用户就可以登录服务器了。整个过程都是 SSH 自动处理，用户无感知。&lt;/p>
&lt;p>第一步，用户登录服务器时，SSH 自动将用户证书发给服务器。&lt;/p>
&lt;p>第二步，服务器检查用户证书是否有效，以及是否由可信的 CA 颁发。证实以后，就可以信任用户。&lt;/p>
&lt;p>第三步，SSH 自动将服务器证书发给用户。&lt;/p>
&lt;p>第四步，用户检查服务器证书是否有效，以及是否由信任的 CA 颁发。证实以后，就可以信任服务器。&lt;/p>
&lt;p>第五步，双方建立连接，服务器允许用户登录。&lt;/p>
&lt;h3 id="生成-ca-的密钥">生成 CA 的密钥
&lt;/h3>&lt;p>证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。&lt;/p>
&lt;p>虽然 CA 可以用同一对密钥签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做&lt;code>user_ca&lt;/code>，另一对是签发服务器证书的密钥，假设叫做&lt;code>host_ca&lt;/code>。&lt;/p>
&lt;p>使用下面的命令，生成&lt;code>user_ca&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生成 CA 签发用户证书的密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -f ~/.ssh/user_ca -C user_ca
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会在&lt;code>~/.ssh&lt;/code>目录生成一对密钥：&lt;code>user_ca&lt;/code>（私钥）和&lt;code>user_ca.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>这个命令的各个参数含义如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-t rsa&lt;/code>：指定密钥算法 RSA。&lt;/li>
&lt;li>&lt;code>-b 4096&lt;/code>：指定密钥的位数是4096位。安全性要求不高的场合，这个值可以小一点，但是不应小于1024。&lt;/li>
&lt;li>&lt;code>-f ~/.ssh/user_ca&lt;/code>：指定生成密钥的位置和文件名。&lt;/li>
&lt;li>&lt;code>-C user_ca&lt;/code>：指定密钥的识别字符串，相当于注释，可以随意设置。&lt;/li>
&lt;/ul>
&lt;p>使用下面的命令，生成&lt;code>host_ca&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 生成 CA 签发服务器证书的密钥&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -f host_ca -C host_ca
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会在&lt;code>~/.ssh&lt;/code>目录生成一对密钥：&lt;code>host_ca&lt;/code>（私钥）和&lt;code>host_ca.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>现在，&lt;code>~/.ssh&lt;/code>目录应该至少有四把密钥。&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/.ssh/user_ca&lt;/code>&lt;/li>
&lt;li>&lt;code>~/.ssh/user_ca.pub&lt;/code>&lt;/li>
&lt;li>&lt;code>~/.ssh/host_ca&lt;/code>&lt;/li>
&lt;li>&lt;code>~/.ssh/host_ca.pub&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="ca-签发服务器证书">CA 签发服务器证书
&lt;/h3>&lt;p>有了秘钥以后，就可以签发服务器证书CA了。&lt;/p>
&lt;p>签发证书，除了 CA 的密钥以外，还需要&lt;strong>服务器的公钥&lt;/strong>。一般来说，SSH 服务器（通常是&lt;code>sshd&lt;/code>）安装时，已经生成密钥&lt;code>/etc/ssh/ssh_host_rsa_key&lt;/code>了。如果没有的话，可以用下面的命令生成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo ssh-keygen -f /etc/ssh/ssh_host_rsa_key -b &lt;span class="m">4096&lt;/span> -t rsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会在&lt;code>/etc/ssh&lt;/code>目录，生成&lt;code>ssh_host_rsa_key&lt;/code>（私钥）和&lt;code>ssh_host_rsa_key.pub&lt;/code>（公钥）。然后，需要把服务器公钥&lt;code>ssh_host_rsa_key.pub&lt;/code>，&lt;strong>复制或上传到 CA 所在的服务器&lt;/strong>。&lt;/p>
&lt;p>上传以后，CA 就可以使用密钥&lt;code>host_ca&lt;/code>为服务器的公钥&lt;code>ssh_host_rsa_key.pub&lt;/code>签发服务器证书：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -s host_ca -I host.example.com -h -n host.example.com -V +52w ssh_host_rsa_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会生成服务器证书&lt;code>ssh_host_rsa_key-cert.pub&lt;/code>（服务器公钥名字加后缀&lt;code>-cert&lt;/code>）。这个命令各个参数的含义如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：指定 CA 签发证书的密钥。&lt;/li>
&lt;li>&lt;code>-I&lt;/code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。&lt;/li>
&lt;li>&lt;code>-h&lt;/code>：指定该证书是服务器证书，而不是用户证书。&lt;/li>
&lt;li>&lt;code>-n host.example.com&lt;/code>：指定服务器的域名，表示证书仅对该域名有效。如果有多个域名，则使用逗号分隔。用户登录该域名服务器时，SSH 通过证书的这个值，分辨应该使用哪张证书发给用户，用来证明服务器的可信性。&lt;/li>
&lt;li>&lt;code>-V +52w&lt;/code>：指定证书的有效期，这里为52周（一年）。默认情况下，证书是永远有效的。建议使用该参数指定有效期，并且有效期最好短一点，最长不超过52周。&lt;/li>
&lt;li>&lt;code>ssh_host_rsa_key.pub&lt;/code>：服务器公钥。&lt;/li>
&lt;/ul>
&lt;p>生成证书以后，可以使用下面的命令，查看证书的细节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -L -f ssh_host_rsa_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，为证书设置权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> ssh_host_rsa_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ca-签发用户证书">CA 签发用户证书
&lt;/h3>&lt;p>下面，再用 CA 签发用户证书。这时需要用户的公钥，如果没有的话，客户端可以用下面的命令生成一对密钥：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -f ~/.ssh/user_key -b &lt;span class="m">4096&lt;/span> -t rsa
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会在&lt;code>~/.ssh&lt;/code>目录，生成&lt;code>user_key&lt;/code>（私钥）和&lt;code>user_key.pub&lt;/code>（公钥）。&lt;/p>
&lt;p>然后，将用户公钥&lt;code>user_key.pub&lt;/code>，上传或复制到 CA 服务器。接下来，就可以使用 CA 的密钥&lt;code>user_ca&lt;/code>为用户公钥&lt;code>user_key.pub&lt;/code>签发用户证书：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -s user_ca -I user@example.com -n user -V +1d user_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会生成用户证书&lt;code>user_key-cert.pub&lt;/code>（用户公钥名字加后缀&lt;code>-cert&lt;/code>）。这个命令各个参数的含义如下。&lt;/p>
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：指定 CA 签发证书的密钥&lt;/li>
&lt;li>&lt;code>-I&lt;/code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。&lt;/li>
&lt;li>&lt;code>-n user&lt;/code>：指定用户名，表示证书仅对该用户名有效。如果有多个用户名，使用逗号分隔。用户以该用户名登录服务器时，SSH 通过这个值，分辨应该使用哪张证书，证明自己的身份，发给服务器。&lt;/li>
&lt;li>&lt;code>-V +1d&lt;/code>：指定证书的有效期，这里为1天，强制用户每天都申请一次证书，提高安全性。默认情况下，证书是永远有效的。&lt;/li>
&lt;li>&lt;code>user_key.pub&lt;/code>：用户公钥。&lt;/li>
&lt;/ul>
&lt;p>生成证书以后，可以使用下面的命令，查看证书的细节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -L -f user_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，为证书设置权限。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">600&lt;/span> user_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="服务器安装证书">服务器安装证书
&lt;/h3>&lt;p>CA 生成服务器证书&lt;code>ssh_host_rsa_key-cert.pub&lt;/code>以后，需要将该证书发回服务器，可以使用下面的&lt;code>scp&lt;/code>命令，将证书拷贝过去：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp ~/.ssh/ssh_host_rsa_key-cert.pub root@host.example.com:/etc/ssh/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，将下面一行添加到服务器配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码告诉 sshd，服务器证书是哪一个文件。&lt;/p>
&lt;p>重新启动 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo service sshd restart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="服务器安装-ca-公钥">服务器安装 CA 公钥
&lt;/h3>&lt;p>为了让服务器信任用户证书，必须将 CA 签发用户证书的公钥&lt;code>user_ca.pub&lt;/code>，拷贝到服务器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp ~/.ssh/user_ca.pub root@host.example.com:/etc/ssh/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令，将 CA 签发用户证书的公钥&lt;code>user_ca.pub&lt;/code>，拷贝到 SSH 服务器的&lt;code>/etc/ssh&lt;/code>目录。&lt;/p>
&lt;p>然后，将下面一行添加到服务器配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">TrustedUserCAKeys /etc/ssh/user_ca.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的做法是将&lt;code>user_ca.pub&lt;/code>加到&lt;code>/etc/ssh/sshd_config&lt;/code>，这会产生全局效果，即服务器的所有账户都会信任&lt;code>user_ca&lt;/code>签发的所有用户证书。&lt;/p>
&lt;p>另一种做法是将&lt;code>user_ca.pub&lt;/code>加到服务器某个账户的&lt;code>~/.ssh/authorized_keys&lt;/code>文件，只让该账户信任&lt;code>user_ca&lt;/code>签发的用户证书。具体方法是打开&lt;code>~/.ssh/authorized_keys&lt;/code>，追加一行，开头是&lt;code>@cert-authority principals=&amp;quot;...&amp;quot;&lt;/code>，然后后面加上&lt;code>user_ca.pub&lt;/code>的内容，大概是下面这个样子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">@cert-authority &lt;span class="nv">principals&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span> ssh-rsa AAAAB3Nz...XNRM1EX2gQ&lt;span class="o">==&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>principals=&amp;quot;user&amp;quot;&lt;/code>指定用户登录的服务器账户名，一般就是&lt;code>authorized_keys&lt;/code>文件所在的账户。&lt;/p>
&lt;p>重新启动 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo service sshd restart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>至此，SSH 服务器已配置为信任&lt;code>user_ca&lt;/code>签发的证书。&lt;/p>
&lt;h3 id="客户端安装证书">客户端安装证书
&lt;/h3>&lt;p>客户端安装用户证书很简单，就是从 CA 将用户证书&lt;code>user_key-cert.pub&lt;/code>复制到客户端，与用户的密钥&lt;code>user_key&lt;/code>保存在同一个目录即可。&lt;/p>
&lt;h3 id="客户端安装-ca-公钥">客户端安装 CA 公钥
&lt;/h3>&lt;p>为了让客户端信任服务器证书，必须将 CA 签发服务器证书的公钥&lt;code>host_ca.pub&lt;/code>，加到客户端的&lt;code>/etc/ssh/ssh_known_hosts&lt;/code>文件（全局级别）或者&lt;code>~/.ssh/known_hosts&lt;/code>文件（用户级别）。&lt;/p>
&lt;p>具体做法是打开&lt;code>ssh_known_hosts&lt;/code>或&lt;code>known_hosts&lt;/code>文件，追加一行，开头为&lt;code>@cert-authority *.example.com&lt;/code>，然后将&lt;code>host_ca.pub&lt;/code>文件的内容（即公钥）粘贴在后面，大概是下面这个样子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">@cert-authority *.example.com ssh-rsa AAAAB3Nz...XNRM1EX2gQ&lt;span class="o">==&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>*.example.com&lt;/code>是域名的模式匹配，表示只要服务器符合该模式的域名，且签发服务器证书的 CA 匹配后面给出的公钥，就都可以信任。如果没有域名限制，这里可以写成&lt;code>*&lt;/code>。如果有多个域名模式，可以使用逗号分隔；如果服务器没有域名，可以用主机名（比如&lt;code>host1,host2,host3&lt;/code>）或者 IP 地址（比如&lt;code>11.12.13.14,21.22.23.24&lt;/code>）。&lt;/p>
&lt;p>然后，就可以使用证书，登录远程服务器了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -i ~/.ssh/user_key user@host.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令的&lt;code>-i&lt;/code>参数用来指定用户的密钥。如果证书与密钥在同一个目录，则连接服务器时将自动使用该证书。&lt;/p>
&lt;h3 id="废除证书">废除证书
&lt;/h3>&lt;p>废除证书的操作，分成用户证书的废除和服务器证书的废除两种。&lt;/p>
&lt;p>服务器证书的废除，用户需要在&lt;code>known_hosts&lt;/code>文件里面，修改或删除对应的&lt;code>@cert-authority&lt;/code>命令的那一行。&lt;/p>
&lt;p>用户证书的废除，需要在服务器新建一个&lt;code>/etc/ssh/revoked_keys&lt;/code>文件，然后在配置文件&lt;code>sshd_config&lt;/code>添加一行，内容如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">RevokedKeys /etc/ssh/revoked_keys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>revoked_keys&lt;/code>文件保存不再信任的用户公钥，由下面的命令生成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -kf /etc/ssh/revoked_keys -z &lt;span class="m">1&lt;/span> ~/.ssh/user1_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-z&lt;/code>参数用来指定用户公钥保存在&lt;code>revoked_keys&lt;/code>文件的哪一行，这个例子是保存在第1行。&lt;/p>
&lt;p>如果以后需要废除其他的用户公钥，可以用下面的命令保存在第2行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh-keygen -ukf /etc/ssh/revoked_keys -z &lt;span class="m">2&lt;/span> ~/.ssh/user2_key.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="参考链接">参考链接
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://smallstep.com/blog/ssh-emergency-access/" target="_blank" rel="noopener"
>SSH Emergency Access&lt;/a>, Carl Tashian&lt;/li>
&lt;li>&lt;a class="link" href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-using_openssh_certificate_authentication" target="_blank" rel="noopener"
>Using OpenSSH Certificate Authentication&lt;/a>, Red Hat Enterprise Linux Deployment Guide&lt;/li>
&lt;li>&lt;a class="link" href="https://gravitational.com/blog/how-to-ssh-properly/" target="_blank" rel="noopener"
>How to SSH Properly&lt;/a>, Gus Luxton&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="scp-命令">scp 命令
&lt;/h2>&lt;p>&lt;code>scp&lt;/code>是 SSH 提供的一个&lt;strong>客户端程序&lt;/strong>，用来在两台主机之间加密传送文件（即复制文件）。&lt;/p>
&lt;h3 id="简介-1">简介
&lt;/h3>&lt;p>&lt;code>scp&lt;/code>是 secure copy 的缩写，相当于&lt;code>cp&lt;/code>命令 + SSH。它的底层是 SSH 协议，默认端口是22，相当于先使用&lt;code>ssh&lt;/code>命令登录远程主机，然后再执行拷贝操作。&lt;/p>
&lt;p>&lt;code>scp&lt;/code>主要用于以下三种复制操作：&lt;/p>
&lt;ul>
&lt;li>本地复制到远程。&lt;/li>
&lt;li>远程复制到本地。&lt;/li>
&lt;li>两个远程系统之间的复制。&lt;/li>
&lt;/ul>
&lt;p>使用&lt;code>scp&lt;/code>传输数据时，文件和密码都是加密的，不会泄漏敏感信息。&lt;/p>
&lt;h3 id="基本语法">基本语法
&lt;/h3>&lt;p>&lt;code>scp&lt;/code>的语法类似&lt;code>cp&lt;/code>的语法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>source&lt;/code>是文件当前的位置，&lt;code>destination&lt;/code>是文件所要复制到的位置。它们都可以包含用户名和主机名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp user@host:foo.txt bar.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将远程主机（&lt;code>user@host&lt;/code>）用户主目录下的&lt;code>foo.txt&lt;/code>，复制为本机当前目录的&lt;code>bar.txt&lt;/code>。可以看到，主机与文件之间要使用冒号（&lt;code>:&lt;/code>）分隔。&lt;/p>
&lt;p>&lt;code>scp&lt;/code>会先用 SSH 登录到远程主机，然后在加密连接之中复制文件。客户端发起连接后，会提示用户输入密码，这部分是跟 SSH 的用法一致的。&lt;/p>
&lt;p>用户名和主机名都是可以省略的。用户名的默认值是本机的当前用户名，主机名默认为当前主机。注意，&lt;code>scp&lt;/code>会使用 SSH 客户端的配置文件&lt;code>.ssh/config&lt;/code>，如果配置文件里面定义了主机的别名，这里也可以使用别名连接。&lt;/p>
&lt;p>&lt;code>scp&lt;/code>支持一次复制多个文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp source1 source2 destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令会将&lt;code>source1&lt;/code>和&lt;code>source2&lt;/code>两个文件，复制到&lt;code>destination&lt;/code>。&lt;/p>
&lt;p>注意，如果所要复制的文件，在目标位置已经存在同名文件，&lt;code>scp&lt;/code>会在没有警告的情况下覆盖同名文件。&lt;/p>
&lt;h3 id="用法示例">用法示例
&lt;/h3>&lt;p>&lt;strong>（1）本地文件复制到远程&lt;/strong>&lt;/p>
&lt;p>复制本机文件到远程系统的用法如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 语法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp SourceFile user@host:directory/TargetFile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 示例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp file.txt remote_username@10.10.0.2:/remote/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是复制整个目录的例子:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将本机的 documents 目录拷贝到远程主机，&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 会在远程主机创建 documents 目录: 远程目录存在，则复制，不存在则改名。注意只能一级目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r documents username@server_ip:/path_to_remote_directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将本机整个目录拷贝到远程目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r localmachine/path_to_the_directory username@server_ip:/path_to_remote_directory/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将本机目录下的所有内容拷贝到远程目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r localmachine/path_to_the_directory/* username@server_ip:/path_to_remote_directory/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（2）远程文件复制到本地&lt;/strong>&lt;/p>
&lt;p>从远程主机复制文件到本地的用法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 语法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp user@host:directory/SourceFile TargetFile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 示例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp remote_username@10.10.0.2:/remote/file.txt /local/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是复制整个目录的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 拷贝一个远程目录到本机目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r username@server_ip:/path_to_remote_directory local-machine/path_to_the_directory/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 拷贝远程目录下的所有内容，到本机目录下&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r username@server_ip:/path_to_remote_directory/* local-machine/path_to_the_directory/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp -r user@host:directory/SourceFolder TargetFolder
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）两个远程系统之间的复制&lt;/strong>&lt;/p>
&lt;p>本机发出指令，从远程主机 A 拷贝到远程主机 B 的用法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 语法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp user@host1:directory/SourceFile user@host2:directory/SourceFile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 示例&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ scp user1@host1.com:/files/file.txt user2@host2.com:/files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>系统将提示你输入两个远程帐户的密码。数据将直接从一个远程主机传输到另一个远程主机。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：远程目录存在，则复制，不存在则改名。&lt;strong>注意只能改一级目录&lt;/strong>。&lt;/p>
&lt;h3 id="配置项-1">配置项
&lt;/h3>&lt;p>&lt;strong>（1）&lt;code>-c&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-c&lt;/code>参数用来指定文件拷贝数据传输的加密算法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -c blowfish some_file your_username@remotehost.edu:~
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码指定加密算法为&lt;code>blowfish&lt;/code>。&lt;/p>
&lt;p>&lt;strong>（2）&lt;code>-C&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-C&lt;/code>参数表示是否在传输时压缩文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -c blowfish -C local_file your_username@remotehost.edu:~
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（3）&lt;code>-F&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-F&lt;/code>参数用来指定 ssh_config 文件，供 ssh 使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -F /home/pungki/proxy_ssh_config Label.pdf root@172.20.10.8:/root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（4）&lt;code>-i&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-i&lt;/code>参数用来指定密钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -vCq -i private_key.pem ~/test.txt root@192.168.1.3:/some/path/test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（5）&lt;code>-l&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-l&lt;/code>参数用来限制传输数据的带宽速率，单位是 Kbit/sec。对于多人分享的带宽，这个参数可以留出一部分带宽供其他人使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -l &lt;span class="m">80&lt;/span> yourusername@yourserver:/home/yourusername/* .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中，&lt;code>scp&lt;/code>命令占用的带宽限制为每秒 80K 比特位，即每秒 10K 字节。&lt;/p>
&lt;p>&lt;strong>（6）&lt;code>-p&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数用来保留修改时间（modification time）、访问时间（access time）、文件状态（mode）等原始文件的信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -p ~/test.txt root@192.168.1.3:/some/path/test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（7）&lt;code>-P&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-P&lt;/code>参数用来指定远程主机的 SSH 端口。如果远程主机使用默认端口22，可以不用指定，否则需要用&lt;code>-P&lt;/code>参数在命令中指定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -P &lt;span class="m">2222&lt;/span> user@host:directory/SourceFile TargetFile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（8）&lt;code>-q&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-q&lt;/code>参数用来关闭显示拷贝的进度条。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -q Label.pdf mrarianto@202.x.x.x:.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>（9）&lt;code>-r&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-r&lt;/code>参数表示是否以递归方式复制目录。&lt;/p>
&lt;p>&lt;strong>（10）&lt;code>-v&lt;/code>&lt;/strong>&lt;/p>
&lt;p>&lt;code>-v&lt;/code>参数用来显示详细的输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ scp -v ~/test.txt root@192.168.1.3:/root/help2356.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="sftp-命令">sftp 命令
&lt;/h2>&lt;p>FTP（File Transfer Protocol，文件传输协议），提供文件的上传和下载功能。&lt;code>sftp&lt;/code>是基于SSH协议的文件传输协议，提供了加密和认证功能。&lt;/p>
&lt;p>&lt;code>sftp&lt;/code>是 SSH 提供的一个客户端应用程序（&lt;strong>意味着认证方式通用&lt;/strong>），主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，&lt;code>sftp&lt;/code>就相当于将 FTP 放入了 SSH。&lt;/p>
&lt;p>下面的命令连接 FTP 主机：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sftp username@hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行上面的命令，会要求输入 FTP 的密码。密码验证成功以后，就会出现 FTP 的提示符&lt;code>sftp&amp;gt; &lt;/code>，下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sftp USER@penguin.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USER@penguin.example.com&lt;span class="err">&amp;#39;&lt;/span>s password:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Connected to penguin.example.com.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sftp&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>FTP 的提示符下面，就可以输入各种 FTP 命令了，这部分完全跟传统的 FTP 用法完全一样：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ls [directory]&lt;/code>：列出一个远程目录的内容。如果没有指定目标目录，则默认列出当前目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cd directory&lt;/code>：从当前目录改到指定目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mkdir directory&lt;/code>：创建一个远程目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>rmdir path&lt;/code>：删除一个远程目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>put localfile [remotefile]&lt;/code>：本地文件传输到远程主机。&lt;/p>
&lt;ul>
&lt;li>需要注意的是远程主机的工作目录是当前用户的主目录。本地主机是当前目录。
&lt;ul>
&lt;li>所以可以相互省略工作目录&lt;/li>
&lt;li>&lt;code>put [filename]&lt;/code>：上传文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>get remotefile [localfile]&lt;/code>：远程文件传输到本地。&lt;/p>
&lt;ul>
&lt;li>这里可以省略本地主机当前目录，默认为本地主机当前目录。&lt;/li>
&lt;li>目录加&lt;code>-r&lt;/code>选项。&lt;/li>
&lt;li>&lt;code>get [filename]&lt;/code>：下载文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bye&lt;/code>：退出 sftp。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>quit&lt;/code>：退出 sftp。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>exit&lt;/code>：退出 sftp。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>help&lt;/code>：显示帮助信息。&lt;/p>
&lt;ul>
&lt;li>更多命令基本与Linux通用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="rsync-命令">rsync 命令
&lt;/h2>&lt;h3 id="简介-2">简介
&lt;/h3>&lt;p>rsync 是一个常用的 Linux 应用程序，&lt;strong>用于文件同步&lt;/strong>。&lt;/p>
&lt;p>它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代&lt;code>cp&lt;/code>和&lt;code>mv&lt;/code>命令。与&lt;code>scp&lt;/code>类似。&lt;/p>
&lt;p>它名称里面的&lt;code>r&lt;/code>指的是 remote，rsync 其实就是“远程同步”（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，rsync 的最大特点是会检查发送方和接收方已有的文件，&lt;strong>仅传输有变动的部分&lt;/strong>（默认规则是文件大小或修改时间有变动）。&lt;/p>
&lt;p>虽然 rsync 不是 SSH 工具集的一部分，但因为也涉及到远程操作，所以放在这里一起介绍。&lt;/p>
&lt;p>&lt;code>rsync&lt;/code>具有以下主要特性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>增量传输&lt;/strong>：只传输源和目标之间的差异，而不是整个文件或目录。&lt;/li>
&lt;li>&lt;strong>快速&lt;/strong>：通过采用一种叫做“快速检查算法”（rolling checksum）的方法，它可以快速找到文件的差异。&lt;/li>
&lt;li>&lt;strong>灵活&lt;/strong>：支持各种不同的传输模式，包括本地到本地、本地到远程、远程到本地。&lt;/li>
&lt;li>&lt;strong>安全&lt;/strong>：可以通过SSH协议传输数据，保证数据的安全性。&lt;/li>
&lt;li>&lt;strong>支持软链接、硬链接和设备文件&lt;/strong>：在同步过程中，能够保留这些文件的属性。&lt;/li>
&lt;li>&lt;strong>可断点续传&lt;/strong>：在传输中断后，能够从中断点继续。&lt;/li>
&lt;li>&lt;strong>文件权限和所有权保留&lt;/strong>：能够保留文件的权限、所有者和时间戳信息。&lt;/li>
&lt;li>&lt;strong>广泛的选项和参数&lt;/strong>：提供了丰富的选项和参数来满足各种需求。&lt;/li>
&lt;/ul>
&lt;h3 id="安装">安装
&lt;/h3>&lt;p>如果本机或者远程计算机没有安装 rsync，可以用下面的命令安装:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo yum install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS 8及之后的版本(包括RHEL 8)/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Arch Linux/Windows msys2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo pacman -S rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># macOS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ brew install rsync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># FreeBSD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo pkg install rsync
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>，传输的双方都必须安装 rsync。&lt;/p>
&lt;h3 id="基本用法-3">基本用法
&lt;/h3>&lt;p>&lt;code>rsync&lt;/code>的基本语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">rsync &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span> &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>source&lt;/strong>：源文件或目录的路径。&lt;/p>
&lt;p>&lt;strong>destination&lt;/strong>：目标文件或目录的路径。&lt;/p>
&lt;p>远程主机在路径前加&lt;code>usname@hostname:&lt;/code>，与&lt;code>scp&lt;/code>一样。&lt;/p>
&lt;p>rsync 可以用于本地计算机的两个目录之间的同步。下面就用&lt;strong>本地同步举例&lt;/strong>，顺便讲解 rsync 几个主要参数的用法:&lt;/p>
&lt;p>&lt;code>-v&lt;/code>：显示详细的输出信息。&lt;/p>
&lt;p>&lt;code>-r&lt;/code>参数&lt;/p>
&lt;p>本机使用 rsync 命令时，可以作为&lt;code>cp&lt;/code>和&lt;code>mv&lt;/code>命令的替代方法，将源目录拷贝到目标目录:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -r &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-r&lt;/code>表示递归，即包含子目录。注意，&lt;code>-r&lt;/code>是必须的，否则 rsync 运行不会成功。&lt;code>source&lt;/code>目录表示源目录，&lt;code>destination&lt;/code>表示目标目录。上面命令执行以后，目标目录下就会出现&lt;code>destination/source&lt;/code>这个子目录。&lt;/p>
&lt;p>如果有多个文件或目录需要同步，可以写成下面这样:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -r source1 source2 destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>source1&lt;/code>、&lt;code>source2&lt;/code>都会被同步到&lt;code>destination&lt;/code>目录。&lt;/p>
&lt;p>&lt;code>-a&lt;/code>参数&lt;/p>
&lt;p>&lt;code>-a&lt;/code>参数可以替代&lt;code>-r&lt;/code>，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以&lt;code>-a&lt;/code>比&lt;code>-r&lt;/code>更有用。下面的用法才是常见的写法:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -a &lt;span class="nb">source&lt;/span> destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目标目录&lt;code>destination&lt;/code>如果不存在，rsync 会自动创建。执行上面的命令后，源目录&lt;code>source&lt;/code>被完整地复制到了目标目录&lt;code>destination&lt;/code>下面，即形成了&lt;code>destination/source&lt;/code>的目录结构。&lt;/p>
&lt;p>如果只想同步源目录&lt;code>source&lt;/code>里面的内容到目标目录&lt;code>destination&lt;/code>，则需要在源目录后面加上斜杠:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -a source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令执行后，&lt;code>source&lt;/code>目录里面的内容，就都被复制到了&lt;code>destination&lt;/code>目录里面，并不会在&lt;code>destination&lt;/code>下面创建一个&lt;code>source&lt;/code>子目录。&lt;/p>
&lt;p>&lt;code>-n&lt;/code>参数&lt;/p>
&lt;p>如果不确定 rsync 执行后会产生什么结果，可以先用&lt;code>-n&lt;/code>或&lt;code>--dry-run&lt;/code>参数模拟执行的结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -anv source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-n&lt;/code>参数模拟命令执行的结果，并不真的执行命令。&lt;code>-v&lt;/code>参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。&lt;/p>
&lt;p>&lt;code>--delete&lt;/code>参数&lt;/p>
&lt;p>默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用&lt;code>--delete&lt;/code>参数，这将删除只存在于目标目录、不存在于源目录的文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --delete source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>--delete&lt;/code>参数会使得&lt;code>destination&lt;/code>成为&lt;code>source&lt;/code>的一个镜像。&lt;/p>
&lt;h3 id="排除文件">排除文件
&lt;/h3>&lt;p>&lt;code>--exclude&lt;/code>参数&lt;/p>
&lt;p>有时，我们希望同步时排除某些文件或目录，这时可以用&lt;code>--exclude&lt;/code>参数指定排除模式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;*.txt&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude &lt;span class="s1">&amp;#39;*.txt&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令排除了所有 TXT 文件。&lt;/p>
&lt;p>注意，rsync 会同步以“点”开头的隐藏文件，如果要排除隐藏文件，可以这样写&lt;code>--exclude=&amp;quot;.*&amp;quot;&lt;/code>。&lt;/p>
&lt;p>如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude &lt;span class="s1">&amp;#39;dir1/*&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>多个排除模式，可以用多个&lt;code>--exclude&lt;/code>参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude &lt;span class="s1">&amp;#39;file1.txt&amp;#39;&lt;/span> --exclude &lt;span class="s1">&amp;#39;dir1/*&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个&lt;code>--exclude&lt;/code>参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude&lt;span class="o">={&lt;/span>&lt;span class="s1">&amp;#39;file1.txt&amp;#39;&lt;/span>,&lt;span class="s1">&amp;#39;dir1/*&amp;#39;&lt;/span>&lt;span class="o">}&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用&lt;code>--exclude-from&lt;/code>参数指定这个文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --exclude-from&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;exclude-file.txt&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>--include&lt;/code>参数&lt;/p>
&lt;p>&lt;code>--include&lt;/code>参数用来指定必须同步的文件模式，往往与&lt;code>--exclude&lt;/code>结合使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av --include&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*.txt&amp;#34;&lt;/span> --exclude&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span> source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定同步时，排除所有文件，但是会包括 TXT 文件。&lt;/p>
&lt;h3 id="远程同步">远程同步
&lt;/h3>&lt;h4 id="ssh-协议">SSH 协议
&lt;/h4>&lt;p>rsync 除了支持本地两个目录之间的同步，也支持远程同步。它可以将本地内容，同步到远程服务器：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av source/ username@remote_host:destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以将远程内容同步到本地：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av username@remote_host:source/ destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>rsync 默认使用 SSH 进行远程登录和数据传输。&lt;/p>
&lt;p>由于早期 rsync 不使用 SSH 协议，需要用&lt;code>-e&lt;/code>参数指定协议，后来才改的。所以，下面&lt;code>-e ssh&lt;/code>可以省略：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av -e ssh source/ user@remote_host:/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是，如果 ssh 命令有附加的参数，则必须使用&lt;code>-e&lt;/code>参数指定所要执行的 SSH 命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av -e &lt;span class="s1">&amp;#39;ssh -p 2234&amp;#39;&lt;/span> source/ user@remote_host:/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-e&lt;/code>参数指定 SSH 使用2234端口。&lt;/p>
&lt;h4 id="rsync-协议">rsync 协议
&lt;/h4>&lt;p>除了使用 SSH，如果另一台服务器安装并运行了 rsync 守护程序，则也可以用&lt;code>rsync://&lt;/code>协议（默认端口873）进行传输。具体写法是服务器与目标目录之间使用双冒号分隔&lt;code>::&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av source/ 192.168.122.32::module/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，上面地址中的&lt;code>module&lt;/code>并不是实际路径名，而是 rsync 守护程序指定的一个资源名，由管理员分配。&lt;/p>
&lt;p>如果想知道 rsync 守护程序分配的所有 module 列表，可以执行下面命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync rsync://192.168.122.32
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>rsync 协议除了使用双冒号，也可以直接用&lt;code>rsync://&lt;/code>协议指定地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -av source/ rsync://192.168.122.32/module/destination
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="增量备份">增量备份
&lt;/h3>&lt;p>rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。&lt;/p>
&lt;p>除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。&lt;/p>
&lt;p>具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。&lt;/p>
&lt;p>&lt;code>--link-dest&lt;/code>参数用来指定同步时的基准目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ rsync -a --delete --link-dest /compare/path /source/path /target/path
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>--link-dest&lt;/code>参数指定基准目录&lt;code>/compare/path&lt;/code>，然后源目录&lt;code>/source/path&lt;/code>跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录&lt;code>/target/path&lt;/code>。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。&lt;/p>
&lt;p>下面是一个脚本示例，备份用户的主目录：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A script to perform incremental backups using rsync&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o errexit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o nounset
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o pipefail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">SOURCE_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">HOME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/mnt/data/backups&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">DATETIME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>date &lt;span class="s1">&amp;#39;+%Y-%m-%d_%H:%M:%S&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">BACKUP_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">DATETIME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/latest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rsync -av --delete &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">SOURCE_DIR&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --link-dest &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --exclude&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;.cache&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -rf &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln -s &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BACKUP_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">LATEST_LINK&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面脚本中，每一次同步都会生成一个新目录&lt;code>${BACKUP_DIR}/${DATETIME}&lt;/code>，并将软链接&lt;code>${BACKUP_DIR}/latest&lt;/code>指向这个目录。下一次备份时，就将&lt;code>${BACKUP_DIR}/latest&lt;/code>作为基准目录，生成新的备份目录。最后，再将软链接&lt;code>${BACKUP_DIR}/latest&lt;/code>指向新的备份目录。&lt;/p>
&lt;h3 id="配置项-2">配置项
&lt;/h3>&lt;p>&lt;code>-a&lt;/code>、&lt;code>--archive&lt;/code>参数表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等，并且软链接也会同步过去。&lt;/p>
&lt;p>&lt;code>--append&lt;/code>参数指定文件接着上次中断的地方，继续传输。&lt;/p>
&lt;p>&lt;code>--append-verify&lt;/code>参数跟&lt;code>--append&lt;/code>参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。&lt;/p>
&lt;p>&lt;code>-b&lt;/code>、&lt;code>--backup&lt;/code>参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由&lt;code>--suffix&lt;/code>参数指定的文件后缀名，默认是&lt;code>~&lt;/code>。&lt;/p>
&lt;p>&lt;code>--backup-dir&lt;/code>参数指定文件备份时存放的目录，比如&lt;code>--backup-dir=/path/to/backups&lt;/code>。&lt;/p>
&lt;p>&lt;code>--bwlimit&lt;/code>参数指定带宽限制，默认单位是 KB/s，比如&lt;code>--bwlimit=100&lt;/code>。&lt;/p>
&lt;p>&lt;code>-c&lt;/code>、&lt;code>--checksum&lt;/code>参数改变&lt;code>rsync&lt;/code>的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。&lt;/p>
&lt;p>&lt;code>--delete&lt;/code>参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。&lt;/p>
&lt;p>&lt;code>-e&lt;/code>参数指定使用 SSH 协议传输数据。&lt;/p>
&lt;p>&lt;code>--exclude&lt;/code>参数指定排除不进行同步的文件，比如&lt;code>--exclude=&amp;quot;*.iso&amp;quot;&lt;/code>。&lt;/p>
&lt;p>&lt;code>--exclude-from&lt;/code>参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行。&lt;/p>
&lt;p>&lt;code>--existing&lt;/code>、&lt;code>--ignore-non-existing&lt;/code>参数表示不同步目标目录中不存在的文件和目录。&lt;/p>
&lt;p>&lt;code>-h&lt;/code>参数表示以人类可读的格式输出。&lt;/p>
&lt;p>&lt;code>-h&lt;/code>、&lt;code>--help&lt;/code>参数返回帮助信息。&lt;/p>
&lt;p>&lt;code>-i&lt;/code>参数表示输出源目录与目标目录之间文件差异的详细情况。&lt;/p>
&lt;p>&lt;code>--ignore-existing&lt;/code>参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。&lt;/p>
&lt;p>&lt;code>--include&lt;/code>参数指定同步时要包括的文件，一般与&lt;code>--exclude&lt;/code>结合使用。&lt;/p>
&lt;p>&lt;code>--link-dest&lt;/code>参数指定增量备份的基准目录。&lt;/p>
&lt;p>&lt;code>-m&lt;/code>参数指定不同步空目录。&lt;/p>
&lt;p>&lt;code>--max-size&lt;/code>参数设置传输的最大文件的大小限制，比如不超过200KB（&lt;code>--max-size='200k'&lt;/code>）。&lt;/p>
&lt;p>&lt;code>--min-size&lt;/code>参数设置传输的最小文件的大小限制，比如不小于10KB（&lt;code>--min-size=10k&lt;/code>）。&lt;/p>
&lt;p>&lt;code>-n&lt;/code>参数或&lt;code>--dry-run&lt;/code>参数模拟将要执行的操作，而并不真的执行。配合&lt;code>-v&lt;/code>参数使用，可以看到哪些内容会被同步过去。&lt;/p>
&lt;p>&lt;code>-P&lt;/code>参数是&lt;code>--progress&lt;/code>和&lt;code>--partial&lt;/code>这两个参数的结合。&lt;/p>
&lt;p>&lt;code>--partial&lt;/code>参数允许恢复中断的传输。不使用该参数时，&lt;code>rsync&lt;/code>会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与&lt;code>--append&lt;/code>或&lt;code>--append-verify&lt;/code>配合使用。&lt;/p>
&lt;p>&lt;code>--partial-dir&lt;/code>参数指定将传输到一半的文件保存到一个临时目录，比如&lt;code>--partial-dir=.rsync-partial&lt;/code>。一般需要与&lt;code>--append&lt;/code>或&lt;code>--append-verify&lt;/code>配合使用。&lt;/p>
&lt;p>&lt;code>--progress&lt;/code>参数表示显示进展。&lt;/p>
&lt;p>&lt;code>-r&lt;/code>参数表示递归，即包含子目录。&lt;/p>
&lt;p>&lt;code>--remove-source-files&lt;/code>参数表示传输成功后，删除发送方的文件。&lt;/p>
&lt;p>&lt;code>--size-only&lt;/code>参数表示只同步大小有变化的文件，不考虑文件修改时间的差异。&lt;/p>
&lt;p>&lt;code>--suffix&lt;/code>参数指定文件名备份时，对文件名添加的后缀，默认是&lt;code>~&lt;/code>。&lt;/p>
&lt;p>&lt;code>-u&lt;/code>、&lt;code>--update&lt;/code>参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件。&lt;/p>
&lt;p>&lt;code>-v&lt;/code>参数表示输出细节。&lt;code>-vv&lt;/code>表示输出更详细的信息，&lt;code>-vvv&lt;/code>表示输出最详细的信息。&lt;/p>
&lt;p>&lt;code>--version&lt;/code>参数返回 rsync 的版本。&lt;/p>
&lt;p>&lt;code>-z&lt;/code>参数指定同步时压缩数据。&lt;/p>
&lt;h3 id="参考链接-1">参考链接
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps" target="_blank" rel="noopener"
>How To Use Rsync to Sync Local and Remote Directories on a VPS&lt;/a>, Justin Ellingwood&lt;/li>
&lt;li>&lt;a class="link" href="https://www.howtoforge.com/mirroring_with_rsync" target="_blank" rel="noopener"
>Mirror Your Web Site With rsync&lt;/a>, Falko Timme&lt;/li>
&lt;li>&lt;a class="link" href="https://linuxconfig.org/examples-on-how-to-use-rsync-for-local-and-remote-data-backups-and-synchonization" target="_blank" rel="noopener"
>Examples on how to use Rsync&lt;/a>, Egidio Docile&lt;/li>
&lt;li>&lt;a class="link" href="https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux" target="_blank" rel="noopener"
>How to create incremental backups using rsync on Linux&lt;/a>, Egidio Docile&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="ssh-服务器">SSH 服务器
&lt;/h2>&lt;h3 id="简介-3">简介
&lt;/h3>&lt;p>SSH 的架构是服务器/客户端模式，两端运行的软件是不一样的。OpenSSH 的客户端软件是 ssh，服务器软件是 sshd。本章介绍 sshd 的各种知识。&lt;/p>
&lt;p>如果没有安装 sshd，可以用下面的命令安装:&lt;/p>
&lt;p>&lt;strong>在Linux上安装SSH服务端&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install openssh-server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo yum install openssh-server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install openssh-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>在macOS上安装SSH服务端&lt;/strong>&lt;/p>
&lt;p>macOS内置了OpenSSH服务端，但默认情况下它是关闭的。可以通过以下步骤启用：&lt;/p>
&lt;ol>
&lt;li>打开“系统偏好设置”。&lt;/li>
&lt;li>进入“共享”设置。&lt;/li>
&lt;li>勾选“远程登录”选项。&lt;/li>
&lt;li>选择允许哪些用户可以通过SSH登录。&lt;/li>
&lt;/ol>
&lt;p>之后，SSH服务端将开始运行，你可以使用SSH客户端连接到你的macOS机器。&lt;/p>
&lt;p>&lt;strong>在Windows上安装SSH服务端&lt;/strong>&lt;/p>
&lt;p>从Windows 10版本1809开始，Windows内置了OpenSSH Server。可以通过以下步骤启用：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开“设置” &amp;gt; “应用” &amp;gt; “可选功能”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向下滚动并点击“添加功能”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在列表中找到并安装“OpenSSH Server”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完成后，打开PowerShell并启动SSH服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Start-Service&lt;/span> &lt;span class="n">sshd&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使SSH服务在开机时自动启动：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Set-Service&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">sshd&lt;/span> &lt;span class="n">-StartupType&lt;/span> &lt;span class="s1">&amp;#39;Automatic&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果需要检查服务状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Get-Service&lt;/span> &lt;span class="n">-Name&lt;/span> &lt;span class="n">sshd&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>一般来说，sshd 安装后会跟着系统一起启动。如果当前 sshd 没有启动，可以用下面的命令启动。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令运行后，如果提示“sshd re-exec requires execution with an absolute path”，就需要使用绝对路径来启动。这是为了防止有人出于各种目的，放置同名软件在&lt;code>$PATH&lt;/code>变量指向的目录中，代替真正的 sshd:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Centos、Ubuntu、OS X&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ /usr/sbin/sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令运行以后，sshd 自动进入后台，所以命令后面不需要加上&lt;code>&amp;amp;&lt;/code>。&lt;/p>
&lt;p>除了直接运行可执行文件，也可以通过 Systemd 启动 sshd:&lt;/p>
&lt;p>启动SSH服务并使其在开机时自动启动：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>检查SSH服务的状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重启SSH服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># CentOS/RHEL/Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-配置文件">sshd 配置文件
&lt;/h3>&lt;p>sshd 的配置文件在&lt;code>/etc/ssh&lt;/code>目录，主配置文件是&lt;code>sshd_config&lt;/code>，此外还有一些安装时生成的密钥：&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/ssh/sshd_config&lt;/code>：配置文件&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_ecdsa_key&lt;/code>：ECDSA 私钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_ecdsa_key.pub&lt;/code>：ECDSA 公钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_key&lt;/code>：用于 SSH 1 协议版本的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_key.pub&lt;/code>：用于 SSH 1 协议版本的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_rsa_key&lt;/code>：用于 SSH 2 协议版本的 RSA 私钥。&lt;/li>
&lt;li>&lt;code>/etc/ssh/ssh_host_rsa_key.pub&lt;/code>：用于 SSH 2 协议版本的 RSA 公钥。&lt;/li>
&lt;li>&lt;code>/etc/pam.d/sshd&lt;/code>：PAM 配置文件。&lt;/li>
&lt;/ul>
&lt;p>注意，如果重装 sshd，上面这些密钥都会重新生成，导致客户端重新连接 ssh 服务器时，会跳出警告，拒绝连接。为了避免这种情况，可以在重装 sshd 时，先备份&lt;code>/etc/ssh&lt;/code>目录，重装后再恢复这个目录。&lt;/p>
&lt;p>配置文件&lt;code>sshd_config&lt;/code>的格式是，每个命令占据一行。每行都是配置项和对应的值，配置项的大小写不敏感，与值之间使用空格分隔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的配置命令指定，配置项&lt;code>Port&lt;/code>的值是&lt;code>2034&lt;/code>。&lt;code>Port&lt;/code>写成&lt;code>port&lt;/code>也可。&lt;/p>
&lt;p>配置文件还有另一种格式，就是配置项与值之间有一个等号，等号前后的空格可选。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置文件里面，&lt;code>#&lt;/code>开头的行表示注释。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 这是一行注释&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，注释只能放在一行的开头，不能放在一行的结尾。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">2034&lt;/span> &lt;span class="c1"># 此处不允许注释&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的写法是错误的。&lt;/p>
&lt;p>另外，空行等同于注释。&lt;/p>
&lt;p>sshd 启动时会自动读取默认的配置文件。如果希望使用其他的配置文件，可以用 sshd 命令的&lt;code>-f&lt;/code>参数指定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -f /usr/local/ssh/my_config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令指定 sshd 使用另一个配置文件&lt;code>my_config&lt;/code>。&lt;/p>
&lt;p>修改配置文件以后，可以用 sshd 命令的&lt;code>-t&lt;/code>（test）检查有没有语法错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置文件修改以后，并不会自动生效，必须重新启动 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-密钥">sshd 密钥
&lt;/h3>&lt;p>sshd 有自己的一对或多对密钥。&lt;strong>它使用密钥向客户端证明自己的身份&lt;/strong>。所有密钥都是公钥和私钥成对出现，公钥的文件名一般是私钥文件名加上后缀&lt;code>.pub&lt;/code>。&lt;/p>
&lt;p>DSA 格式的密钥文件默认为&lt;code>/etc/ssh/ssh_host_dsa_key&lt;/code>（公钥为&lt;code>ssh_host_dsa_key.pub&lt;/code>），RSA 格式的密钥为&lt;code>/etc/ssh/ssh_host_rsa_key&lt;/code>（公钥为&lt;code>ssh_host_rsa_key.pub&lt;/code>）。如果需要支持 SSH 1 协议，则必须有密钥&lt;code>/etc/ssh/ssh_host_key&lt;/code>。&lt;/p>
&lt;p>如果密钥不是默认文件，那么可以通过配置文件&lt;code>sshd_config&lt;/code>的&lt;code>HostKey&lt;/code>配置项指定。默认密钥的&lt;code>HostKey&lt;/code>设置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey for protocol version 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey /etc/ssh/ssh_host_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKeys for protocol version 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey /etc/ssh/ssh_host_rsa_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># HostKey /etc/ssh/ssh_host_dsa_key&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令前面的&lt;code>#&lt;/code>表示这些行都是注释，因为这是默认值，有没有这几行都一样。&lt;/p>
&lt;p>如果要修改密钥，就要去掉行首的&lt;code>#&lt;/code>，指定其他密钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">HostKey /usr/local/ssh/my_dsa_key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HostKey /usr/local/ssh/my_rsa_key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HostKey /usr/local/ssh/my_old_ssh1_key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-配置项">sshd 配置项
&lt;/h3>&lt;p>以下是&lt;code>/etc/ssh/sshd_config&lt;/code>文件里面的配置项：&lt;/p>
&lt;p>&lt;strong>AcceptEnv&lt;/strong>&lt;/p>
&lt;p>&lt;code>AcceptEnv&lt;/code>指定允许接受客户端通过&lt;code>SendEnv&lt;/code>命令发来的哪些环境变量，即允许客户端设置服务器的环境变量清单，变量名之间使用空格分隔（&lt;code>AcceptEnv PATH TERM&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>AllowGroups&lt;/strong>&lt;/p>
&lt;p>&lt;code>AllowGroups&lt;/code>指定允许登录的用户组（&lt;code>AllowGroups groupName&lt;/code>，多个组之间用空格分隔。如果不使用该项，则允许所有用户组登录。&lt;/p>
&lt;p>&lt;strong>AllowUsers&lt;/strong>&lt;/p>
&lt;p>&lt;code>AllowUsers&lt;/code>指定允许登录的用户，用户名之间使用空格分隔（&lt;code>AllowUsers user1 user2&lt;/code>），也可以使用多行&lt;code>AllowUsers&lt;/code>命令指定，用户名支持使用通配符。如果不使用该项，则允许所有用户登录。该项也可以使用&lt;code>用户名@域名&lt;/code>的格式（比如&lt;code>AllowUsers jones@example.com&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>AllowTcpForwarding&lt;/strong>&lt;/p>
&lt;p>&lt;code>AllowTcpForwarding&lt;/code>指定是否允许端口转发，默认值为&lt;code>yes&lt;/code>（&lt;code>AllowTcpForwarding yes&lt;/code>），&lt;code>local&lt;/code>表示只允许本地端口转发，&lt;code>remote&lt;/code>表示只允许远程端口转发。&lt;/p>
&lt;p>&lt;strong>AuthorizedKeysFile&lt;/strong>&lt;/p>
&lt;p>&lt;code>AuthorizedKeysFile&lt;/code>指定储存用户公钥的目录，默认是用户主目录的&lt;code>ssh/authorized_keys&lt;/code>目录（&lt;code>AuthorizedKeysFile .ssh/authorized_keys&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>Banner&lt;/strong>&lt;/p>
&lt;p>&lt;code>Banner&lt;/code>指定用户登录后，sshd 向其展示的信息文件（&lt;code>Banner /usr/local/etc/warning.txt&lt;/code>），默认不展示任何内容。&lt;/p>
&lt;p>&lt;strong>ChallengeResponseAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>ChallengeResponseAuthentication&lt;/code>指定是否使用“键盘交互”身份验证方案，默认值为&lt;code>yes&lt;/code>（&lt;code>ChallengeResponseAuthentication yes&lt;/code>）。&lt;/p>
&lt;p>从理论上讲，“键盘交互”身份验证方案可以向用户询问多重问题，但是实践中，通常仅询问用户密码。如果要完全禁用基于密码的身份验证，请将&lt;code>PasswordAuthentication&lt;/code>和&lt;code>ChallengeResponseAuthentication&lt;/code>都设置为&lt;code>no&lt;/code>。&lt;/p>
&lt;p>&lt;strong>Ciphers&lt;/strong>&lt;/p>
&lt;p>&lt;code>Ciphers&lt;/code>指定 sshd 可以接受的加密算法（&lt;code>Ciphers 3des-cbc&lt;/code>），多个算法之间使用逗号分隔。&lt;/p>
&lt;p>&lt;strong>ClientAliveCountMax&lt;/strong>&lt;/p>
&lt;p>&lt;code>ClientAliveCountMax&lt;/code>指定建立连接后，客户端失去响应时，服务器尝试连接的次数（&lt;code>ClientAliveCountMax 8&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>ClientAliveInterval&lt;/strong>&lt;/p>
&lt;p>&lt;code>ClientAliveInterval&lt;/code>指定允许客户端发呆的时间，单位为秒（&lt;code>ClientAliveInterval 180&lt;/code>）。如果这段时间里面，客户端没有发送任何信号，SSH 连接将关闭。&lt;/p>
&lt;p>&lt;strong>Compression&lt;/strong>&lt;/p>
&lt;p>&lt;code>Compression&lt;/code>指定客户端与服务器之间的数据传输是否压缩。默认值为&lt;code>yes&lt;/code>（&lt;code>Compression yes&lt;/code>）&lt;/p>
&lt;p>&lt;strong>DenyGroups&lt;/strong>&lt;/p>
&lt;p>&lt;code>DenyGroups&lt;/code>指定不允许登录的用户组（&lt;code>DenyGroups groupName&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>DenyUsers&lt;/strong>&lt;/p>
&lt;p>&lt;code>DenyUsers&lt;/code>指定不允许登录的用户（&lt;code>DenyUsers user1&lt;/code>），用户名之间使用空格分隔，也可以使用多行&lt;code>DenyUsers&lt;/code>命令指定。&lt;/p>
&lt;p>&lt;strong>FascistLogging&lt;/strong>&lt;/p>
&lt;p>SSH 1 版本专用，指定日志输出全部 Debug 信息（&lt;code>FascistLogging yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>HostKey&lt;/strong>&lt;/p>
&lt;p>&lt;code>HostKey&lt;/code>指定 sshd 服务器的密钥，详见前文。&lt;/p>
&lt;p>&lt;strong>KeyRegenerationInterval&lt;/strong>&lt;/p>
&lt;p>&lt;code>KeyRegenerationInterval&lt;/code>指定 SSH 1 版本的密钥重新生成时间间隔，单位为秒，默认是3600秒（&lt;code>KeyRegenerationInterval 3600&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>ListenAddress&lt;/strong>&lt;/p>
&lt;p>&lt;code>ListenAddress&lt;/code>指定 sshd 监听的本机 IP 地址，即 sshd 启用的 IP 地址，默认是 0.0.0.0（&lt;code>ListenAddress 0.0.0.0&lt;/code>）表示在本机所有网络接口启用。可以改成只在某个网络接口启用（比如&lt;code>ListenAddress 192.168.10.23&lt;/code>），也可以指定某个域名启用（比如&lt;code>ListenAddress server.example.com&lt;/code>）。&lt;/p>
&lt;p>如果要监听多个指定的 IP 地址，可以使用多行&lt;code>ListenAddress&lt;/code>命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ListenAddress 172.16.1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ListenAddress 192.168.0.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>LoginGraceTime&lt;/strong>&lt;/p>
&lt;p>&lt;code>LoginGraceTime&lt;/code>指定允许客户端登录时发呆的最长时间，比如用户迟迟不输入密码，连接就会自动断开，单位为秒（&lt;code>LoginGraceTime 60&lt;/code>）。如果设为&lt;code>0&lt;/code>，就表示没有限制。&lt;/p>
&lt;p>&lt;strong>LogLevel&lt;/strong>&lt;/p>
&lt;p>&lt;code>LogLevel&lt;/code>指定日志的详细程度，可能的值依次为&lt;code>QUIET&lt;/code>、&lt;code>FATAL&lt;/code>、&lt;code>ERROR&lt;/code>、&lt;code>INFO&lt;/code>、&lt;code>VERBOSE&lt;/code>、&lt;code>DEBUG&lt;/code>、&lt;code>DEBUG1&lt;/code>、&lt;code>DEBUG2&lt;/code>、&lt;code>DEBUG3&lt;/code>，默认为&lt;code>INFO&lt;/code>（&lt;code>LogLevel INFO&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>MACs&lt;/strong>&lt;/p>
&lt;p>&lt;code>MACs&lt;/code>指定sshd 可以接受的数据校验算法（&lt;code>MACs hmac-sha1&lt;/code>），多个算法之间使用逗号分隔。&lt;/p>
&lt;p>&lt;strong>MaxAuthTries&lt;/strong>&lt;/p>
&lt;p>&lt;code>MaxAuthTries&lt;/code>指定允许 SSH 登录的最大尝试次数（&lt;code>MaxAuthTries 3&lt;/code>），如果密码输入错误达到指定次数，SSH 连接将关闭。&lt;/p>
&lt;p>&lt;strong>MaxStartups&lt;/strong>&lt;/p>
&lt;p>&lt;code>MaxStartups&lt;/code>指定允许同时并发的 SSH 连接数量（MaxStartups）。如果设为&lt;code>0&lt;/code>，就表示没有限制。&lt;/p>
&lt;p>这个属性也可以设为&lt;code>A:B:C&lt;/code>的形式，比如&lt;code>MaxStartups 10:50:20&lt;/code>，表示如果达到10个并发连接，后面的连接将有50%的概率被拒绝；如果达到20个并发连接，则后面的连接将100%被拒绝。&lt;/p>
&lt;p>&lt;strong>PasswordAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>PasswordAuthentication&lt;/code>指定是否允许密码登录，默认值为&lt;code>yes&lt;/code>（&lt;code>PasswordAuthentication yes&lt;/code>），建议改成&lt;code>no&lt;/code>（禁止密码登录，只允许密钥登录）。&lt;/p>
&lt;p>&lt;strong>PermitEmptyPasswords&lt;/strong>&lt;/p>
&lt;p>&lt;code>PermitEmptyPasswords&lt;/code>指定是否允许空密码登录，即用户的密码是否可以为空，默认为&lt;code>yes&lt;/code>（&lt;code>PermitEmptyPasswords yes&lt;/code>），建议改成&lt;code>no&lt;/code>（禁止无密码登录）。&lt;/p>
&lt;p>&lt;strong>PermitRootLogin&lt;/strong>&lt;/p>
&lt;p>&lt;code>PermitRootLogin&lt;/code>指定是否允许根用户登录，默认为&lt;code>yes&lt;/code>（&lt;code>PermitRootLogin yes&lt;/code>），建议改成&lt;code>no&lt;/code>（禁止根用户登录）。&lt;/p>
&lt;p>还有一种写法是写成&lt;code>prohibit-password&lt;/code>，表示 root 用户不能用密码登录，但是可以用密钥登录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">PermitRootLogin prohibit-password
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>PermitUserEnvironment&lt;/strong>&lt;/p>
&lt;p>&lt;code>PermitUserEnvironment&lt;/code>指定是否允许 sshd 加载客户端的&lt;code>~/.ssh/environment&lt;/code>文件和&lt;code>~/.ssh/authorized_keys&lt;/code>文件里面的&lt;code>environment= options&lt;/code>环境变量设置。默认值为&lt;code>no&lt;/code>（&lt;code>PermitUserEnvironment no&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>Port&lt;/strong>&lt;/p>
&lt;p>&lt;code>Port&lt;/code>指定 sshd 监听的端口，即客户端连接的端口，默认是22（&lt;code>Port 22&lt;/code>）。出于安全考虑，可以改掉这个端口（比如&lt;code>Port 8822&lt;/code>）。&lt;/p>
&lt;p>配置文件可以使用多个&lt;code>Port&lt;/code>命令，同时监听多个端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">22&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">443&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Port &lt;span class="m">8080&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的示例表示同时监听4个端口。&lt;/p>
&lt;p>&lt;strong>PrintMotd&lt;/strong>&lt;/p>
&lt;p>&lt;code>PrintMotd&lt;/code>指定用户登录后，是否向其展示系统的 motd（Message of the day）的信息文件&lt;code>/etc/motd&lt;/code>。该文件用于通知所有用户一些重要事项，比如系统维护时间、安全问题等等。默认值为&lt;code>yes&lt;/code>（&lt;code>PrintMotd yes&lt;/code>），由于 Shell 一般会展示这个信息文件，所以这里可以改为&lt;code>no&lt;/code>。&lt;/p>
&lt;p>&lt;strong>PrintLastLog&lt;/strong>&lt;/p>
&lt;p>&lt;code>PrintLastLog&lt;/code>指定是否打印上一次用户登录时间，默认值为&lt;code>yes&lt;/code>（&lt;code>PrintLastLog yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>Protocol&lt;/strong>&lt;/p>
&lt;p>&lt;code>Protocol&lt;/code>指定 sshd 使用的协议。&lt;code>Protocol 1&lt;/code>表示使用 SSH 1 协议，建议改成&lt;code>Protocol 2&lt;/code>（使用 SSH 2 协议）。&lt;code>Protocol 2,1&lt;/code>表示同时支持两个版本的协议。&lt;/p>
&lt;p>&lt;strong>PubkeyAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>PubkeyAuthentication&lt;/code>指定是否允许公钥登录，默认值为&lt;code>yes&lt;/code>（&lt;code>PubkeyAuthentication yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>QuietMode&lt;/strong>&lt;/p>
&lt;p>SSH 1 版本专用，指定日志只输出致命的错误信息（&lt;code>QuietMode yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>RSAAuthentication&lt;/strong>&lt;/p>
&lt;p>&lt;code>RSAAuthentication&lt;/code>指定允许 RSA 认证，默认值为&lt;code>yes&lt;/code>（&lt;code>RSAAuthentication yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>ServerKeyBits&lt;/strong>&lt;/p>
&lt;p>&lt;code>ServerKeyBits&lt;/code>指定 SSH 1 版本的密钥重新生成时的位数，默认是768（&lt;code>ServerKeyBits 768&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>StrictModes&lt;/strong>&lt;/p>
&lt;p>&lt;code>StrictModes&lt;/code>指定 sshd 是否检查用户的一些重要文件和目录的权限。默认为&lt;code>yes&lt;/code>（&lt;code>StrictModes yes&lt;/code>），即对于用户的 SSH 配置文件、密钥文件和所在目录，SSH 要求拥有者必须是根用户或用户本人，用户组和其他人的写权限必须关闭。&lt;/p>
&lt;p>&lt;strong>SyslogFacility&lt;/strong>&lt;/p>
&lt;p>&lt;code>SyslogFacility&lt;/code>指定 Syslog 如何处理 sshd 的日志，默认是 Auth（&lt;code>SyslogFacility AUTH&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>TCPKeepAlive&lt;/strong>&lt;/p>
&lt;p>&lt;code>TCPKeepAlive&lt;/code>指定打开 sshd 跟客户端 TCP 连接的 keepalive 参数（&lt;code>TCPKeepAlive yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>UseDNS&lt;/strong>&lt;/p>
&lt;p>&lt;code>UseDNS&lt;/code>指定用户 SSH 登录一个域名时，服务器是否使用 DNS，确认该域名对应的 IP 地址包含本机（&lt;code>UseDNS yes&lt;/code>）。打开该选项意义不大，而且如果 DNS 更新不及时，还有可能误判，建议关闭。&lt;/p>
&lt;p>&lt;strong>UseLogin&lt;/strong>&lt;/p>
&lt;p>&lt;code>UseLogin&lt;/code>指定用户认证内部是否使用&lt;code>/usr/bin/login&lt;/code>替代 SSH 工具，默认为&lt;code>no&lt;/code>（&lt;code>UseLogin no&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>UserPrivilegeSeparation&lt;/strong>&lt;/p>
&lt;p>&lt;code>UserPrivilegeSeparation&lt;/code>指定用户认证通过以后，使用另一个子线程处理用户权限相关的操作，这样有利于提高安全性。默认值为&lt;code>yes&lt;/code>（&lt;code>UsePrivilegeSeparation yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>VerboseMode&lt;/strong>&lt;/p>
&lt;p>SSH 2 版本专用，指定日志输出详细的 Debug 信息（&lt;code>VerboseMode yes&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>X11Forwarding&lt;/strong>&lt;/p>
&lt;p>&lt;code>X11Forwarding&lt;/code>指定是否打开 X window 的转发，默认值为 no（&lt;code>X11Forwarding no&lt;/code>）。&lt;/p>
&lt;p>修改配置文件以后，可以使用下面的命令验证，配置文件是否有语法错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>新的配置文件生效，必须重启 sshd。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sshd-的命令行配置项">sshd 的命令行配置项
&lt;/h3>&lt;p>sshd 命令有一些配置项。这些配置项在调用时指定，可以覆盖配置文件的设置：&lt;/p>
&lt;p>（1）&lt;code>-d&lt;/code>&lt;/p>
&lt;p>&lt;code>-d&lt;/code>参数用于显示 debug 信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）&lt;code>-D&lt;/code>&lt;/p>
&lt;p>&lt;code>-D&lt;/code>参数指定 sshd 不作为后台守护进程运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -D
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）&lt;code>-e&lt;/code>&lt;/p>
&lt;p>&lt;code>-e&lt;/code>参数将 sshd 写入系统日志 syslog 的内容导向标准错误（standard error）。&lt;/p>
&lt;p>（4）&lt;code>-f&lt;/code>&lt;/p>
&lt;p>&lt;code>-f&lt;/code>参数指定配置文件的位置。&lt;/p>
&lt;p>（5）&lt;code>-h&lt;/code>&lt;/p>
&lt;p>&lt;code>-h&lt;/code>参数用于指定密钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -h /usr/local/ssh/my_rsa_key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（6）&lt;code>-o&lt;/code>&lt;/p>
&lt;p>&lt;code>-o&lt;/code>参数指定配置文件的一个配置项和对应的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -o &lt;span class="s2">&amp;#34;Port 2034&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置项和对应值之间，可以使用等号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -o &lt;span class="s2">&amp;#34;Port = 2034&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果省略等号前后的空格，也可以不使用引号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -o &lt;span class="nv">Port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-o&lt;/code>参数可以多个一起使用，用来指定多个配置关键字。&lt;/p>
&lt;p>（7）&lt;code>-p&lt;/code>&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数指定 sshd 的服务端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -p &lt;span class="m">2034&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令指定 sshd 在&lt;code>2034&lt;/code>端口启动。&lt;/p>
&lt;p>&lt;code>-p&lt;/code>参数可以指定多个端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sshd -p &lt;span class="m">2222&lt;/span> -p &lt;span class="m">3333&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（8）&lt;code>-t&lt;/code>&lt;/p>
&lt;p>&lt;code>-t&lt;/code>参数检查配置文件的语法是否正确。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-日志">SSH 日志
&lt;/h2>&lt;p>SSH 在服务器端可以生成日志，记录登录当前服务器的情况。&lt;/p>
&lt;p>SSH 日志是写在系统日志当中的，查看的时候需要从系统日志里面找到跟 SSH 相关的记录。&lt;/p>
&lt;h3 id="journalctl-命令">journalctl 命令
&lt;/h3>&lt;p>如果系统使用 Systemd，可以使用&lt;code>journalctl&lt;/code>命令查看日志:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Mar &lt;span class="m">25&lt;/span> 20:25:36 web0 sshd&lt;span class="o">[&lt;/span>14144&lt;span class="o">]&lt;/span>: Accepted publickey &lt;span class="k">for&lt;/span> ubuntu from 10.103.160.144 port &lt;span class="m">59200&lt;/span> ssh2: RSA SHA256:l/zFNib1vJ+64nxLB4N9KaVhBEMf8arbWGxHQg01SW8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mar &lt;span class="m">25&lt;/span> 20:25:36 web0 sshd&lt;span class="o">[&lt;/span>14144&lt;span class="o">]&lt;/span>: pam_unix&lt;span class="o">(&lt;/span>sshd:session&lt;span class="o">)&lt;/span>: session opened &lt;span class="k">for&lt;/span> user ubuntu by &lt;span class="o">(&lt;/span>&lt;span class="nv">uid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mar &lt;span class="m">25&lt;/span> 20:39:12 web0 sshd&lt;span class="o">[&lt;/span>14885&lt;span class="o">]&lt;/span>: pam_unix&lt;span class="o">(&lt;/span>sshd:session&lt;span class="o">)&lt;/span>: session closed &lt;span class="k">for&lt;/span> user ubuntu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面示例中，返回的日志每一行就是一次登录尝试，按照从早到晚的顺序，其中包含了登录失败的尝试。&lt;code>-u&lt;/code>参数是 Unit 单元的意思，&lt;code>-u ssh&lt;/code>就是查看 SSH 单元，有的发行版需要写成&lt;code>-u sshd&lt;/code>。&lt;/p>
&lt;p>&lt;code>-b0&lt;/code>参数可以查看自从上次登录后的日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh -b0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-r&lt;/code>参数表示逆序输出，最新的在前面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh -b0 -r
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>since&lt;/code>和&lt;code>until&lt;/code>参数可以指定日志的时间范围。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --since yesterday &lt;span class="c1"># 查看昨天的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --since -3d --until -2d &lt;span class="c1"># 查看三天前的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --since -1h &lt;span class="c1"># 查看上个小时的日志&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ journalctl -u ssh --until &lt;span class="s2">&amp;#34;2022-03-12 07:00:00&amp;#34;&lt;/span> &lt;span class="c1"># 查看截至到某个时间点的日志&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令查看实时日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ journalctl -fu ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="其他命令">其他命令
&lt;/h3>&lt;p>如果系统没有使用 Systemd，可以在&lt;code>/var/log/auth.log&lt;/code>文件中找到 sshd 的日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo grep sshd /var/log/auth.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令查看最后 500 行里面的 sshd 条目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo tail -n &lt;span class="m">500&lt;/span> /var/log/auth.log &lt;span class="p">|&lt;/span> grep sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-f&lt;/code>参数可以实时跟踪日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo tail -f -n &lt;span class="m">500&lt;/span> /var/log/auth.log &lt;span class="p">|&lt;/span> grep sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果只是想看谁登录了系统，而不是深入查看所有细节，可以使用&lt;code>lastlog&lt;/code>命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ lastlog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="日志设置">日志设置
&lt;/h3>&lt;p>sshd 的配置文件&lt;code>/etc/ssh/sshd_config&lt;/code>，可以调整日志级别。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">LogLevel VERBOSE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果为了调试，可以将日志调整为 DEBUG。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> LogLevel DEBUG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="fail2ban-教程">Fail2Ban 教程
&lt;/h2>&lt;h3 id="简介-4">简介
&lt;/h3>&lt;p>Fail2Ban 是一个 Linux 系统的应用软件，用来防止系统入侵，主要是防止暴力破解系统密码。它是用 Python 开发的。&lt;/p>
&lt;p>它主要通过监控日志文件（比如&lt;code>/var/log/auth.log&lt;/code>、&lt;code>/var/log/apache/access.log&lt;/code>等）来生效。一旦发现恶意攻击的登录请求，它会封锁对方的 IP 地址，使得对方无法再发起请求。&lt;/p>
&lt;p>Fail2Ban 可以防止有人反复尝试 SSH 密码登录，但是如果 SSH 采用的是密钥登录，禁止了密码登录，就不需要 Fail2Ban 来保护。&lt;/p>
&lt;p>Fail2Ban 的安装命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ubuntu &amp;amp; Debian&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install fail2ban
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Fedora&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install epel-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo dnf install fail2ban
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Centos &amp;amp; Red hat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install epel-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yum install fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装后，使用下面的命令查看 Fail2Ban 的状态：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ systemctl status fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果没有启动，就启动 Fail2Ban：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo systemctl start fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重新启动 Fail2Ban：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置 Fail2Ban 重启后自动运行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo systemctl &lt;span class="nb">enable&lt;/span> fail2ban
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="fail2ban-client">fail2ban-client
&lt;/h3>&lt;p>Fail2Ban 自带一个客户端 fail2ban-client，用来操作 Fail2Ban：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ fail2ban-client
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令会输出 fail2ban-client 所有的用法。&lt;/p>
&lt;p>下面的命令查看激活的监控目标(需要额外配置，后面介绍）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ fail2ban-client status
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>- Number of jail: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>- Jail list: sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令查看某个监控目标（这里是 sshd）的运行情况：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo fail2ban-client status sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Status &lt;span class="k">for&lt;/span> the jail: sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>- Filter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>- Currently failed: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>- Total failed: &lt;span class="m">9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="sb">`&lt;/span>- Journal matches: &lt;span class="nv">_SYSTEMD_UNIT&lt;/span>&lt;span class="o">=&lt;/span>sshd.service + &lt;span class="nv">_COMM&lt;/span>&lt;span class="o">=&lt;/span>sshd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>- Actions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span>- Currently banned: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span>- Total banned: &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`&lt;/span>- Banned IP list: 0.0.0.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令输出一个简要的版本，包括所有监控目标被封的 IP 地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo fail2ban-client banned
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[{&lt;/span>&lt;span class="s1">&amp;#39;sshd&amp;#39;&lt;/span>: &lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;192.168.100.50&amp;#39;&lt;/span>&lt;span class="o">]}&lt;/span>, &lt;span class="o">{&lt;/span>&lt;span class="s1">&amp;#39;apache-auth&amp;#39;&lt;/span>: &lt;span class="o">[]}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令可以解封某个 IP 地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo fail2ban-client &lt;span class="nb">set&lt;/span> sshd unbanip 192.168.1.69
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>手动禁止一个 IP 地址：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo fail2ban-client &lt;span class="nb">set&lt;/span> sshd banip &amp;lt;IP地址&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="配置">配置
&lt;/h3>&lt;h4 id="主配置文件">主配置文件
&lt;/h4>&lt;p>Fail2Ban 主配置文件是在&lt;code>/etc/fail2ban/fail2ban.conf&lt;/code>，可以新建一份副本&lt;code>/etc/fail2ban/fail2ban.local&lt;/code>作为本地配置文件，修改都针对本地配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是设置 Fail2Ban 的日志位置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">Definition&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">logtarget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="k">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nb">log&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">fail2ban&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">fail2ban&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改配置以后，需要重新启动&lt;code>fail2ban.service&lt;/code>，让其生效。&lt;/p>
&lt;h4 id="封禁配置">封禁配置
&lt;/h4>&lt;p>Fail2Ban 封禁行为的配置文件是&lt;code>/etc/fail2ban/jail.conf&lt;/code>。为了便于修改，可以把它复制一份&lt;code>/etc/fail2ban/jail.local&lt;/code>本地配置文件，后面的修改都针对&lt;code>jail.local&lt;/code>这个文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以在目录&lt;code>/etc/fail2ban/jail.d&lt;/code>里面，新建单独的子配置文件，比如&lt;code>/etc/fail2ban/jail.d/sshd.local&lt;/code>。&lt;/p>
&lt;p>同样地，修改配置以后，需要重新启动&lt;code>fail2ban.service&lt;/code>，让其生效。&lt;/p>
&lt;p>配置文件里面，&lt;code>[DEFAULT]&lt;/code>标题行表示对于所有封禁目标生效。举例来说，如果封禁时间修改为1天，&lt;code>/etc/fail2ban/jail.local&lt;/code>里面可以写成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">DEFAULT]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">bantime = 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果某人被封时，对站长发送邮件通知，可以如下设置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">DEFAULT]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">destemail = yourname@example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">sender = yourname@example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to ban &amp;amp; send an e-mail with whois report to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action = %(action_mw)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># same as action_mw but also send relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c">#action = %(action_mwl)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果配置写在其他标题行下，就表示只对该封禁目标生效，比如写在&lt;code>[sshd]&lt;/code>下面，就表示只对 sshd 生效。&lt;/p>
&lt;p>默认情况下，Fail2Ban 对&lt;strong>各种服务都是关闭的&lt;/strong>，如果要针对某一项服务开启，需要在配置文件里面声明。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[sshd]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">enabled = true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面声明表示，Fail2Ban 对 sshd 开启。&lt;/p>
&lt;h4 id="配置项-3">配置项
&lt;/h4>&lt;p>下面是配置文件&lt;code>jail.local&lt;/code>的配置项含义，所有配置项的格式都是&lt;code>key=value&lt;/code>。&lt;/p>
&lt;p>（1）bantime&lt;/p>
&lt;p>封禁的时间长度，单位&lt;code>m&lt;/code>表示分钟，&lt;code>d&lt;/code>表示天，&lt;code>h&lt;/code>表示小时，如果不写单位，则表示秒。Fail2Ban 默认封禁10分钟（10m 或 600）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bantime = 10m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（2）findtime&lt;/p>
&lt;p>登录失败计算的时间长度，单位&lt;code>m&lt;/code>表示分钟，&lt;code>d&lt;/code>表示天，如果不写单位，则表示秒。Fail2Ban 默认封禁 10 分钟内登录 5 次失败的客户端。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">findtime = 10m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">maxretry = 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（3）maxretry&lt;/p>
&lt;p>尝试登录的最大失败次数。&lt;/p>
&lt;p>（4）destemail&lt;/p>
&lt;p>接受通知的邮件地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">destemail = root@localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sender = root@&amp;lt;fq-hostname&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mta = sendmail
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（5）sendername&lt;/p>
&lt;p>通知邮件的“发件人”字段的值。&lt;/p>
&lt;p>（6）mta&lt;/p>
&lt;p>发送邮件的邮件服务，默认是&lt;code>sendmail&lt;/code>。&lt;/p>
&lt;p>（7）action&lt;/p>
&lt;p>封禁时采取的动作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[DEFAULT]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">action = $(action_)s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的&lt;code>action_&lt;/code>是默认动作，表示拒绝封禁对象的流量，直到封禁期结束。&lt;/p>
&lt;p>下面是 Fail2Ban 提供的一些其他动作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># ban &amp;amp; send an e-mail with whois report to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_mw = %(action_)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">%(mta)s-whois[sender=&amp;#34;%(sender)s&amp;#34;, dest=&amp;#34;%(destemail)s&amp;#34;, protocol=&amp;#34;%(protocol)s&amp;#34;, chain=&amp;#34;%(chain)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># ban &amp;amp; send an e-mail with whois report and relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_mwl = %(action_)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">%(mta)s-whois-lines[sender=&amp;#34;%(sender)s&amp;#34;, dest=&amp;#34;%(destemail)s&amp;#34;, logpath=&amp;#34;%(logpath)s&amp;#34;, chain=&amp;#34;%(chain)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># See the IMPORTANT note in action.d/xarf-login-attack for when to use this action&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c">#&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># ban &amp;amp; send a xarf e-mail to abuse contact of IP address and include relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_xarf = %(action_)s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">xarf-login-attack[service=%(__name__)s, sender=&amp;#34;%(sender)s&amp;#34;, logpath=&amp;#34;%(logpath)s&amp;#34;, port=&amp;#34;%(port)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># ban IP on CloudFlare &amp;amp; send an e-mail with whois report and relevant log lines&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># to the destemail.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">action_cf_mwl = cloudflare[cfuser=&amp;#34;%(cfemail)s&amp;#34;, cftoken=&amp;#34;%(cfapikey)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">%(mta)s-whois-lines[sender=&amp;#34;%(sender)s&amp;#34;, dest=&amp;#34;%(destemail)s&amp;#34;, logpath=&amp;#34;%(logpath)s&amp;#34;, chain=&amp;#34;%(chain)s&amp;#34;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（8）ignoreip&lt;/p>
&lt;p>Fail2Ban 可以忽视的可信 IP 地址。多个 IP 地址之间使用空格分隔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ignoreip = 127.0.0.1/8 192.168.1.10 192.168.1.20
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（9）port&lt;/p>
&lt;p>指定要监控的端口。可以设为任何端口号或服务名称，比如&lt;code>ssh&lt;/code>、&lt;code>22&lt;/code>、&lt;code>2200&lt;/code>等。&lt;/p>
&lt;h3 id="ssh-配置">ssh 配置
&lt;/h3>&lt;p>下面是 sshd 的设置范例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="l">sshd]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">enabled = true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">port = ssh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">filter = sshd&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">banaction = iptables&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">backend = systemd&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">maxretry = 5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">findtime = 1d&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">bantime = 2w&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">ignoreip = 127.0.0.1/8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先需要注意，为了让 Fail2Ban 能够完整发挥作用，最好在&lt;code>/etc/ssh/sshd_config&lt;/code>里面设置&lt;code>LogLevel VERBOSE&lt;/code>，保证日志有足够的信息。&lt;/p>
&lt;hr>
&lt;h2 id="ssh-端口转发-">SSH 端口转发: ?
&lt;/h2>&lt;h3 id="简介-5">简介
&lt;/h3>&lt;p>SSH 除了登录服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的通信加密跳板，使得原本不加密的通信变成加密通信。这个功能称为&lt;strong>端口转发&lt;/strong>（port forwarding），又称 &lt;strong>SSH 隧道&lt;/strong>（tunnel）。&lt;/p>
&lt;p>端口转发有两个主要作用：&lt;/p>
&lt;p>（1）将不加密的数据放在 SSH 安全连接里面传输，使得原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。&lt;/p>
&lt;p>（2）作为数据通信的加密跳板，绕过网络防火墙。&lt;/p>
&lt;p>端口转发有三种使用方法：动态转发，本地转发，远程转发。下面逐一介绍。&lt;/p>
&lt;h3 id="动态转发">动态转发
&lt;/h3>&lt;p>动态转发指的是，本机与 SSH 服务器之间创建了一个加密连接，然后本机内部针对某个端口的通信，都通过这个加密连接转发。它的一个使用场景就是，访问所有外部网站，都通过 SSH 转发。&lt;/p>
&lt;p>动态转发需要把本地端口绑定到 SSH 服务器。至于 SSH 服务器要去访问哪一个网站，完全是动态的，取决于原始通信，所以叫做动态转发。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -D local-port tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-D&lt;/code>表示动态转发，&lt;code>local-port&lt;/code>是本地端口，&lt;code>tunnel-host&lt;/code>是 SSH 服务器，&lt;code>-N&lt;/code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。&lt;/p>
&lt;p>举例来说，如果本地端口是&lt;code>2121&lt;/code>，那么动态转发的命令就是下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -D &lt;span class="m">2121&lt;/span> tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，这种转发采用了 SOCKS5 协议。访问外部网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。&lt;/p>
&lt;p>下面是 SSH 隧道建立后的一个使用实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl -x socks5://localhost:2121 http://www.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，curl 的&lt;code>-x&lt;/code>参数指定代理服务器，即通过 SOCKS5 协议的本地&lt;code>2121&lt;/code>端口，访问&lt;code>http://www.example.com&lt;/code>。&lt;/p>
&lt;p>如果经常使用动态转发，可以将设置写入 SSH 客户端的用户个人配置文件（&lt;code>~/.ssh/config&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">DynamicForward tunnel-host:local-port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="本地转发">本地转发
&lt;/h3>&lt;p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。&lt;/p>
&lt;p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ssh -L local-port:target-host:target-port tunnel-host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-L&lt;/code>参数表示本地转发，&lt;code>local-port&lt;/code>是本地端口，&lt;code>target-host&lt;/code>是你想要访问的目标服务器，&lt;code>target-port&lt;/code>是目标服务器的端口，&lt;code>tunnel-host&lt;/code>是 SSH 跳板机。&lt;/p>
&lt;p>举例来说，现在有一台 SSH 跳板机&lt;code>tunnel-host&lt;/code>，我们想要通过这台机器，在本地&lt;code>2121&lt;/code>端口与目标网站&lt;code>www.example.com&lt;/code>的80端口之间建立 SSH 隧道，就可以写成下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 2121:www.example.com:80 tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，访问本机的&lt;code>2121&lt;/code>端口，就是访问&lt;code>www.example.com&lt;/code>的80端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl http://localhost:2121
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，本地端口转发采用 HTTP 协议，不用转成 SOCKS5 协议。&lt;/p>
&lt;p>另一个例子是加密访问邮件获取协议 POP3。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 1100:mail.example.com:110 mail.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将本机的1100端口，绑定邮件服务器&lt;code>mail.example.com&lt;/code>的110端口（POP3 协议的默认端口）。端口转发建立以后，POP3 邮件客户端只需要访问本机的1100端口，请求就会通过 SSH 跳板机（这里是&lt;code>mail.example.com&lt;/code>），自动转发到&lt;code>mail.example.com&lt;/code>的110端口。&lt;/p>
&lt;p>上面这种情况有一个前提条件，就是&lt;code>mail.example.com&lt;/code>必须运行 SSH 服务器。否则，就必须通过另一台 SSH 服务器中介，执行的命令要改成下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 1100:mail.example.com:110 other.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，本机的1100端口还是绑定&lt;code>mail.example.com&lt;/code>的110端口，但是由于&lt;code>mail.example.com&lt;/code>没有运行 SSH 服务器，所以必须通过&lt;code>other.example.com&lt;/code>中介。本机的 POP3 请求通过1100端口，先发给&lt;code>other.example.com&lt;/code>的22端口（sshd 默认端口），再由后者转给&lt;code>mail.example.com&lt;/code>，得到数据以后再原路返回。&lt;/p>
&lt;p>注意，采用上面的中介方式，只有本机到&lt;code>other.example.com&lt;/code>的这一段是加密的，&lt;code>other.example.com&lt;/code>到&lt;code>mail.example.com&lt;/code>的这一段并不加密。&lt;/p>
&lt;p>这个命令最好加上&lt;code>-N&lt;/code>参数，表示不在 SSH 跳板机执行远程命令，让 SSH 只充当隧道。另外还有一个&lt;code>-f&lt;/code>参数表示 SSH 连接在后台运行。&lt;/p>
&lt;p>如果经常使用本地转发，可以将设置写入 SSH 客户端的用户个人配置文件（&lt;code>~/.ssh/config&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host test.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LocalForward client-IP:client-port server-IP:server-port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="远程转发">远程转发
&lt;/h3>&lt;p>远程转发指的是在远程 SSH 服务器建立的转发规则。&lt;/p>
&lt;p>它跟本地转发正好反过来。建立本地计算机到远程计算机的 SSH 隧道以后，本地转发是通过本地计算机访问远程计算机，而远程转发则是通过远程计算机访问本地计算机。它的命令格式如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R remote-port:target-host:target-port -N remotehost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令中，&lt;code>-R&lt;/code>参数表示远程端口转发，&lt;code>remote-port&lt;/code>是远程计算机的端口，&lt;code>target-host&lt;/code>和&lt;code>target-port&lt;/code>是目标服务器及其端口，&lt;code>remotehost&lt;/code>是远程计算机。&lt;/p>
&lt;p>远程转发主要针对内网的情况。下面举两个例子:&lt;/p>
&lt;p>第一个例子是内网某台服务器&lt;code>localhost&lt;/code>在 80 端口开了一个服务，可以通过远程转发将这个 80 端口，映射到具有公网 IP 地址的&lt;code>my.public.server&lt;/code>服务器的 8080 端口，使得访问&lt;code>my.public.server:8080&lt;/code>这个地址，就可以访问到那台内网服务器的 80 端口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R 8080:localhost:80 -N my.public.server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令是在内网&lt;code>localhost&lt;/code>服务器上执行，建立从&lt;code>localhost&lt;/code>到&lt;code>my.public.server&lt;/code>的 SSH 隧道。运行以后，用户访问&lt;code>my.public.server:8080&lt;/code>，就会自动映射到&lt;code>localhost:80&lt;/code>。&lt;/p>
&lt;p>第二个例子是本地计算机&lt;code>local&lt;/code>在外网，SSH 跳板机和目标服务器&lt;code>my.private.server&lt;/code>都在内网，必须通过 SSH 跳板机才能访问目标服务器。但是，本地计算机&lt;code>local&lt;/code>无法访问内网之中的 SSH 跳板机，而 SSH 跳板机可以访问本机计算机。&lt;/p>
&lt;p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。跳板机执行下面的命令，绑定本地计算机&lt;code>local&lt;/code>的&lt;code>2121&lt;/code>端口，去访问&lt;code>my.private.server:80&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -R 2121:my.private.server:80 -N &lt;span class="nb">local&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令是在 SSH 跳板机上执行的，建立跳板机到&lt;code>local&lt;/code>的隧道，并且这条隧道的出口映射到&lt;code>my.private.server:80&lt;/code>。&lt;/p>
&lt;p>显然，远程转发要求本地计算机&lt;code>local&lt;/code>也安装了 SSH 服务器，这样才能接受 SSH 跳板机的远程登录。&lt;/p>
&lt;p>执行上面的命令以后，跳板机到&lt;code>local&lt;/code>的隧道已经建立了。然后，就可以从本地计算机访问目标服务器了，即在本机执行下面的命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ curl http://localhost:2121
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本机执行上面的命令以后，就会输出服务器&lt;code>my.private.server&lt;/code>的 80 端口返回的内容。&lt;/p>
&lt;p>如果经常执行远程端口转发，可以将设置写入 SSH 客户端的用户个人配置文件（&lt;code>~/.ssh/config&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Host remote-forward
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HostName test.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RemoteForward remote-port target-host:target-port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成上面的设置后，执行下面的命令就会建立远程转发。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -N remote-forward
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等同于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ssh -R remote-port:target-host:target-port -N test.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="实例">实例
&lt;/h3>&lt;p>下面看两个端口转发的实例。&lt;/p>
&lt;h4 id="简易-vpn">简易 VPN
&lt;/h4>&lt;p>VPN 用来在外网与内网之间建立一条加密通道。内网的服务器不能从外网直接访问，必须通过一个跳板机，如果本机可以访问跳板机，就可以使用 SSH 本地转发，简单实现一个 VPN。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 2080:corp-server:80 -L 2443:corp-server:443 tunnel-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令通过 SSH 跳板机，将本机的&lt;code>2080&lt;/code>端口绑定内网服务器的&lt;code>80&lt;/code>端口，本机的&lt;code>2443&lt;/code>端口绑定内网服务器的&lt;code>443&lt;/code>端口。&lt;/p>
&lt;h4 id="两级跳板">两级跳板
&lt;/h4>&lt;p>端口转发可以有多级，比如新建两个 SSH 隧道，第一个隧道转发给第二个隧道，第二个隧道才能访问目标服务器。&lt;/p>
&lt;p>首先，在本机新建第一级隧道。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 7999:localhost:2999 tunnel1-host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令在本地&lt;code>7999&lt;/code>端口与&lt;code>tunnel1-host&lt;/code>之间建立一条隧道，隧道的出口是&lt;code>tunnel1-host&lt;/code>的&lt;code>localhost:2999&lt;/code>，也就是&lt;code>tunnel1-host&lt;/code>收到本机的请求以后，转发给自己的&lt;code>2999&lt;/code>端口。&lt;/p>
&lt;p>然后，在第一台跳板机（&lt;code>tunnel1-host&lt;/code>）执行下面的命令，新建第二级隧道。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ssh -L 2999:target-host:7999 tunnel2-host -N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令将第一台跳板机&lt;code>tunnel1-host&lt;/code>的&lt;code>2999&lt;/code>端口，通过第二台跳板机&lt;code>tunnel2-host&lt;/code>，连接到目标服务器&lt;code>target-host&lt;/code>的&lt;code>7999&lt;/code>端口。&lt;/p>
&lt;p>最终效果就是，访问本机的&lt;code>7999&lt;/code>端口，就会转发到&lt;code>target-host&lt;/code>的&lt;code>7999&lt;/code>端口。&lt;/p>
&lt;p>在远程机器上&lt;code>/etc/ssh/sshd_config&lt;/code> 打开 &lt;code>GatewayPorts yes&lt;/code> ，才能通过公网访问 远程8080转发 的本地80服务。&lt;/p>
&lt;h3 id="参考链接-2">参考链接
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://solitum.net/posts/an-illustrated-guide-to-ssh-tunnels/" target="_blank" rel="noopener"
>An Illustrated Guide to SSH Tunnels&lt;/a>, Scott Wiersdorf&lt;/li>
&lt;li>&lt;a class="link" href="https://grahamhelton.com/blog/ssh-cheatsheet/" target="_blank" rel="noopener"
>An Excruciatingly Detailed Guide To SSH&lt;/a>, Graham Helton&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;blockquote>
&lt;ul>
&lt;li>原文地址： &lt;a class="link" href="https://wangdoc.com/ssh/" target="_blank" rel="noopener"
>https://wangdoc.com/ssh/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Vim Introduction</title><link>https://arlettebrook.github.io/p/vim-introduction/</link><pubDate>Thu, 30 May 2024 21:52:12 +0800</pubDate><guid>https://arlettebrook.github.io/p/vim-introduction/</guid><description>&lt;hr>
&lt;h2 id="安装vim">安装vim
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/vim/vim" target="_blank" rel="noopener"
>Vim&lt;/a> （&lt;a class="link" href="https://www.vim.org/" target="_blank" rel="noopener"
>官网&lt;/a>） 是一个非常流行的文本编辑器，可以在多种操作系统上安装和使用。下面是如何在不同系统上安装 Vim 的方法：&lt;/p>
&lt;h3 id="在-linux-上安装-vim">在 Linux 上安装 Vim
&lt;/h3>&lt;p>大多数 Linux 发行版都在其软件包管理器中包含 Vim。可以使用包管理器来安装它。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Debian/Ubuntu 系列&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>CentOS&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo yum install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="在-macos-上安装-vim">在 macOS 上安装 Vim
&lt;/h3>&lt;p>macOS 通常预装了 Vim，但可能不是最新版本。你可以使用 Homebrew 来安装或更新 Vim。&lt;/p>
&lt;p>使用 Homebrew 安装&lt;/p>
&lt;ul>
&lt;li>
&lt;p>确保 Homebrew 已安装。你可以在终端中运行以下命令来安装 Homebrew：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">/bin/bash -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 Homebrew 安装 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="在-windows-上安装-vim">&lt;strong>在 Windows 上安装 Vim&lt;/strong>
&lt;/h3>&lt;p>在 Windows 上，你可以通过以下方法安装 Vim：&lt;/p>
&lt;p>&lt;strong>直接下载安装程序&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>访问 &lt;a class="link" href="https://www.vim.org/download.php" target="_blank" rel="noopener"
>Vim 官方下载页面&lt;/a>。推荐&lt;a class="link" href="https://github.com/vim/vim-win32-installer/releases/latest" target="_blank" rel="noopener"
>vim-win32-installer&lt;/a>（会及时提供最新编译版）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &amp;ldquo;PC: MS-DOS and MS-Windows&amp;rdquo; 部分，下载适用于 Windows 的安装程序（通常是 &lt;code>gvim&lt;/code> 安装程序）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行下载的安装程序，按照提示完成安装。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完成之后建议添加如下两个环境变量。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Path环境变量：添加的值为vim安装路径里面的具体版本。如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>D:\Vim\vim91&lt;/code> or &lt;code>%VIM%\vim91&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080.png"
width="930"
height="375"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080_hu13628958782910189142.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122127080_hu16891586107496715342.png 1024w"
loading="lazy"
alt="image-20240531122127080"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>环境变量VIM：值为vim的安装路径。如&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284.png"
width="930"
height="375"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284_hu693908631716270676.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240531122015284_hu17656161710514376185.png 1024w"
loading="lazy"
alt="image-20240531122015284"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Windows版本的vim提供了卸载程序。在程序和功能中找到即可卸载。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Windows安装结束后，你会发现开始菜单中有好多Vim，而且名字都不一样。&lt;/p>
&lt;p>他们的区别如下：&lt;/p>
&lt;ol>
&lt;li>有g和没有g
gVim 是在windows下的Gui图形用户界面的的 vim (GUI Vim)，支持windows的一些快捷方式，支持鼠标操作
vim 是在windows下的类似linux vi 编辑的界面，只能用键盘操作。
vim的操作指令同时适用于gVim&lt;/li>
&lt;li>Vim, Vim Diff, Vim Easy, Vim Read-only
Diff 是用来对比两个文件内容用的，直接打开挺没用的，不过直接拖2个文件到快捷方式上倒是可行；
Easy启动的时候是insert模式，适合普通windows用户的习惯；
Read-Only的用途：比如用read-only打开已经用vim打开过的文件，就不会提示让人烦躁的.swp文件存在的问题；&lt;/li>
&lt;/ol>
&lt;h3 id="通用方法编译安装-vim">通用方法：编译安装 Vim
&lt;/h3>&lt;p>如果你希望安装最新版本的 Vim 或自定义编译选项，可以从源代码编译安装。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装必要的依赖项（以 Ubuntu 为例）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install git make ncurses-dev gcc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>克隆 Vim 的源代码仓库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/vim/vim.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置并编译 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./configure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装 Vim：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="在ide中安装vim插件">在IDE中安装vim插件
&lt;/h3>&lt;p>许多现代集成开发环境（IDE）提供了 Vim 模拟插件。我们在享受 IDE 强大功能的同时，可以继续使用Vim的编辑风格。&lt;/p>
&lt;p>要在IDE中安装vim插件，只需要在对应IDE的插件市场搜索安装即可，我常用的：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>JetBrains系列&lt;/strong>：IdeaVim
&lt;ul>
&lt;li>可以配置 &lt;code>~/.ideavimrc&lt;/code> 文件来个性化设置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Visual Studio Code (VS Code)&lt;/strong>：Vim
&lt;ul>
&lt;li>可通过 &lt;code>settings.json&lt;/code> 文件进行配置和自定义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Sublime Text&lt;/strong>：Vintageous
&lt;ul>
&lt;li>可以通过 Sublime Text 的设置进行配置和自定义。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="配置vim">配置vim
&lt;/h2>&lt;p>Vim 是一个高度可配置的文本编辑器，可以通过编辑其配置文件来调整和扩展其功能。&lt;/p>
&lt;h3 id="配置文件介绍">配置文件介绍
&lt;/h3>&lt;p>Vim没有提供图形化的配置界面，配置Vim都是通过配置文件（&lt;code>.vimrc&lt;/code>）实现的：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在 Unix 或 Linux 系统中，&lt;code>.vimrc&lt;/code> 文件通常位于用户的主目录中，例如 &lt;code>~/.vimrc&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 Windows 系统中，&lt;code>.vimrc&lt;/code> 文件可以放在用户主目录下，例如 &lt;code>C:\Users\&amp;lt;username&amp;gt;\_vimrc&lt;/code>，或者 &lt;code>C:\Users\&amp;lt;username&amp;gt;\.vimrc&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**总结：Vim配置文件都在用户的家目录下，名称都可以用&lt;code>.vimrc&lt;/code>表示。**没有手动创建一个空文件，直接使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>要修改配置，就在&lt;code>.vimrc&lt;/code>文件中修改就行。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>注意事项&lt;/strong>&lt;/em>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>注释是以&lt;code>&amp;quot;&lt;/code>开头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部分vim插件版的配置文件名并不是&lt;code>.vimrc&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>如ideavim：&lt;code>~/.ideavimr&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这里总结一下git bash内置的vim插件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>该vim版本也可以用&lt;code>~/.vimrc&lt;/code>进行配置值。&lt;/p>
&lt;ul>
&lt;li>默认的配置文件在&lt;code>git安装位置/etc/vimrc&lt;/code>。只读。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>如果期望git bash不使用内置的vim插件&lt;/strong>，使用的是自己安装的vim版本：&lt;/p>
&lt;ul>
&lt;li>可以修改git bash的配置文件&lt;code>.bashrc&lt;/code>，添加vim的安装位置。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/d/vim/vim91:&lt;/span>&lt;span class="nv">$PATH&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>原理：使自己安装的vim版本优先级最高。先加载。尽管我在PATH变量中添加了自己安装的vim版本路径，但是无法保证谁的优先级高，所以使用了上面办法，使自己安装的vim版本优先级最高。先加载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="常见的-vim-配置项">常见的 Vim 配置项
&lt;/h3>&lt;p>&lt;code>.vimrc&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>基本设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">filetype on &lt;span class="s2">&amp;#34;开启文件类型侦测
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">filetype indent on &amp;#34;&lt;/span>适应不同语言的缩进
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">syntax &lt;span class="nb">enable&lt;/span> &lt;span class="s2">&amp;#34;开启语法高亮功能
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">syntax on &amp;#34;&lt;/span>允许使用用户配色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>显示设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">shortmess&lt;/span>&lt;span class="o">=&lt;/span>atI &lt;span class="s2">&amp;#34;不显示启动提示信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set laststatus=2 &amp;#34;&lt;/span>总是显示状态栏,命令行（在状态行下）的高度，默认为1，这里是2。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 我的状态行显示的内容（包括文件类型和解码）后续用插件美化。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">statusline&lt;/span>&lt;span class="o">=&lt;/span>%F%m%r%h%w&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">FORMAT&lt;/span>&lt;span class="o">=&lt;/span>%&lt;span class="o">{&lt;/span>&lt;span class="p">&amp;amp;&lt;/span>ff&lt;span class="o">}]&lt;/span>&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">TYPE&lt;/span>&lt;span class="o">=&lt;/span>%Y&lt;span class="o">]&lt;/span>&lt;span class="se">\ &lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nv">POS&lt;/span>&lt;span class="o">=&lt;/span>%l,%v&lt;span class="o">][&lt;/span>%p%%&lt;span class="o">]&lt;/span>&lt;span class="se">\ &lt;/span>%&lt;span class="o">{&lt;/span>strftime&lt;span class="o">(&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>%d/%m/%y&lt;span class="se">\ &lt;/span>-&lt;span class="se">\ &lt;/span>%H:%M&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="o">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">cmdheight&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="s2">&amp;#34; 命令行（在状态行下）的高度，默认为1，这里是2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set ruler &amp;#34;&lt;/span>显示光标位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> number &lt;span class="s2">&amp;#34;显示行号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> cursorline &lt;span class="s2">&amp;#34;高亮显示当前行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> cursorcolumn &lt;span class="s2">&amp;#34;高亮显示当前列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set hlsearch &amp;#34;&lt;/span> 高亮搜索结果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> incsearch &lt;span class="s2">&amp;#34;边输边高亮
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set ignorecase &amp;#34;&lt;/span>搜索时忽略大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> smartcase &lt;span class="s2">&amp;#34; 智能大小写匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> relativenumber &lt;span class="s2">&amp;#34;其他行显示相对行号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set scrolloff=5 &amp;#34;&lt;/span>垂直滚动时光标距底部位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>编码设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">fileencodings&lt;/span>&lt;span class="o">=&lt;/span>utf-8,gb2312,gbk,gb18030,cp936 &lt;span class="s2">&amp;#34; 检测文件编码,将fileencoding设置为最终编码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set fileencoding=utf-8 &amp;#34;&lt;/span> 保存时的文件编码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">termencoding&lt;/span>&lt;span class="o">=&lt;/span>utf-8 &lt;span class="s2">&amp;#34; 终端的输出字符编码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set encoding=utf-8 &amp;#34;&lt;/span> VIM打开文件使用的内部编码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>编辑设置&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> expandtab &lt;span class="s2">&amp;#34;扩展制表符为空格
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set tabstop=4 &amp;#34;&lt;/span>制表符占空格数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">softtabstop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="s2">&amp;#34;将连续数量的空格视为一个制表符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set shiftwidth=4 &amp;#34;&lt;/span>自动缩进所使用的空格数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">textwidth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span> &lt;span class="s2">&amp;#34;设置一行内容的宽度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set linebreak &amp;#34;&lt;/span>防止单词内部折行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">wrapmargin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="s2">&amp;#34;指定折行处与右边缘空格数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set smarttab &amp;#34;&lt;/span>使用智能制表符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> smartindent &lt;span class="s2">&amp;#34;智能缩进(好处是修改代码时会根据代码规则自动缩进，坏处是当用`:n,m&amp;gt;`对齐左侧的注释将不会被移动)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nb">set&lt;/span> autoindent &lt;span class="s2">&amp;#34;自动缩进(这两个差不多，感觉在大括号自动配对时，用智能缩进好点)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set wildmenu &amp;#34;&lt;/span>vim命令自动补全
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> autochdir &lt;span class="s2">&amp;#34;自动定位当前目录。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set wrap &amp;#34;&lt;/span>启用自动换行&lt;span class="s2">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set autoread &amp;#34;&lt;/span>文件改动时自动载入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> &lt;span class="nv">t_Co&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">256&lt;/span> &lt;span class="s2">&amp;#34;terminal Color 支持256色(默认是8色)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">hi comment ctermfg=6 &amp;#34;&lt;/span>设置注释颜色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> magic &lt;span class="s2">&amp;#34; 设置魔术
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guioptions-=T &amp;#34;&lt;/span> 隐藏gui工具栏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> guioptions-&lt;span class="o">=&lt;/span>m &lt;span class="s2">&amp;#34; 隐藏gui菜单栏
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guioptions-=r &amp;#34;&lt;/span> 删去gui滚动条&lt;span class="s2">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 使用更友好的颜色方案
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">colorscheme desert
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 设置背景色
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set background=dark
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 显示命令输入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> showcmd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;设置gui字体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">set guifont=Courier\ New:h20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 设置宽高
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;set lines=15 columns=50
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 启用真彩色颜色支持，让配色方案显示更好。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> termguicolors
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意配置了上面大部分设置，在大多数主题中只需要在&lt;code>vim-plug&lt;/code>后面选择颜色方案&lt;code>colorscheme&lt;/code>即可。&lt;/p>
&lt;hr>
&lt;h2 id="插件使用">插件使用
&lt;/h2>&lt;p>Vim 的功能可以通过插件进一步扩展。使用插件可以增强Vim的功能，如语法高亮、代码补全、文件浏览器、版本控制集成、模糊搜索等。&lt;/p>
&lt;p>为了方便安装，更新，删除插件，我们一般使用插件管理器进行插件管理。&lt;/p>
&lt;p>推荐使用的插件管理器是&lt;a class="link" href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener"
>vim-plug&lt;/a>。与其他插件管理器（如 Vundle 和 Pathogen）相比，&lt;code>vim-plug&lt;/code> 提供了更快的性能和更多的功能，如并行安装插件、延迟加载插件、使用简单等。&lt;/p>
&lt;h3 id="安装-vim-plug">安装 &lt;code>vim-plug&lt;/code>
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>下载并安装 &lt;code>vim-plug&lt;/code>&lt;/strong>： 在终端中运行以下命令，这会将 &lt;code>vim-plug&lt;/code> 下载到你的 Vim 自动加载目录下：&lt;/p>
&lt;p>Linux：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Windows：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -fLo ~/vimfiles/autoload/plug.vim --create-dirs &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：需要拥有curl命令，并且终端能够访问外网。&lt;/p>
&lt;p>如果没有，可以手动下载&lt;a class="link" href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" target="_blank" rel="noopener"
>plug.vim&lt;/a>，并将文件放在 windows 中的 &lt;code>~/vimfiles/autoload&lt;/code> 或 Linux 中的 &lt;code>~/.vim/autoload&lt;/code> 文件夹内，没有手动创建。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="插件推荐">插件推荐
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>状态栏和主题&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/itchyny/lightline.vim" target="_blank" rel="noopener"
>lightline.vim&lt;/a>：轻量级状态栏插件。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener"
>vim-airline&lt;/a>：高级状态栏插件，提供丰富的功能和美观的主题。&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/dracula/dracula-theme" target="_blank" rel="noopener"
>dracula-theme&lt;/a>**主题&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/kaicataldo/material.vim" target="_blank" rel="noopener"
>material.vim&lt;/a>**主题&lt;/li>
&lt;li>**&lt;a class="link" href="https://github.com/tribela/vim-transparent" target="_blank" rel="noopener"
>vim-transparent&lt;/a>**&lt;strong>终端透明&lt;/strong>。
&lt;ul>
&lt;li>这个插件，可以配置让其他插件也透明。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/ajmwagar/vim-deus" target="_blank" rel="noopener"
>vim-deus&lt;/a>主题&lt;/li>
&lt;li>配置主题建议都配置&lt;code>set termguicolors&lt;/code>&amp;quot; &lt;strong>启用真彩色颜色支持&lt;/strong>，&lt;strong>让配色方案显示更好。会让终端透明效果更好。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如果喜欢用gvim(我用sublme的&lt;a class="link" href="#%e5%9c%a8IDE%e4%b8%ad%e5%ae%89%e8%a3%85vim%e6%8f%92%e4%bb%b6" >Vim插件&lt;/a>)。可以：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>全屏显示：&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/derekmcloughlin/gvimfullscreen_win32" target="_blank" rel="noopener"
>gvimfullscreen_win32&lt;/a>
32位系统:
- 下载&lt;code>gvimfullscreen.dll&lt;/code>
- 将其放入&lt;code>gvim.exe&lt;/code>同目录的文件夹下
- 配置文件中&lt;code>map &amp;lt;F11&amp;gt; &amp;lt;Esc&amp;gt;:call libcallnr(&amp;quot;gvimfullscreen.dll&amp;quot;, &amp;quot;ToggleFullScreen&amp;quot;, 0)&amp;lt;CR&amp;gt;&lt;/code>&lt;/p>
&lt;p>64位系统同上, 用&lt;code>gvimfullscreen_64&lt;/code>代替&lt;/p>
&lt;p>现在你就可以用&lt;code>&amp;lt;F11&amp;gt;&lt;/code>来进行全屏操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>透明显示&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/mattn/vimtweak" target="_blank" rel="noopener"
>vimtweak&lt;/a>&lt;/p>
&lt;p>方法基本同上, 选择&lt;code>vimtweak32.dll&lt;/code>或&lt;code>vimtweak64.dll&lt;/code>放入文件夹, 在vimrc中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">au GUIEnter * call libcallnr&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;vimtweak64.dll&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;SetAlpha&amp;#34;&lt;/span>, 200&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中数值200可以选择0-255, 255为不透明&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>一组默认配置（每个人都同意默认的配置）：&lt;a class="link" href="https://github.com/tpope/vim-sensible" target="_blank" rel="noopener"
>vim-sensible&lt;/a>：插件的功能：&lt;/p>
&lt;ol>
&lt;li>&lt;code>'backspace'&lt;/code>：在插入模式下按退格键可删除任何内容。默认只能删除新添加的。&lt;/li>
&lt;li>&lt;code>'incsearch'&lt;/code>：按回车键之前开始搜索。&lt;/li>
&lt;li>&lt;code>'listchars'&lt;/code>：使&lt;code>:set list&lt;/code>（可见空白）更漂亮。&lt;/li>
&lt;li>&lt;code>'scrolloff'&lt;/code>：始终在光标上方/下方显示至少一行。&lt;/li>
&lt;li>&lt;code>'autoread'&lt;/code>：自动加载文件更改。您可以按 撤消&lt;code>u&lt;/code>。&lt;/li>
&lt;li>&lt;code>runtime! macros/matchit.vim&lt;/code>：加载 Vim 附带的 matchit.vim 版本。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>文件浏览和导航&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/preservim/nerdtree" target="_blank" rel="noopener"
>NERDTree&lt;/a>：文件系统浏览器，提供树状目录视图。
&lt;ul>
&lt;li>也可以用内置的&lt;code>:Vex&lt;/code>浏览目录。它没有目录树结构。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/junegunn/fzf.vim" target="_blank" rel="noopener"
>fzf.vim&lt;/a>：模糊查找工具，基于 &lt;code>fzf&lt;/code> 命令行工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语法高亮和语法检查&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/sheerun/vim-polyglot" target="_blank" rel="noopener"
>vim-polyglot&lt;/a>：支持多种编程语言的语法高亮。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/dense-analysis/ale" target="_blank" rel="noopener"
>ALE&lt;/a>：异步语法检查和修复工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>代码补全&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/ycm-core/YouCompleteMe" target="_blank" rel="noopener"
>YouCompleteMe&lt;/a>：强大的代码补全插件，支持多种编程语言。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/neoclide/coc.nvim" target="_blank" rel="noopener"
>coc.nvim&lt;/a>：基于 VSCode 插件的代码补全和语言服务器支持。&lt;/li>
&lt;li>&lt;strong>没打算用vim写代码，没花时间去配置&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>版本控制&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-fugitive" target="_blank" rel="noopener"
>vim-fugitive&lt;/a>：Git 集成插件，提供强大的 Git 操作支持。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/airblade/vim-gitgutter" target="_blank" rel="noopener"
>gitgutter&lt;/a>：在编辑器中显示 Git 的改动信息。&lt;/li>
&lt;li>都是在终端中使用git，我没有配置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>其他实用插件&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/machakann/vim-highlightedyank" target="_blank" rel="noopener"
>vim-highlightedyank&lt;/a>：让复制区域高亮。（ideavim内置插件。）&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/jiangmiao/auto-pairs" target="_blank" rel="noopener"
>auto-pairs&lt;/a>：成对添加、删除、高亮括号。&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener"
>surround.vim&lt;/a>：轻松操作成对符号（例如引号、括号）。
&lt;ul>
&lt;li>auto-pairs的扩展。成对修改括号为别的括号。如&lt;code>cs&amp;quot;'&lt;/code>将成对&lt;code>&amp;quot;&lt;/code>改为&lt;code>'&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tpope/vim-commentary" target="_blank" rel="noopener"
>commentary.vim&lt;/a>：快速注释和取消注释代码。
&lt;ul>
&lt;li>在普通模式下，移动光标到要注释的行，然后使用 &lt;code>gcc&lt;/code> 注释/取消注释当前行。&lt;/li>
&lt;li>在可视模式下，选择要注释的代码块，然后使用 &lt;code>gc&lt;/code> 注释/取消注释选定的代码。&lt;/li>
&lt;li>&lt;strong>很智能，好用。&lt;/strong>（ideavim内置插件。）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="配置插件">配置插件
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>编辑 &lt;code>.vimrc&lt;/code> 文件，添加插件管理器配置&lt;/strong>：&lt;/p>
&lt;p>windwos为例，将插件安装位置保存在&lt;code>$VIM/vimfiles/plugged&lt;/code>，将下面代码追加到&lt;code>.vimrc&lt;/code>中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>插件vim-plug&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 初始化 vim-plug
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Linux上默认
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; call plug#begin()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> windows上自定义插件安装位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#begin&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;$VIM/vimfiles/plugged&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; The default plugin directory will be as follows:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - Vim &lt;span class="o">(&lt;/span>Linux/macOS&lt;span class="o">)&lt;/span>: &lt;span class="s1">&amp;#39;~/.vim/plugged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - Vim (Windows): &amp;#39;~/vimfiles/plugged&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - Neovim &lt;span class="o">(&lt;/span>Linux/macOS/Windows&lt;span class="o">)&lt;/span>: stdpath&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> . &lt;span class="s1">&amp;#39;/plugged&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; You can specify a custom plugin directory by passing it as the argument
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> - e.g. &lt;span class="sb">`&lt;/span>call plug#begin&lt;span class="o">(&lt;/span>&lt;span class="s1">&amp;#39;~/.vim/plugged&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - Avoid using standard Vim directory names like &amp;#39;plugin&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 添加插件列表,确保使用的是单引号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; Plug &amp;#39;tpope/vim-sensible&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Plug &lt;span class="s1">&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; Plug &amp;#39;itchyny/lightline.vim&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> Call plug#end to update &lt;span class="p">&amp;amp;&lt;/span>runtimepath and initialize the plugin system.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; - It automatically executes `filetype plugin indent on` and `syntax enable`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 结束插件配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#end&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; You can revert the settings after the call like so:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> filetype indent off &lt;span class="s2">&amp;#34; Disable file-type-specific indentation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> syntax off &lt;span class="s2">&amp;#34; Disable syntax highlighting
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;插件vim-plug结束&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>添加插件&lt;/strong>：我们只需要将插件添加到&lt;code>Plug ''&lt;/code>里面即可，别忘记取消注释。插件名一般为为&lt;code>github作者/仓库名&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安装插件&lt;/strong>：打开vim运行&lt;code>:PlugInstall&lt;/code>命令来安装 &lt;code>.vimrc&lt;/code> 中定义的插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>更新插件&lt;/strong>： 要更新所有插件，运行：&lt;code>:PlugUpdate&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>清除未使用的插件&lt;/strong>： 如果你从配置中移除了一些插件，可以运行&lt;code>:PlugClean&lt;/code>命令来删除未使用的插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>检查插件状态&lt;/strong>： 要检查插件的状态和版本，运行&lt;code>:PlugStatus&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Done&lt;/code>表示成功，&lt;code>:q&lt;/code>退出插件管理器。失败退出重试。或R重试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插件安装成功示例：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059_hu4926137622968115842.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601130425059_hu6138446569572290816.png 1024w"
loading="lazy"
alt=":PlugInstall"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="效果展示">&lt;strong>效果展示&lt;/strong>
&lt;/h2>&lt;p>vim配置效果：&lt;/p>
&lt;p>material：default：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165_hu11328571375737713603.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115134165_hu386089092290036600.png 1024w"
loading="lazy"
alt="material：default"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>material：palenight：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541_hu4661753416144999738.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601115622541_hu17102671077530286520.png 1024w"
loading="lazy"
alt="material：palenight"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>区别不是很大。&lt;/p>
&lt;p>deus：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263_hu8119447206731372638.png 480w, https://arlettebrook.github.io/p/vim-introduction/index.assets/image-20240601120120263_hu89799726088539982.png 1024w"
loading="lazy"
alt="deus"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>我的&lt;a class="link" href="https://github.com/arlettebrook/arlettebrook/tree/main/vim.cfg" target="_blank" rel="noopener"
>完整配置&lt;/a>。&lt;/p>
&lt;hr>
&lt;h2 id="扩展">扩展
&lt;/h2>&lt;h3 id="自定义快捷键">自定义快捷键
&lt;/h3>&lt;p>在Vim中自定义快捷键，其实就创建快捷键与命令之间的映射关系。&lt;/p>
&lt;p>用到的命令是&lt;code>map&lt;/code>或&lt;code>noremap&lt;/code>。注意：要将命令配置在&lt;code>.vimrc&lt;/code>中。&lt;/p>
&lt;p>格式：&lt;code>映射命令 自定义快捷键 命令&lt;/code>，中间用空格分隔开。&lt;/p>
&lt;p>前面有&lt;code>n, i, v, c&lt;/code>中的任意一个字符表示对应的模式。如&lt;code>nmap&lt;/code>或&lt;code>nnoremap&lt;/code>表示Normal模式下的映射关系。没有表示所有模式的映射关系。&lt;/p>
&lt;p>&lt;strong>二者区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>map&lt;/code>会递归解析映射。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>noremap&lt;/code>不会递归解析映射。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>意思是如果命令中有别的映射，一个会解析，一个不会。如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">nmap yy dd &lt;span class="c1"># 修改了默认映射。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap ,y &lt;span class="s2">&amp;#34;*yy # 会执行复制一行命令到剪切板。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">nmap ,d &amp;#34;&lt;/span>*yy &lt;span class="c1"># 会删除一行命令到剪切板。解析了yy映射。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>看需求使用，是否需要递归映射。没有需求推荐使用&lt;code>noremap&lt;/code>创建映射，防止映射多了，递归解析，导致无限循环或意外行为。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当自定义的快捷键与vim预定义的快捷键冲突时，自定义的快捷键会覆盖预定义的快捷键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看自定义的快捷键&lt;code>:map&lt;/code>。或者查看&lt;code>.vimrc&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>:verbose map&lt;/code> 命令可以查看详细的映射信息，包括映射是在哪里定义的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>取消自定义的快捷键：在自定义快捷键的后面添加&lt;code>u+自定义的快捷键&lt;/code>。如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">nnoremap ,y &lt;span class="s2">&amp;#34;*yy # 自定义快捷键
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">unnoremap ,y # 取消快捷键
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>常用键表示法&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>普通字符&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>直接输入字母、数字、符号。例如：&lt;code>a&lt;/code>, &lt;code>b&lt;/code>, &lt;code>1&lt;/code>, &lt;code>2&lt;/code>, &lt;code>#&lt;/code>, &lt;code>*&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>控制键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>&amp;lt;Ctrl&amp;gt;&lt;/code>（或 &lt;code>&amp;lt;C&amp;gt;&lt;/code>）表示控制键。例如：&lt;code>&amp;lt;C-a&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>功能键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;code>&amp;lt;F1&amp;gt;&lt;/code> 到 &lt;code>&amp;lt;F12&amp;gt;&lt;/code> 表示功能键。例如：&lt;code>&amp;lt;F2&amp;gt;&lt;/code> 表示功能键 &lt;code>F2&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特殊键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用尖括号包围的特殊键表示法。例如：
&lt;ul>
&lt;li>&lt;code>&amp;lt;Esc&amp;gt;&lt;/code>：Escape 键&lt;/li>
&lt;li>&lt;code>&amp;lt;CR&amp;gt;&lt;/code>：回车键（Enter）&lt;/li>
&lt;li>&lt;code>&amp;lt;Tab&amp;gt;&lt;/code>：制表符键（Tab）&lt;/li>
&lt;li>&lt;code>&amp;lt;Space&amp;gt;&lt;/code>：空格键（Space）&lt;/li>
&lt;li>&lt;code>&amp;lt;BS&amp;gt;&lt;/code>：退格键（Backspace）&lt;/li>
&lt;li>&lt;code>&amp;lt;Del&amp;gt;&lt;/code>：删除键（Delete）&lt;/li>
&lt;li>&lt;code>&amp;lt;Up&amp;gt;&lt;/code>：上箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Down&amp;gt;&lt;/code>：下箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Left&amp;gt;&lt;/code>：左箭头键&lt;/li>
&lt;li>&lt;code>&amp;lt;Right&amp;gt;&lt;/code>：右箭头键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>组合键&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>可以组合使用。例如：&lt;code>&amp;lt;C-Space&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+Space&lt;/code>，&lt;code>&amp;lt;C-Left&amp;gt;&lt;/code> 表示 &lt;code>Ctrl+Left&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Leader&lt;/strong> 键&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用 &lt;code>&amp;lt;leader&amp;gt;&lt;/code> 键可以避免与默认快捷键冲突。默认情况下，&lt;code>&amp;lt;leader&amp;gt;&lt;/code> 键是反斜杠 &lt;code>\&lt;/code>，但你可以在 &lt;code>.vimrc&lt;/code> 中重新定义它：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">let&lt;/span> &lt;span class="nv">mapleader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;,&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>然后你可以使用 &lt;code>&amp;lt;leader&amp;gt;&lt;/code> 键创建自定义快捷键：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;leader&amp;gt;y &lt;span class="s2">&amp;#34;*yy
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，你的自定义快捷键将使用 &lt;code>,y&lt;/code> 来触发，并且&lt;code>&amp;lt;leader&amp;gt;&lt;/code>可以更改为你喜欢但不冲突的键。逗号跟反斜杠就是，不过我更喜欢用逗号。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>示例：在vim中没有快捷键删除光标后面的字符。我们来自定义映射实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; ctrl-k：删除光标后面的字符，部分版本不支持
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">nnoremap &amp;lt;C-k&amp;gt; D
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">inoremap &amp;lt;C-k&amp;gt; &amp;lt;Esc&amp;gt;lC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">vnoremap &amp;lt;C-k&amp;gt; d
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 定义删除光标后所有字符的函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span>! DeleteAfterCursor&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34; 获取当前光标在命令行中的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> let current_pos = getcmdpos()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&lt;/span> 获取当前命令行的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">let&lt;/span> &lt;span class="nv">cmdline&lt;/span> &lt;span class="o">=&lt;/span> getcmdline&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34; 截取字符串，获取光标前的部分
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> let new_cmdline = strpart(cmdline, 0, current_pos - 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&lt;/span> 设置新的命令行内容，只保留光标前的部分，去掉光标位置及其后的所有字符
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> call setcmdline&lt;span class="o">(&lt;/span>new_cmdline&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">endfunction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 在命令行模式下映射 &amp;lt;C-k&amp;gt; 为删除光标后的所有字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;&lt;/span> 用表达式寄存器调用删除函数，最后回车
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cnoremap &amp;lt;C-k&amp;gt; &amp;lt;C-r&amp;gt;&lt;span class="o">=&lt;/span>DeleteAfterCursor&lt;span class="o">()&lt;/span>&amp;lt;CR&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过上面的命令，我们实现了终端在Emacs模式下的&lt;code>ctrl-k&lt;/code>快捷键。但是只能在vim中使用，并且vim版本需要支持表达式寄存器。&lt;/p>
&lt;p>如果终端的编辑模式为vi，依旧不能解决问题。在insert模式下不能使用&lt;code>ctl-k&lt;/code>快捷键。需要修改终端的映射关系&lt;code>.inputrc&lt;/code>。不过够用了。&lt;/p>
&lt;p>示例：&lt;strong>配置复制、粘贴、剪切快捷键&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34; 配置复制、粘贴、剪切
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">vnoremap &amp;lt;C-c&amp;gt; &amp;#34;&lt;/span>*y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inoremap &amp;lt;C-v&amp;gt; &amp;lt;C-r&amp;gt;*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cnoremap &amp;lt;C-v&amp;gt; &amp;lt;C-r&amp;gt;*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vnoremap &amp;lt;C-v&amp;gt; &lt;span class="s2">&amp;#34;*p
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">vnoremap &amp;lt;C-x&amp;gt; &amp;#34;&lt;/span>*d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>需要注意的是不要配置普通模式下的&lt;code>ctrl-v&lt;/code>，它是可视块的快捷键，可以配置visual模式的，需要按两次才能粘贴。不过够用了。&lt;/p>
&lt;p>&lt;strong>命令参考&lt;/strong>：&lt;a class="link" href="https://arlettebrook.github.io/p/vim-common-commands/" target="_blank" rel="noopener"
>Vim Common Commands&lt;/a>&lt;/p></description></item><item><title>Terminal And Shell Introduction</title><link>https://arlettebrook.github.io/p/terminal-and-shell-introduction/</link><pubDate>Mon, 27 May 2024 15:17:13 +0800</pubDate><guid>https://arlettebrook.github.io/p/terminal-and-shell-introduction/</guid><description>&lt;hr>
&lt;h2 id="概念">概念
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>终端&lt;/strong>：命令行&lt;strong>交互界面&lt;/strong>。如：
&lt;ul>
&lt;li>windows terminal、windterm、FinalShell。PowerShell。&lt;/li>
&lt;li>控制台：一种特殊的终端。范围更广，既可以指硬件也可以指软件工具，常用于&lt;strong>系统管理&lt;/strong>和&lt;strong>监控&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>TTY&lt;/strong>：终端的&lt;strong>文本输入输出接口&lt;/strong>。可以理解为就是终端。不深入了解😂。&lt;/li>
&lt;li>&lt;strong>Shell&lt;/strong>：命令行&lt;strong>解释器&lt;/strong>。如：
&lt;ul>
&lt;li>Bash、Zsh、PowerShell、git bash。&lt;/li>
&lt;li>终端通过TTY与Shell通信。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://prinsss.github.io/the-difference-between-cli-terminal-shell-tty/" target="_blank" rel="noopener"
>命令行界面 (CLI)、终端 (Terminal)、Shell、TTY，傻傻分不清楚？&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="zsh安装">zsh安装
&lt;/h2>&lt;p>Bash是Linux系统内置的shell，提供了强大的命令行编辑、脚本编写和命令历史功能，广泛用于 Linux 和 macOS 系统中。是目前最流行的 Shell 之一。&lt;/p>
&lt;p>而&lt;strong>Zsh&lt;/strong> 是一个功能强大的 Shell，具有比 Bash 更多的特性，如更高级的自动补全、更强大的脚本能力和更丰富的配置选项，还提供了诸如共享历史、拼写校正、主题支持和插件系统等&lt;strong>增强功能&lt;/strong>，使其成为高级用户和开发者的首选。&lt;/p>
&lt;p>接下来介绍如何安装：&lt;/p>
&lt;h3 id="windows上安装">windows上安装
&lt;/h3>&lt;blockquote>
&lt;p>注意：windows上安装zsh是建立在git bash基础上的。&lt;/p>
&lt;p>所以只有安装了git，我们才能在windows上使用zsh。&lt;/p>
&lt;p>安装git：&lt;a class="link" href="https://git-scm.com/downloads" target="_blank" rel="noopener"
>git官网&lt;/a>。&lt;/p>
&lt;p>个人体验：利用上面方法在windows上使用zsh，效果不是特别好，不知道是不是我电脑配置低的原因：每次利用git bash启动zsh都很慢。所以windows上我用的shell一直都是git bash。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>下载zsh对应的windows版本，官方并没有提供，由MSYS2提供。（官方下载需要用包管理工具）&lt;/p>
&lt;ol>
&lt;li>&lt;em>MSYS2&lt;/em> 是针对Windows 的软件分发和构建平台。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>windows上如果没有包管理工具，只能去这里下载：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://packages.msys2.org/package/zsh?repo=msys&amp;amp;variant=x86_64" target="_blank" rel="noopener"
>地址&lt;/a>、&lt;a class="link" href="https://arlettebrook.github.io/docs/zsh-5.9-2-x86_64.pkg.tar.zst" >备用&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752.png"
width="1805"
height="1004"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752_hu4299411111570110436.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211226752_hu6340552113586580907.png 1024w"
loading="lazy"
alt="image-20240318211226752"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>后续教程是以文件下载为例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载完成之后将压缩包解压，用rar就可以解压。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将解压的内容全部剪切到git的安装目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要权限的话就授权（可能需要多次授权），重名的话直接覆盖。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512.png"
width="1123"
height="569"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512_hu3682021284840614180.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211742512_hu2314711689150529827.png 1024w"
loading="lazy"
alt="zsh安装"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开 &lt;code>Git Bash&lt;/code> 标签页或者直接右键打开 &lt;code>Git bash&lt;/code> 输入 &lt;code>zsh&lt;/code>，出现下图则安装成功：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689.png"
width="1464"
height="619"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689_hu18097737522448972159.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318211859689_hu8822474121098454394.png 1024w"
loading="lazy"
alt="zsh安装成功"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="567px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>暂时先不进行其他设置，直接输入 &lt;code>0&lt;/code> 结束并生成 &lt;code>.zshrc&lt;/code> 配置文件即可。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>该文件在当前用户的家目录，win+r输入.回车进入就是。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于现在没有安装 &lt;code>zsh&lt;/code> 主题，可以这样区分 &lt;code>bash&lt;/code> 和 &lt;code>zsh&lt;/code>，&lt;code>bash&lt;/code>的光标在第二行，&lt;code>zsh&lt;/code>的光标在同一行：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004.png"
width="1122"
height="353"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004_hu4869036198746251361.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318212921004_hu1047317547838520068.png 1024w"
loading="lazy"
alt="image-20240318212921004"
class="gallery-image"
data-flex-grow="317"
data-flex-basis="762px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>设置默认启动&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每次打开 &lt;code>Git Bash&lt;/code> 终端，你会发现默认还是 &lt;code>Bash&lt;/code> ，而不是 &lt;code>Zsh&lt;/code>，可以通过编辑 &lt;code>Bash&lt;/code> 终端的配置文件 &lt;code>.bashrc&lt;/code> 来实现默认使用 &lt;code>Zsh&lt;/code>，在 &lt;code>Git Bash&lt;/code> 终端中输入命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Vim&lt;/code> 默认是命令模式，你可以直接用文本编辑器打开将配置内容粘贴进去：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -t &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span> &lt;span class="c1">#1表示标准输出，用于判断标准输出是否连接到终端（tty），如果是，则执行 zsh 命令来切换为 Zsh Shell。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exec&lt;/span> zsh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476.png"
width="512"
height="81"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476_hu6082152066063695269.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318213908476_hu16406633212417899027.png 1024w"
loading="lazy"
alt="image-20240318213908476"
class="gallery-image"
data-flex-grow="632"
data-flex-basis="1517px"
>&lt;/p>
&lt;p>后面是vim的常用命令，&lt;code>a、shift+insert、esc、+:wq&lt;/code>最后按回车键，保存退出&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109.png"
width="688"
height="574"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109_hu17697662040912091355.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214206109_hu1298381065897005725.png 1024w"
loading="lazy"
alt="image-20240318214206109"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>注意：注释（#）调这三行代码，启动git bash时就不会启用zsh。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>之后再打开 &lt;code>Git Bash&lt;/code> 终端，默认就会使用 &lt;code>Zsh&lt;/code> 了。第一次可能有一个警告：大概是找不到 &lt;code>~/bash_profile&lt;/code> 等一些文件，可以忽略，以后不会再出现了。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006.png"
width="1354"
height="303"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006_hu12969095522079217171.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318214357006_hu11064918347256374957.png 1024w"
loading="lazy"
alt="image-20240318214357006"
class="gallery-image"
data-flex-grow="446"
data-flex-basis="1072px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>至此windows上安装zsh完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="linux上安装">Linux上安装
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>准备：&lt;/p>
&lt;p>查看当前 shell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$SHELL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$0&lt;/span> &lt;span class="c1"># or&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575.png"
width="504"
height="94"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575_hu6672870968416089158.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318234623575_hu1862483567863393567.png 1024w"
loading="lazy"
alt="image-20240318234623575"
class="gallery-image"
data-flex-grow="536"
data-flex-basis="1286px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 zsh&lt;/p>
&lt;p>CentOS：要管理员身份&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yum install -y zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ubuntu：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt install -y zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316.png"
width="1449"
height="636"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316_hu17048273619629412215.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235111316_hu6990380438600388815.png 1024w"
loading="lazy"
alt="image-20240318235111316"
class="gallery-image"
data-flex-grow="227"
data-flex-basis="546px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>将zsh替换为默认shell&lt;/em>&lt;/p>
&lt;ol>
&lt;li>为 root 设置默认 shell&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">chsh -s /bin/zsh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>返回结果如下，表示切换完成（下载安装 oh-my-zsh 成功后也会提示切换）&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1.png"
width="837"
height="139"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1_hu12818459376050137319.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318235425237-1710777267767-1_hu4274499231083686527.png 1024w"
loading="lazy"
alt="image-20240318235425237"
class="gallery-image"
data-flex-grow="602"
data-flex-basis="1445px"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>为特定用户设置默认 shell&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo chsh -s /bin/zsh &amp;lt;username&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;username&amp;gt; 替换为实际用户名&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;em>在 CentOS 8 中可能报错 Command not found，执行&lt;/em> &lt;code>sudo dnf install util-linux-user&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>重新登录shell之后，默认就是zsh&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682.png"
width="1055"
height="150"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682_hu16146627090289450087.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000037682_hu7372539070859762551.png 1024w"
loading="lazy"
alt="image-20240319000037682"
class="gallery-image"
data-flex-grow="703"
data-flex-basis="1688px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>至此Linux安装zsh完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="安装-oh-my-zsh">安装 Oh My Zsh
&lt;/h3>&lt;blockquote>
&lt;blockquote>
&lt;p>成功安装了zsh，还需要安装Oh My Zsh，它对zsh进行了扩展，这也是为什么要使用zsh了，而不是bash的原因。&lt;/p>
&lt;/blockquote>
&lt;p>注意：以下方法同适用于安装了zsh的环境，如Linux。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>在安装好 &lt;code>Zsh&lt;/code> 终端之后，看起来跟 &lt;code>Bash&lt;/code> 终端并无太大的区别，我们也没有进行设置。而 &lt;code>Oh My Zsh&lt;/code> 可以用于管理 &lt;code>Zsh&lt;/code>配置。它捆绑了数千个有用的功能、助手、插件、主题等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>官方： &lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener"
>https://github.com/ohmyzsh/ohmyzsh&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在命令行输入命令并按回车执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>这条命令国内需要开代理，且模式为Tun终端才能访问。官方有提供国内的下载地址，失败多试几次。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://install.ohmyz.sh/&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>还需要有curl以及git工具，我MinGW默认安装了curl命令，如果失败可以下载ohmyzsh安装脚本本地运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh ./install.sh &lt;span class="c1">#离线安装,注意要进入脚本的下载位置&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>出现下图的内容就是安装成功了，如果出现错误，或长时间没有响应，多试几次即可：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028.png"
width="1139"
height="591"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028_hu17658482646031104816.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318223757028_hu11269630949201583252.png 1024w"
loading="lazy"
alt="windows成功安装ohmyzsh"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="462px"
>&lt;/p>
&lt;blockquote>
&lt;p>最后一行的 &lt;code>ERROR&lt;/code> 可以忽略，windows正常，Linux没有&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>​ &lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971.png"
width="1453"
height="680"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971_hu9847382679826437838.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319000513971_hu10093829301065919385.png 1024w"
loading="lazy"
alt="Linux成功安装ohmyzsh"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p>
&lt;h4 id="配置-zsh">配置 zsh
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code>的配置文件在用户的家目录，文件名是 &lt;code>.zshrc&lt;/code>，编辑配置文件，可以对 &lt;code>Zsh&lt;/code>进行一些定制化配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑并保存配置文件之后，并不会立即生效，可以关闭所有终端重新打开，或者使用命令让配置生效：&lt;/p>
&lt;p>source可以替换成.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">. ~/.zshrc &lt;span class="c1"># or&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h5 id="配置主题">&lt;strong>配置主题&lt;/strong>
&lt;/h5>&lt;ol>
&lt;li>
&lt;p>就是对.zshrc配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Oh My Zsh&lt;/code> 安装默之后，默认使用主题是 &lt;code>robbyrussell&lt;/code>，可以修改 &lt;code>.zshrc&lt;/code> 配置中的 &lt;code>ZSH_THEME&lt;/code> 字段，所有可用主题可参考&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" target="_blank" rel="noopener"
>ohmyzsh官方主题页面&lt;/a>，这里先配置一下我个人比较喜欢的主题：gentoo or eastwood or daveverwer or bira&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165.png"
width="1416"
height="645"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165_hu13488833617102069954.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318225618165_hu214542930270969579.png 1024w"
loading="lazy"
alt="修改主题"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="526px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira.jpg"
width="1650"
height="1110"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira_hu10437305356009313446.jpg 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/bira_hu6477923083422233157.jpg 1024w"
loading="lazy"
alt="bira主题"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="356px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注意：&lt;code>ZSH_THEME&lt;/code>只能修改为官方提供的主题名，然后重新加载&lt;code>.zshrc&lt;/code>文件，就能修改为指定的主题。&lt;/p>
&lt;ol>
&lt;li>官方提供的主题都保存在&lt;code>~/.oh-my-zsh/themes&lt;/code>目录，你也可以自定义主题。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h5 id="配置插件">&lt;strong>配置插件&lt;/strong>
&lt;/h5>&lt;ol>
&lt;li>
&lt;p>插件Oh My Zsh 附带了大量插件供您使用。您可以查看&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins" target="_blank" rel="noopener"
>插件&lt;/a>目录和/或&lt;a class="link" href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins" target="_blank" rel="noopener"
>wiki&lt;/a>，了解当前可用的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过使用插件，可以让 &lt;code>Zsh&lt;/code> 的功能更加强大，&lt;code>Zsh&lt;/code> 和 &lt;code>Oh My Zsh&lt;/code> 自带了一些实用的插件，也可以下载其他的插件。 如 &lt;code>Zsh&lt;/code> 自带 &lt;code>Git&lt;/code> 插件，可以在命令行显示 &lt;code>Git&lt;/code> 相关的信息，并提供了一些操作 &lt;code>Git&lt;/code> 的别名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gaa&lt;/span> &lt;span class="o">=&lt;/span> git add --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gcmsg&lt;/span> &lt;span class="o">=&lt;/span> git commit -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ga&lt;/span> &lt;span class="o">=&lt;/span> git add
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gst&lt;/span> &lt;span class="o">=&lt;/span> git status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">gp&lt;/span> &lt;span class="o">=&lt;/span> git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061.png"
width="1005"
height="193"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061_hu12647141955310823418.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318230853061_hu7222957949506330460.png 1024w"
loading="lazy"
alt="image-20240318230853061"
class="gallery-image"
data-flex-grow="520"
data-flex-basis="1249px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h6 id="自动补全">&lt;strong>自动补全&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>zsh-autosuggestions&lt;/code> 插件，可以在你历史指令中找到与你当前输入指令匹配的记录，并高亮显示，如果想直接使用，可以直接通过右方向键补全。 安装插件，在终端分别执行下面两条命令：官方&lt;a class="link" href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener"
>zsh-autosuggestions&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ~/.oh-my-zsh/custom/plugins
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#指定了克隆的位置，就是什么切换的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-autosuggestions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>插件下载完成之后，编辑 &lt;code>~/.zshrc&lt;/code> 配置文件，修改插件相关配置项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>插件下载完成之后，编辑 &lt;code>~/.zshrc&lt;/code> 配置文件，修改插件相关配置项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">vim ~/.zshrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520.png"
width="1030"
height="276"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520_hu7776535799372491248.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232212520_hu2481514136240816672.png 1024w"
loading="lazy"
alt="image-20240318232212520"
class="gallery-image"
data-flex-grow="373"
data-flex-basis="895px"
>&lt;/p>
&lt;p>&lt;em>请注意，插件由空格（空格、制表符、换行符&amp;hellip;）分隔。&lt;strong>请勿&lt;/strong>在它们之间使用逗号，否则会损坏。&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存退出之后，记得使用命令 &lt;code>source ~/.zshrc&lt;/code> 重载配置。该插件生效之后，在使用命令的时候，就会匹配我们使用的命令，右键可以直接补全：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528.png"
width="719"
height="65"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528_hu10190398267604255977.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232512528_hu8776297963303755647.png 1024w"
loading="lazy"
alt="image-20240318232512528"
class="gallery-image"
data-flex-grow="1106"
data-flex-basis="2654px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你不喜欢提示默认的浅灰色，可以在 &lt;code>~/.zshrc&lt;/code> 中修改（没有配置项就添加），更多配置可以参考&lt;a class="link" href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fzsh-users%2Fzsh-autosuggestions%23suggestion-highlight-style" target="_blank" rel="noopener"
>zsh-autosuggestions官方文档&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;fg=#9fc5e8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h6 id="目录跳转">&lt;strong>目录跳转&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code> 自带有一个插件 &lt;code>z&lt;/code>，可以让我们在访问过的目录中快速跳转，将该插件配置到 &lt;code>~/.zshrc&lt;/code> 文件中即可使用：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685.png"
width="827"
height="417"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685_hu4894162928905668263.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318232841685_hu349605318819180330.png 1024w"
loading="lazy"
alt="image-20240318232841685"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存退出之后，重载配置，随意进入一些目录，之后再使用命令 &lt;code>z&lt;/code> 就可以实现快速跳转，支持模糊匹配：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252.png"
width="985"
height="194"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252_hu13577702204290339345.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318233202252_hu4769714867708788821.png 1024w"
loading="lazy"
alt="image-20240318233202252"
class="gallery-image"
data-flex-grow="507"
data-flex-basis="1218px"
>&lt;/p>
&lt;blockquote>
&lt;p>或许相比于 &lt;code>z&lt;/code>，更多人会选择使用 &lt;code>autojump&lt;/code>，如果是 &lt;code>Mac&lt;/code> 或者 &lt;code>Linux&lt;/code> 没什么问题，&lt;code>Windows&lt;/code> 就不太建议折腾了。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h6 id="其他插件">&lt;strong>其他插件&lt;/strong>
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>&lt;code>zsh-syntax-highlighting&lt;/code>：这个插件可以识别的 &lt;code>shell&lt;/code> 命令并高亮显示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-syntax-highlighting
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060.png"
width="1010"
height="455"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060_hu7078996607090037614.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319002900060_hu10283088706726666269.png 1024w"
loading="lazy"
alt="image-20240319002900060"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/zsh-users/zsh-completions" target="_blank" rel="noopener"
>zsh-completions&lt;/a>：额外的自动补全功能，用于补充 zsh 中尚不支持的命令补全，该项目将在完善时合并到 zsh。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> git clone https://github.com/zsh-users/zsh-completions &lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-completions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在&lt;code>.zshrc&lt;/code>文件里面的&lt;code>source &amp;quot;$ZSH/oh-my-zsh.sh&amp;quot;&lt;/code>这一行前添加以下代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">fpath&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH_CUSTOM&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ZSH&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="p">~/.oh-my-zsh&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">/custom&lt;/span>&lt;span class="si">}&lt;/span>/plugins/zsh-completions/src
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240.png"
width="1342"
height="553"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240_hu16180907428036526535.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240319004250240_hu2047420417138373173.png 1024w"
loading="lazy"
alt="image-20240319004250240"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>Note: adding it as a regular Oh My ZSH! plugin will not work properly (see &lt;a class="link" href="https://github.com/zsh-users/zsh-completions/issues/603" target="_blank" rel="noopener"
>#603&lt;/a>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Incremental completion on zsh：增强的实时自动命令补全插件：&lt;a class="link" href="https://mimosa-pudica.net/zsh-incremental.html" target="_blank" rel="noopener"
>Incremental completion on zsh&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>*该插件对性能似乎有一点点影响，请根据需要启用。*其实使用默认的自动补齐（tab）够用了。&lt;/p>
&lt;/blockquote>
&lt;p>作用如图：&lt;/p>
&lt;p>​ &lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh.gif"
width="404"
height="204"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh_hu856900493832513160.gif 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/zsh_hu12533740872816400566.gif 1024w"
loading="lazy"
alt="incr"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置别名&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>Zsh&lt;/code> 的 &lt;code>alias&lt;/code> 配置项可以自定义命令别名，在使用一些比较复杂的命令时，使用别名可以提高效率，这里举例添加一个 &lt;code>Git&lt;/code> 日志的别名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">gli&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;git log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意等号两边不要有空格&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="shell使用">Shell使用
&lt;/h2>&lt;p>在不同的终端中我们可以指定不同的Shell来使用。如：&lt;/p>
&lt;ol>
&lt;li>在&lt;a class="link" href="#Linux%e4%b8%8a%e5%ae%89%e8%a3%85" >Linux安装zsh&lt;/a>中我们就指定了Linux终端的默认Shell为zsh。&lt;/li>
&lt;li>在稍后介绍的[Windows Terminal](#Windows Terminal)中，也会指定Windows Terminal终端的默认Shell为Git bash。&lt;/li>
&lt;li>下面介绍在IDE终端中设置自己的Shell。&lt;/li>
&lt;/ol>
&lt;h3 id="设置ide终端的shell为git-bash">设置IDE终端的Shell为git bash
&lt;/h3>&lt;p>如果你按照上面的教程成功在windows上安装了zsh，那么设置Shell为git bash，也就是设置为zsh。&lt;/p>
&lt;p>注意：没有安装zsh的情况下也能设置为git bash。&lt;strong>优点：高亮、个人爱好&lt;/strong>。&lt;/p>
&lt;p>这里以goland开发工具为例，jetBrains全系列差不多：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>进入设置找到终端&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766.png"
width="800"
height="471"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766_hu495959110393304145.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220456766_hu14830579823587635056.png 1024w"
loading="lazy"
alt="image-20240318220456766"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318.png"
width="1472"
height="1069"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318_hu11246676265949031495.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318220625318_hu9119702638866007770.png 1024w"
loading="lazy"
alt="image-20240318220625318"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Shell path为git安装路径里面的&lt;code>bin\bash.exe&lt;/code>,&lt;strong>注意不是git-bash&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>注意：还需要为&lt;code>bash.exe&lt;/code>命令指定启动参数&lt;code>--login -i&lt;/code>：&lt;/p>
&lt;p>图中没有加入，后期发现的问题。&lt;/p>
&lt;p>意思是启动登录Shell，并且交互运行。&lt;/p>
&lt;p>作用：这个环境下git bash不会出现乱码，文件、目录高亮。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>最后应用即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>其他类似的IDE配置差不多：&lt;/p>
&lt;ol>
&lt;li>vscode&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747.png"
width="1907"
height="577"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747_hu9306140793856052291.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221601747_hu18079612747527111961.png 1024w"
loading="lazy"
alt="image-20240318221601747"
class="gallery-image"
data-flex-grow="330"
data-flex-basis="793px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366.png"
width="1220"
height="320"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366_hu3521770627186912210.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318221642366_hu497728376763386284.png 1024w"
loading="lazy"
alt="image-20240318221642366"
class="gallery-image"
data-flex-grow="381"
data-flex-basis="915px"
>&lt;/p>
&lt;p>vscode默认为git bash设置了启动参数，很方便。&lt;/p>
&lt;hr>
&lt;h2 id="terminal使用">Terminal使用
&lt;/h2>&lt;h3 id="windows-terminal">Windows Terminal
&lt;/h3>&lt;p>&lt;strong>Windows Terminal&lt;/strong>可以理解为：是cmd窗口和PowerShell终端的增强版，它将windows环境下的终端（cmd、PowerShell）都集成在了一起。我们只需要指定对应的Shell（cmd、PowerShell、git bash），即可使用。&lt;a class="link" href="https://learn.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;p>&lt;strong>主要特性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>多选项卡支持&lt;/strong>：
&lt;ul>
&lt;li>一个窗口管理多个Shell。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>丰富的自定义选项&lt;/strong>：
&lt;ul>
&lt;li>提供了多种自定义选项，包括更改背景颜色、字体、透明度、主题等，允许用户根据个人喜好定制界面。&lt;/li>
&lt;li>同一套配置应用于不同Shell。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>GPU 加速的文本渲染&lt;/strong>：
&lt;ul>
&lt;li>利用 DirectWrite 和 DirectX 提供 GPU 加速的文本渲染，确保快速、流畅的文本显示和滚动体验。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>支持多种命令行工具和 Shell&lt;/strong>：
&lt;ul>
&lt;li>支持 PowerShell、CMD（Command Prompt）、Windows Subsystem for Linux（WSL）以及任何其他你喜欢的命令行工具。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Unicode 和 UTF-8 字符支持&lt;/strong>:
&lt;ul>
&lt;li>完整支持 Unicode 和 UTF-8 字符集，包括 emoji 和复杂字符。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>JSON 配置文件&lt;/strong>：
&lt;ul>
&lt;li>使用 JSON 文件进行配置，允许用户灵活地定义设置，如启动命令、默认 Shell、外观等。
&lt;ul>
&lt;li>当然也提供了图形化界面修改配置(没有需要在Microsoft Store中升级到最新版)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>可扩展性和第三方工具支持&lt;/strong>：
&lt;ul>
&lt;li>可以通过扩展和插件进一步增强功能，支持第三方工具集成。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="安装">安装
&lt;/h4>&lt;p>Win11系统自带Windows Terminal终端，并且从Windows 11 22H2 版本开始，Windows Terminal 将&lt;a class="link" href="https://devblogs.microsoft.com/commandline/windows-terminal-is-now-the-default-in-windows-11/" target="_blank" rel="noopener"
>正式成为&lt;/a> Windows 11 的&lt;strong>默认终端&lt;/strong>。&lt;/p>
&lt;p>对于Win10系统需要额外安装，最低要求是Windows 10 2004（内部版本 19041）或更高版本。&lt;/p>
&lt;p>安装方法：&lt;/p>
&lt;ul>
&lt;li>推荐从Microsoft Store中下载安装。会自动更新。&lt;/li>
&lt;li>如果无法从 Microsoft Store 安装 Windows Terminal，可以从&lt;a class="link" href="https://github.com/microsoft/terminal" target="_blank" rel="noopener"
>github仓库&lt;/a>的&lt;a class="link" href="https://github.com/microsoft/terminal/releases" target="_blank" rel="noopener"
>发布页面&lt;/a>手动下载已发布的版本。
&lt;ul>
&lt;li>可以下载MSIX Bundle 文件，双击安装。这种方式不能指定安装位置。&lt;/li>
&lt;li>或者根据自己的操作系统选择对应的压缩包，一般x64。
&lt;ul>
&lt;li>解压到哪里就安装到哪里，需要手动配置path环境变量，值为安装目录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>启动：在运行框中输入&lt;code>wt&lt;/code>，能正常启动，证明安装成功。&lt;/p>
&lt;p>在安装成功之后，建议将Windows Terminal设置为默认的终端应用程序。由Windows决定，一般启动的也是wt。&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889.png"
width="1670"
height="884"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889_hu5949227494218837458.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240530144500889_hu2294160291816216533.png 1024w"
loading="lazy"
alt="Windows Terminal"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://blog.csdn.net/2201_75372778/article/details/131342522" target="_blank" rel="noopener"
>Windows终端（windows terminal）从下载到运行&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h4 id="修改默认shell为git-bash">修改默认Shell为Git Bash
&lt;/h4>&lt;p>可以根据自己的爱好判断是否修改。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>每次打开 &lt;code>Windows Terminal&lt;/code> 默认使用的是 &lt;code>Windows PowerShell&lt;/code>，要改为默认使用 &lt;code>Git Bash&lt;/code>，在设置里面进行设置即可。在更多选项中点击设置，或者右键标题栏空白处再点击设置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>滚动到底部，点击添加新配置文件——新建空配置文件，然后填入你的git bash所在位置。示例：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919.png"
width="1670"
height="884"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919_hu14599760463341138167.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527215848919_hu719361605685001651.png 1024w"
loading="lazy"
alt="git bash"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;blockquote>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>指定的git bash是&lt;code>bin&lt;/code>目录下的bash.exe。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>并且需要指定启动参数&lt;code>--login -i&lt;/code>&lt;/p>
&lt;p>意思是启动登录Shell，并且交互运行。&lt;/p>
&lt;p>作用：这个环境下git bash不会出现乱码，文件、目录高亮。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>最后，在启动选项卡中设置 &lt;code>Git Bash&lt;/code> 为默认终端并保存配置：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385.png"
width="1134"
height="574"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385_hu9500245219432619320.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240318215555385_hu14598973382756832894.png 1024w"
loading="lazy"
alt="image-20240318215555385"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="美化">美化
&lt;/h4>&lt;p>我在windows环境下使用的Shell一般是git bash，可定制化并不高，配置的zsh也没有使用，不过对我来说够用了。&lt;/p>
&lt;p>效果如下：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406.png"
width="1920"
height="1080"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406_hu12979227836121011193.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/image-20240527230837406_hu220461784128916618.png 1024w"
loading="lazy"
alt="image-20240527230837406"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>这里就不详细介绍如何实现的了，Windows Terminal都提供了图形化配置。&lt;/p>
&lt;p>我遇到的问题：总结一下：Windows terminal集成git-bash，删除到头的时候窗口总是闪烁：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>解决办法：新建一个~/.inputrc 文件，输入set bell-style none（可以什么都不写也起作用），保存；重启terminal，问题解决。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>.inputrc&lt;/code>是控制命令行界面（终端）行为的配置文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>神奇的是我只要创建了这个空文件，Windows terminal的git bash，删除到头之后就不会闪烁了。&lt;/p>
&lt;ul>
&lt;li>&lt;code>set bell-style none&lt;/code>：关闭终端提示音。&lt;/li>
&lt;li>&lt;code>set bell-style visible&lt;/code>：使用可见提示而不是声音。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>set editing-mode vi&lt;/code>：将编辑模式设置为 Vi 模式。默认为： Emacs 模式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>终端的编辑模式主要有vi和emacs两种模式，区别就是快捷键不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果你会vim，强烈建议修改为vi模式。&lt;/p>
&lt;blockquote>
&lt;p>推荐文章：&lt;a class="link" href="https://arlettebrook.github.io/p/vim-common-commands/" target="_blank" rel="noopener"
>vim-common-commands&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>修改之后在insert模式下Emacs模式的部分快捷键&lt;strong>依然可以使用&lt;/strong>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Emacs模式常用命令：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：&lt;strong>不同终端部分快捷键可用。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>光标移动&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + A&lt;/code>：移动到行首&lt;/li>
&lt;li>&lt;code>Ctrl + E&lt;/code>：移动到行尾&lt;/li>
&lt;li>&lt;code>Ctrl + B&lt;/code>：向左移动一个字符&lt;/li>
&lt;li>&lt;code>Ctrl + F&lt;/code>：向右移动一个字符&lt;/li>
&lt;li>&lt;code>Alt + B&lt;/code>：向左移动一个词&lt;/li>
&lt;li>&lt;code>Alt + F&lt;/code>：向右移动一个词&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>文本编辑&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + K&lt;/code>：删除从光标位置到行尾的文本&lt;/li>
&lt;li>&lt;code>Ctrl + U&lt;/code>：删除从光标位置到行首的文本&lt;/li>
&lt;li>&lt;code>Ctrl + W&lt;/code>：删除光标位置之前的一个词&lt;/li>
&lt;li>&lt;code>Alt + D&lt;/code>：删除光标位置之后的一个词&lt;/li>
&lt;li>&lt;code>Ctrl + Y&lt;/code>：粘贴（恢复）上次删除的文本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>其他操作&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl + L&lt;/code>：清屏并重新显示当前行&lt;/li>
&lt;li>&lt;code>Ctrl + R&lt;/code>：搜索命令历史&lt;/li>
&lt;li>&lt;code>esc+backspace&lt;/code>：删除一个单词。&lt;/li>
&lt;li>&lt;code>ctrl+P&lt;/code>：上一条历史命令&lt;/li>
&lt;li>&lt;code>ctrl+n&lt;/code>:下一条历史命令&lt;/li>
&lt;li>&lt;code>ctrl+j&lt;/code>：回车&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>这里就不详细介绍控制终端行为的选项了。能配置终端的编辑模式、提示音、补缺行为、快捷键等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>此外如果你喜欢使用PowerShell也可以使用&lt;a class="link" href="https://ohmyposh.dev/" target="_blank" rel="noopener"
>Oh My Posh&lt;/a>美化它，跟前面介绍的Oh My Zsh差不多。&lt;/p>
&lt;p>推荐文章：&lt;a class="link" href="https://blog.sunguoqi.com/posts/oh-my-posh/" target="_blank" rel="noopener"
>Oh My Posh | Windows Terminal 美化指南&lt;/a>&lt;/p>
&lt;h3 id="windterm">WindTerm
&lt;/h3>&lt;p>&lt;a class="link" href="https://github.com/kingToolbox/WindTerm" target="_blank" rel="noopener"
>WindTerm&lt;/a>是一款跨平台的终端应用，同时也是 SSH/Telnet/Serial/Shell/Sftp 客户端。通常用于&lt;strong>远程连接&lt;/strong>。类似于FinalShell，它有的功能，WindTerm同样支持，并且拥有更多的配色方案，直接上图：&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark.png"
width="2560"
height="1520"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark_hu6200463558304205094.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm-dark_hu4698852970780588056.png 1024w"
loading="lazy"
alt="WindTerm-dark"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>&lt;img src="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme.png"
width="2560"
height="1520"
srcset="https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme_hu17210216562124108200.png 480w, https://arlettebrook.github.io/p/terminal-and-shell-introduction/index.assets/WindTerm_DigeWhite_Theme_hu16933246791071060245.png 1024w"
loading="lazy"
alt="WindTerm_DigeWhite_Theme"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;h4 id="安装-1">安装
&lt;/h4>&lt;p>WindTerm是一款部分开源的软件，现目前(2024/5/28)仍存在部分小问题，不过不影响正常使用。&lt;/p>
&lt;p>安装可以从&lt;a class="link" href="https://github.com/kingToolbox/WindTerm" target="_blank" rel="noopener"
>github仓库&lt;/a>的&lt;a class="link" href="https://github.com/kingToolbox/WindTerm/releases" target="_blank" rel="noopener"
>发布页面&lt;/a>根据自己的操作系统手动下载已发布的版本。&lt;/p>
&lt;h4 id="使用">使用
&lt;/h4>&lt;p>使用WindTerm也很简单，语言支持中文。花点时间就能学会。&lt;/p>
&lt;p>WindTerm在windows环境下建议将默认的shell修改为git bash。个人爱好。&lt;/p>
&lt;p>Windows Terminal和WindTerm两款终端应用都建议安装，各有各的优点和用图。不过我一般使用WindTerm多一点，因为Windows Terminal有的功能WindTerm都有，并且后者有更好的配色方案，支持文件传输，内置远程连接。&lt;/p>
&lt;p>安装Windows Terminal主要是因为Windows Terminal集成了Win10的cmd、PowerShell终端。&lt;/p>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;blockquote>
&lt;ul>
&lt;li>原文地址: &lt;a class="link" href="https://juejin.cn/post/7229507721795993661" target="_blank" rel="noopener"
>https://juejin.cn/post/7229507721795993661&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Vim Common Commands</title><link>https://arlettebrook.github.io/p/vim-common-commands/</link><pubDate>Mon, 27 May 2024 00:43:37 +0800</pubDate><guid>https://arlettebrook.github.io/p/vim-common-commands/</guid><description>&lt;hr>
&lt;h2 id="简介">简介
&lt;/h2>&lt;p>Vim是一个高度可配置的文本编辑器，主要用于编写和编辑文本和源代码。它最初由Bram Moolenaar在1991年发布，至今已经成为了许多程序员和系统管理员的首选工具。&lt;/p>
&lt;p>Vim的特点包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>高度可配置：Vim具有大量的命令和选项，可以根据用户的需求进行定制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命令模式（COMMAND)：Vim在默认情况下处于命令模式，用户需要通过键盘输入命令来进行文本编辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入模式(INSERT)：在插入模式下，用户可以输入文本内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通模式(NORMAL)：普通模式是Vim的默认模式，可以进行光标移动、删除字符等操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>（&lt;strong>补充&lt;/strong>）可视模式（VISUAL)：允许用户以可视方式选择和操作文本。Visual 模式有三种类型：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>字符模式（Visual mode）&lt;/strong>：用于选择字符。&lt;code>v&lt;/code>命令进入。&lt;/li>
&lt;li>&lt;strong>行模式（Visual Line mode）&lt;/strong>：用于选择整行。&lt;code>V&lt;/code>命令进入。&lt;/li>
&lt;li>&lt;strong>块模式（Visual Block mode）&lt;/strong>：用于选择文本块（矩形区域）。&lt;code>ctrl+v&lt;/code>命令进入。&lt;/li>
&lt;li>可以与&lt;code>p, y, d, c, r, &amp;lt;, &amp;gt;, ~, gU, gu&lt;/code>等命令组合使用。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>大量快捷键：Vim具有大量的快捷键，可以提高编辑效率。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宏记录：Vim支持宏记录，可以录制一系列键盘操作并重复执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插件支持：Vim支持大量的插件，可以扩展其功能。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在Linux和Unix系统中，Vim通常已经预装。Windows系统则需要手动安装。对于初次使用Vim的用户，建议先学习一些基础操作命令，并通过互联网上的资源来深入了解它的使用方法和高级功能。&lt;/p>
&lt;blockquote>
&lt;p>提示：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>阅读本文需要&lt;strong>有一定的vim了解&lt;/strong>，还要拥有vim环境，并且你应该一边阅读，&lt;strong>一边实操&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你觉得本教程啰嗦，你可以运行&lt;code>vimtutor&lt;/code>学习官方提供的tutor教程。有的vim版本是中文教程。如果你的不是可以网上搜索。&lt;a class="link" href="https://arlettebrook.github.io/docs/vimtutor.txt" >备用(1.7中文版）&lt;/a>（下载之后用vim打开阅读）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当然强烈建议你学习完本教程之后去过一边&lt;code>vimtutor&lt;/code>，它可以让你边学边练。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="史上最好用的文本编辑器vim">史上最好用的文本编辑器VIM
&lt;/h3>&lt;p>对于vi/vim只是点评一点：这是一个你不需要使用鼠标，不需使用小键盘，只需要使用大键盘就可以完成很多复杂功能文本编辑的编辑器。不然主流IDE也不会有vim插件，如：jetbrains全系列都支持的&lt;a class="link" href="https://github.com/JetBrains/ideavim" target="_blank" rel="noopener"
>ideavim插件&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>学习 &lt;a class="link" href="http://www.vim.org/" target="_blank" rel="noopener"
>vim&lt;/a> 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim的学习曲线相当的大（参看&lt;a class="link" href="http://coolshell.cn/articles/3125.html" target="_blank" rel="noopener"
>各种文本编辑器的学习曲线&lt;/a>），所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下面的文章翻译自《&lt;a class="link" href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/" target="_blank" rel="noopener"
>Learn Vim Progressively&lt;/a>》，我觉得这是给新手最好的VIM的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。非常不错。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>警告：&lt;/p>
&lt;ul>
&lt;li>学习vim在开始时是痛苦的。&lt;/li>
&lt;li>需要时间&lt;/li>
&lt;li>需要不断地练习，就像你学习一个乐器一样。&lt;/li>
&lt;li>不要期望你能在3天内把vim练得比别的编辑器更有效率。&lt;/li>
&lt;li>事实上，你需要2周时间的苦练，而不是3天。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>将常用命令总结为四个步骤：&lt;/p>
&lt;ol>
&lt;li>存活&lt;/li>
&lt;li>感觉良好&lt;/li>
&lt;li>觉得更好，更强，更快&lt;/li>
&lt;li>使用VIM的超能力&lt;/li>
&lt;/ol>
&lt;p>当你走完这篇文章，你会成为一个vim的 superstar。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div align="center" style='color:red'>
——————————正文开始——————————
&lt;/div>
&lt;h2 id="vim常用命令总结">vim常用命令总结
&lt;/h2>&lt;h3 id="第一级--存活">第一级 – 存活
&lt;/h3>&lt;p>在Normal模式下【用vim正常打开的文件都会进入该普通模式】的常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">i &lt;span class="c1">#进入Insert 模式，按 ESC 回到 Normal 模式，光标处插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># I: 行首插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a &lt;span class="c1">#进入Insert 模式，按 ESC 回到 Normal 模式，光标后插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># A：行尾插入&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">x &lt;span class="c1">#删除光标后的一个字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># X：删除光标前的一个字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dd &lt;span class="c1">#删除光标所在行，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># D：删除光标后面的所有字符，并将删除的存到剪切板里&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p &lt;span class="c1">#粘贴剪切板，在光标后粘贴，P：光标处粘贴。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:q！ &lt;span class="c1"># 强制退出vim。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">esc &lt;span class="c1"># 退出命令、回到normal模式。输入的命令没效果，就点它，直到起作用为止。与ctrl+c等效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#推荐&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hjkl &lt;span class="c1">#强例推荐使用其移动光标，但不必需，你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>块光标，所在的位置由头部决定。头部就是光标所在位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>光标后是指隔一个字符，就是块光标的尾部。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除命令都会将删除的存到剪切板里，但&lt;strong>只有vim命令删除的，粘贴p命令才能粘贴（与vim版本有关）。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>如果要粘贴系统的剪切板内容用&lt;code>shift+insert&lt;/code>：将在光标处粘贴系统剪切板内容。
&lt;ul>
&lt;li>其他可能终端需要进入INSERT模式。&lt;/li>
&lt;li>注意不同的终端启动不同的vim版本，p粘贴命令效果可能不一样。删除命令有的会进剪切板，有的不会，但是p能粘贴。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我的环境：ideavim插件。&lt;/li>
&lt;li>补充：（后面学习之后知道：粘贴效果是与默认&lt;a class="link" href="#%e5%af%84%e5%ad%98%e5%99%a8" >寄存器&lt;/a>有关系）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>粘贴命令在粘贴一行内容时（ideavim）：&lt;/p>
&lt;ul>
&lt;li>如果光标所在位置是空行，将粘贴到该行。p与P效果一样&lt;/li>
&lt;li>如果光标所以位置不为空行，p将粘贴到下一行，P将粘贴到上一行。&lt;/li>
&lt;li>也就是以行为单位：p：在光标后粘贴，P：光标处粘贴。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Windows版本vim粘贴命令行，无论是不是空行，p会粘贴到下一行，P会粘贴到上一行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>你能在vim幸存下来只需要上述的那几个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。&lt;/p>
&lt;p>在命令模式【输入&lt;code>:&lt;/code>进入该模式，输入的命令都需要敲回车】下的常用命令（扩展）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用vim提供的在线帮助系统&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:help &amp;lt;command&amp;gt; &lt;span class="c1"># 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。或者键盘上的HELP。或者F1。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果打开的是vim内置的帮助文档，可以用ctrl+w w在文档和vim编辑窗口之间跳转。不起作用多点几下。其实是分屏切换快捷键。后续介绍。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选中帮助文档:q退出。选择编辑窗口:q!将会关闭所有窗口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:q &lt;span class="c1"># 只退出命令，可以退出未修改的文件、退出帮助等退出作用。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第二级--感觉良好">第二级 – 感觉良好
&lt;/h3>&lt;p>vim常用命令（难度一下就上来了）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1.各种插入模式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> o &lt;span class="c1">#在光标所在行后插入一个空行，从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> O &lt;span class="c1">#在光标所在行前插入一个空行，从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cw &lt;span class="c1">#向后剪切光标所在字符的同类型字符。可以是一个字符串，或者一串标点符号，并从Normal模式进入Insert模式。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s &lt;span class="c1"># 该命令与x命令功能一样，区别：会进入insert模式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2.简单的移动光标&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="c1">#数字0到所在行头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ &lt;span class="c1">#到所在行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ^ &lt;span class="c1">#到所在行首不是空白的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> g_ &lt;span class="c1">#到所在行尾不是空白的地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 匹配搜索跳转 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /pattern &lt;span class="c1">#回车搜索 pattern 的字符串,如果搜索出多个匹配，可按n键到下一个，N上一个。匹配之后一直存在。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ?pattern &lt;span class="c1"># 逆向搜索跳转到指定字符，ctrl+o相对于大写的N&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hls &lt;span class="c1"># 开启高亮显示：have light search。默认关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hlsearch &lt;span class="c1"># 开启高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nohls &lt;span class="c1"># 关闭高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :nohlsearch &lt;span class="c1"># 临时关闭高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :nohls &lt;span class="c1">#临时关闭高亮显示，在次搜索或者n会出现高亮显示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set incsearch &lt;span class="c1"># 动态显示搜索结果，通常配合高亮使用。默认关闭&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set is &lt;span class="c1"># 动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set noincsearch &lt;span class="c1"># 关闭动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nois &lt;span class="c1"># 关闭动态显示搜索结果，通常配合高亮使用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set hls is
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set nohls nois
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 可以将set命令保存到vim的配置文件中让其永久生效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 匹配的时候：默认没有有忽略大小写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set ic &lt;span class="c1"># ignore case&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :set noic &lt;span class="c1"># no ignore case 不忽略大小写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /搜索的字符&lt;span class="se">\c&lt;/span> &lt;span class="c1"># 临时忽略大小写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#3.拷贝/粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> p &lt;span class="c1">#光标后粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> P &lt;span class="c1">#光标出粘贴&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> yy &lt;span class="c1">#复制光标所在行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Y &lt;span class="c1"># 与yy等效。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#4.撤销/恢复&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> u &lt;span class="c1">#撤销 相对于ctrl+z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrl+r &lt;span class="c1"># 恢复撤销，相对于ctrl+shift+z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#5.打开/保存/退出/另存为/清空&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e &amp;lt;path/to/file&amp;gt; &lt;span class="c1">#打开指定文件，不存在会创建，e是edit的缩写。ideavim版本不存在打不开。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e! &lt;span class="c1"># 放弃所有的更改，重新加载当前文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :bn &lt;span class="c1">#你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :bp &lt;span class="c1">#上一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#冒号后可以加数字，:2bn表示下2个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :w &lt;span class="c1">#保存，w死write的缩写&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#指定文件名就是另存为，后面加!: 强制保存&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :sav &amp;lt;path/to/file&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#二者区别：后者将修改保存到指定文件，并打开指定文件，可以继续编辑&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 旧文件的修改会被抛弃掉，sav是saveas的缩写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wq &lt;span class="c1">#保存退出，随便那个都行。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wq! &lt;span class="c1"># 强制保存并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wa &lt;span class="c1"># 保存所有打开的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :wqa &lt;span class="c1"># 保存所有打开的文件并退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 后面加！都是强制&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :x &lt;span class="c1">#保存退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ZZ &lt;span class="c1">#保存退出，效果一样&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zz &lt;span class="c1"># 如果可能，将该行水平居中。等于与M。m是标记。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :q &lt;span class="c1">#退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :q! &lt;span class="c1">#强制退出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :qa! &lt;span class="c1">#强行退出所有的正在编辑的文件，就算别的文件有更改。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :%d &lt;span class="c1">#删除文件所有内容&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很好，花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>c&lt;/code>命令是一个组合命令，与d命令类似，都是删除命令，区别是c命令使用之后会&lt;strong>进入insert模式&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>C&lt;/code>与&lt;code>D&lt;/code>命令一样，从光标位置删除到行尾部，区别D不会进入insert模式。&lt;/li>
&lt;li>&lt;code>cc&lt;/code>清空光标所在行并进入insert，与&lt;code>dd&lt;/code>区别：不会删除该行，只是清空到剪切板。&lt;/li>
&lt;li>&lt;code>w&lt;/code>光标移动到不同类字符的头部（对空格字符会忽略，&lt;strong>就是移动到下一个单词的开头&lt;/strong>），
&lt;ul>
&lt;li>有大写命令，移动字符范围更广。就是对同类型字符判断更广。&lt;/li>
&lt;li>&lt;code>cw&lt;/code>从光标处&lt;strong>删除到不同类字符的头部&lt;/strong>（不会忽略空格字符）。&lt;code>dw&lt;/code>会忽略空格。
&lt;ul>
&lt;li>推荐使用&lt;code>de&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ciw&lt;/code>删除光标所在的同类字符，并进入insert模式。&lt;code>diw&lt;/code>不会进入insert模式。
&lt;ul>
&lt;li>&lt;code>caw&lt;/code>删除光标所在的同类字符，并删除后面的所以空格。&lt;/li>
&lt;li>&lt;strong>这种类型&lt;/strong>，都是删除一个单词，但是不能与e组合。如cae。三个的不能与e组合，用w。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>e&lt;/code>移动到不同类字符的尾部（忽略空格字符），如果自身不在同类字符的尾部会先移动到尾部，在往下跳转。
&lt;ul>
&lt;li>注意：尾部是指光标在同类字符的最后一个单词前面。&lt;/li>
&lt;li>&lt;code>ce&lt;/code>删除单词并进入insert模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>c0&lt;/code>从光标位置删除到行头部。&lt;/li>
&lt;li>&lt;code>c$&lt;/code>从光标位置删除到行尾部。
&lt;ul>
&lt;li>当然也可以组合&lt;code>c^&lt;/code>, &lt;code>cg_&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ct字符&lt;/code>删除光标到第一个指定字符之间的字符（删除到指定的字符），并进入insert模式。&lt;/li>
&lt;li>&lt;code>%&lt;/code>会在最近括号之间来回跳转。
&lt;ul>
&lt;li>&lt;code>d%&lt;/code>光标在括号上，会删除括号及括号内的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>意味着d命令也可以和上面组合，区别就是不会进入insert模式。
&lt;ul>
&lt;li>前面加数字表示重复几次。
&lt;ul>
&lt;li>&lt;code>2w&lt;/code>光标移动两次不同类字符。注意w命令没有其他命令组合时会忽略空格。加数字也会忽略。&lt;/li>
&lt;li>&lt;code>2dd&lt;/code>类型删除两行。&lt;code>2cc&lt;/code>删除之后进入insert模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>y&lt;/code>命令也是一个组合命令，用于与复制相关的命令。需要配合其他命令使用，如：：&lt;/p>
&lt;ul>
&lt;li>&lt;code>yy&lt;/code>复制光标所在行。
&lt;ul>
&lt;li>&lt;code>3yy&lt;/code>表示连续复制三行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>yw&lt;/code>复制到不同类字符的前面，不会忽略空格。空格属于字符（就是复制一个单词）。
&lt;ul>
&lt;li>&lt;code>yiw&lt;/code>复制所在的字符，就是复制完整单词。&lt;/li>
&lt;li>&lt;code>yaw&lt;/code>复制完整单词包括单词后面的空格，不包括前面的，不能与e组合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>y0&lt;/code>: 从光标位置复制到行头，&lt;code>y^&lt;/code>不包括空格。&lt;/li>
&lt;li>&lt;code>y$&lt;/code>: 从光标位置复制到行尾，&lt;code>yg_&lt;/code>不包括空格。&lt;/li>
&lt;li>&lt;code>v&lt;/code>进入可视模式之后移动光标，选择文本之后，&lt;code>y&lt;/code>命令可以复制选中的文本，自动返回normal。&lt;code>c&lt;/code>会进入insert模式。
&lt;ul>
&lt;li>意味着前面的组合命令都可以与visual模式配合使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>yt字符&lt;/code>从光标位置复制到指定字符之间的字符。&lt;/li>
&lt;li>&lt;code>y%&lt;/code>如果光标在括号上，将复制括号及括号内的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>u&lt;/code>命令相对于&lt;code>ctrl+z&lt;/code>撤销命令：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>u&lt;/code>命令会将光标移动到最近修改的地方，如果光标所在位置正是最近修改的地方，将执行撤销操作。(与vim版本有关，有的直接撤销)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>U&lt;/code>撤销对当前行的所有更改,以行为单位，&lt;strong>撤销到insert之前的状态&lt;/strong>。部分vim版本不能使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+u&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>normal模式下：光标向上移动半页。&lt;/li>
&lt;li>insert模式下：与Emacs模式一样。&lt;/li>
&lt;li>command模式下：与Emacs模式一样，但是不会删除&lt;code>:&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="第三级--更好更强更快">第三级 – 更好，更强，更快
&lt;/h3>&lt;p>先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。&lt;/p>
&lt;p>这里你将会学到以下常用vim常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1.重复命令【更好】&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> . &lt;span class="c1">#重复上一次命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> N&amp;lt;command&amp;gt; &lt;span class="c1">#数字N重复后面的命令N词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#演示：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2dd &lt;span class="c1">#删除两行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3p &lt;span class="c1">#粘贴剪切板3次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 10iide &lt;span class="o">[&lt;/span>Esc&lt;span class="o">]&lt;/span> &lt;span class="c1">#光标所在字符前插入10个ide字符串，可以换成a就是后面，效果更好&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> . &lt;span class="c1">#重复上一次插入10ide命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3. &lt;span class="c1">#插入3个ide，这里不是30个ide，要注意。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2.光标移动【更强】：你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :N &lt;span class="c1">#光标到数字N行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NG &lt;span class="c1">#同理光标到数字N行，等同于Ngg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrl+g &lt;span class="c1"># 显示文件的信息，包括行号，百分比，部分vim版本起作用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gg &lt;span class="c1">#光标到第一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> G &lt;span class="c1">#光标到最后一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> w &lt;span class="c1">#光标移动到下一个不同类型的字符的开头，就是移动到不同类型的字符前，忽略空格字符。就是跳转到下一个单词前。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> e &lt;span class="c1">#光标移动到 当前 或者 下一个 不同类型的最后一个字符上。效果：移动到当前同类型字符的末尾 或者 移动到下一个不同类型字符的末尾。【跳过单词】忽略空格字符。就是跳转到本单词或下一个单词末尾。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 他们的大写命令，移动范围更广，就是对同类型字符判断更广。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#最强的光标移动&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> % &lt;span class="c1">#匹配括号移动，自己体会，超级好用。支持(, {, [。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * &lt;span class="c1"># 匹配光标当前所在的单词，移动到下一个单词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="se">\#&lt;/span> &lt;span class="c1"># 匹配光标当前所在的单词，移动到上一个单词，实际\没有，这里是转义作用。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#二者匹配之后都可以重复使用，起到切换的作用，n下一个同理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#更快&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;start position&amp;gt;&amp;lt;command&amp;gt;&amp;lt;end position&amp;gt; &lt;span class="c1">#光标的移动与命令的联动，组合命令通常与光标移动命令组合使用，官方解释是操作加动作。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#演示&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0y$ &lt;span class="c1">#拷贝当前行，一般用yy，0行首，y拷贝，$行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ye &lt;span class="c1">#拷贝当前同类型字符的末尾，y拷贝，e跳到同类型字符末尾，与yw效果一样&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 注意这两个要考虑光标的位置，光标必须在单词的头部。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 用yiw,无论光标在哪里，只要在单词上，就能复制整个单词。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># yaw复制完整单词包括单词后面的空格，不包括前面的，不能与e组合。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dw &lt;span class="c1">#删除当前同类型字符&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d$ &lt;span class="c1">#从当前删除到行尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d0 &lt;span class="c1">#从当前删除到行首&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dgg &lt;span class="c1">#从当前删除到文件开头&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dG &lt;span class="c1">#从当前删除到文件末尾&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :%d &lt;span class="c1"># 清空整个文件内容。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :e! &lt;span class="c1"># 忽略所有修改，重新加载当前文件。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#更多可组合命令d (删除 )、v (可视化的选择)、gU (变大写)、gu (变小写)、y（复制）、c（删除进入insert）等等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 示例：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y2/apple &lt;span class="c1"># 复制两个apple之间的内容，不包括最后一个apple。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gUiw &lt;span class="c1"># 将光标所在单词转大写。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> diw &lt;span class="c1"># 删除当前光标所在单词&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#d上面演示了&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#注意变大小写要有对象才能变，不然出错。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>补充&lt;/strong>（这部分可以最后在看，或看vimtutor在来）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>r字符&lt;/code>：替换光标后的字符为指定字符。&lt;/p>
&lt;ol>
&lt;li>&lt;code>R&lt;/code>连续替换光标后的字符。esc退出。&lt;/li>
&lt;li>&lt;code>:r 输入流&lt;/code>可以提取文件（指定路径），或者输入流的内容到光标位置后面，如：&lt;code>:r !ls&lt;/code>：将在光标后插入&lt;code>ls&lt;/code>命令的输出。
&lt;ol>
&lt;li>用于提取文件内容到光标后&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>输入 &lt;strong>:s/old/new/g&lt;/strong> 可以替换光标所在行的old字符串为new字符串。g表示替换区全部，没有只替换第一个&lt;/p>
&lt;p>要替换两行之间出现的每个匹配串，请
输入 :#,#s/old/new/g 其中 #,# 代表的是替换操作的若干行中首尾两行的行号。
输入 :%s/old/new/g 则是替换整个文件中的每个匹配串。
输入 :%s/old/new/gc 会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>:!外部命令&lt;/code>执行外部命令，如&lt;code>:!ls&lt;/code>，支持所有的外部命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim支持保存一个文件的部分内容：&lt;/p>
&lt;ol>
&lt;li>进入可视模式之后，选中要保存的部分，然后按 : 字符。将看到屏幕底部会出现 :&amp;rsquo;&amp;lt;,&amp;rsquo;&amp;gt; 。在后面输入另存为文件命令即可&lt;code>w 文件名&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在命令模式下，可以使用&lt;code>tab&lt;/code>键补全命令，&lt;code>ctrl+d&lt;/code>显示能补全的命令。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ctrl+u&lt;/code>清空光标前的字符，除了&lt;code>:&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>f字符&lt;/code>光标向前移动到指定字符前。&lt;code>F字符&lt;/code>反向。&lt;/p>
&lt;ol>
&lt;li>&lt;code>t字符&lt;/code>光标向前移动到指定字符的前一个字符前。&lt;code>T字符&lt;/code>反向。&lt;/li>
&lt;li>在使用这个两个命令之后&lt;code>;&lt;/code>光标跳转到下一个相同字符，&lt;code>,&lt;/code>上一个。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gf&lt;/code>将光标所在行文本内容作为文件打开，会自动光标当前文件（前提已经保存）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>H&lt;/code>光标移动到光标去过的屏幕最高行，&lt;code>L&lt;/code>屏幕的最低行。（与版本有关）&lt;/p>
&lt;ol>
&lt;li>&lt;code>J&lt;/code>删除末尾的换行符，&lt;code>ctrl-j&lt;/code>换行、回车的意思，（重要）寄存器中用&lt;code>^J&lt;/code>表示。&lt;/li>
&lt;li>&lt;code>K&lt;/code>查看光标所在单词的&lt;code>man&lt;/code>页面。（ideavim不支持）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>b&lt;/code>与&lt;code>w&lt;/code>命令反向。&lt;code>B&lt;/code>范围更广。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ge&lt;/code>与&lt;code>e&lt;/code>命令反向。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+u&lt;/code>normal模式下光标&lt;strong>向上移动半页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+b&lt;/code>光标&lt;strong>向上移动差不多一页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+f&lt;/code>&lt;strong>向下移动一页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl+d&lt;/code>&lt;strong>向下移动半页&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>M&lt;/code>光标移动到屏幕中间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>(&lt;/code>向上移动到句子的开头&lt;/p>
&lt;ol>
&lt;li>&lt;code>)&lt;/code>向下移动到句子的开头&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>{&lt;/code>向上移动到段落的开头。&lt;/p>
&lt;ol>
&lt;li>&lt;code>}&lt;/code>向下移动到段落的开头。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>da(&lt;/code>删除括号及括号内的内容。括号可以换成&lt;code>&amp;quot;, ', (, ), {, }, [, ].&lt;/code>中的一个，删除对应的括号。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>di(&lt;/code>删除不包括括号。括号可以换成&lt;code>&amp;quot;, ', (, ), {, }, [, ].&lt;/code>中的一个，删除对应的括号内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>i不包括括号，a包括括号。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;gt;&amp;gt;&lt;/code>向后缩进光标所在行。&lt;/p>
&lt;ol>
&lt;li>&lt;code>&amp;lt;&amp;lt;&lt;/code>反向缩进&lt;/li>
&lt;li>&lt;code>.&lt;/code>命令重复上一次命令。（部分命令不可重复：如&lt;code>2j&lt;/code>)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gU移动光标命令&lt;/code>选中的字符转大写。&lt;/p>
&lt;ol>
&lt;li>&lt;code>gu移动光标命令&lt;/code>选中的字符转小写&lt;/li>
&lt;li>&lt;code>~&lt;/code>将光标后的字符大小写互转，可以选中多个互转。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在insert模式下&lt;code>ctrl-o&lt;/code>会临时进入Normal模式，执行别的命令之后会，自动返回insert模式。&lt;/p>
&lt;ol>
&lt;li>可用于删除光标后的单词继续编辑：如：&lt;code>ctrl-o de&lt;/code>&lt;/li>
&lt;li>vi模式中不可以使用。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>在insert模式下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>ctrl-w&lt;/code>向光标前删除到同类字符。忽略空格，就是删除一个单词。&lt;/p>
&lt;ol>
&lt;li>&lt;code>ctrl-u&lt;/code>全部删除。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ctrl-h&lt;/code>等同于退格键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>vim在insert模式下没有提供向后删除字符的命令&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="第四级--vim-超能力">第四级 – Vim 超能力
&lt;/h3>&lt;p>你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。&lt;/p>
&lt;p>其实是对上面的命令再次复习😂（不在解释其作用，如果你还看不懂，证明练得还不够。）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">g_
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">f&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="c1"># F&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">, or &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">t， &lt;span class="c1"># T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">, or &lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3f,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dt,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ct,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ye
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yt&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dt&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ce
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ct&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">P
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">diw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">daw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ciw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">caw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yiw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yaw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果你搞不明白上面的复杂组合命令，可以看v模式选择的是那个部分。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">viw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vaw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>补充&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>&amp;lt;motion&amp;gt;i&amp;lt;option&amp;gt;&lt;/code>、&lt;code>&amp;lt;motion&amp;gt;a&amp;lt;object&amp;gt;&lt;/code>根据动作（motion）、范围（i、a）操作对象（object）。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>motion动作：常用：d, c, v, y,&lt;/p>
&lt;ul>
&lt;li>
&lt;p>i与a的区别：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对于空格&lt;/strong>i会忽略，a会保留&lt;strong>后面&lt;/strong>的使用空格。&lt;/li>
&lt;li>其他字符：&lt;strong>i不包括，a包括。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>object：操作对象，常用：&lt;/p>
&lt;ul>
&lt;li>w：一个单词。&lt;/li>
&lt;li>s：一个句子（不包括缩进、前后空白）。&lt;/li>
&lt;li>p：一个段落（包括缩进，前后空白）。&lt;/li>
&lt;li>其他字符：&lt;code>&amp;quot;, ', (, ), {, }, [, ].&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>注意：是向后搜索包裹光标的对象。没有，只有&lt;code>&amp;quot;&lt;/code>对象会向内查找。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>示例：假设你有一个字符串 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>而光标键在第一个 &lt;code>o &lt;/code>的位置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>vi&amp;quot;&lt;/code> → 会选择 &lt;code>foo&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>va&amp;quot;&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vi)&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>va(&lt;/code> → 会选择&lt;code>(&amp;quot;foo&amp;quot;)&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>v2i)&lt;/code> → 会选择 &lt;code>map (+) (&amp;quot;foo&amp;quot;)&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>v2a)&lt;/code> → 会选择 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>光标在&lt;code>a&lt;/code>位置：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>vi&amp;quot;&lt;/code> → 会选择 &lt;code>foo&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>va&amp;quot;&lt;/code> → 会选择 &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>vi)&lt;/code> → 会选择 &lt;code>map (+) (&amp;quot;foo&amp;quot;)&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>va(&lt;/code> → 会选择 &lt;code>(map (+) (&amp;quot;foo&amp;quot;))&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>v2i)&lt;/code>、&lt;code>v2a)&lt;/code>两个无法选中，不会向内查找。&lt;/p>
&lt;ul>
&lt;li>只有&lt;code>&amp;quot;&lt;/code>会。并不考虑数量。&lt;code>v2i&amp;quot;&lt;/code>→ 会选择 &lt;code>foo&lt;/code>, 与&lt;code>vi&amp;quot;&lt;/code>等效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>可视（VISUAL）模式操作：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ctrl+v&lt;/code>进入可视模式的块模式（Windows占用，用&lt;code>ctrl+q&lt;/code>代替）。&lt;code>v&lt;/code>字符模式，&lt;code>V&lt;/code>行模式。&lt;/li>
&lt;li>以上模式可以配合其他移动动作使用，如&lt;code>0&lt;/code>, &lt;code>ctrl+f&lt;/code> , &lt;code>$&lt;/code>方便选择。如：
&lt;ul>
&lt;li>选择多行，&lt;code>J&lt;/code>命令批量&lt;strong>移除选择行的换行符&lt;/strong>。&lt;/li>
&lt;li>向后缩进&lt;code>&amp;gt;&lt;/code>选中的文本，&lt;code>&amp;lt;&lt;/code>向前。
&lt;ul>
&lt;li>选中之后&lt;code>=&lt;/code>自动给缩进。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>块模式还可以批量修改多行。典型的操作，如：
&lt;ul>
&lt;li>&lt;strong>添加注释&lt;/strong>： &lt;code>0 ctrl+v ctrl+d 选中要注释的 I # ESC&lt;/code>
&lt;ul>
&lt;li>注释只能用行首插入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>末尾添加分号：&lt;code>$ ctrl+v ctrl+d 选择要修改的 A ; esc &lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>注意：只有块模式可以批量修改。并且只有在块头或者块尾可以修改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>自动补全&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在insert模式下，输入一个词的开头，然后按&lt;code>ctrl+n&lt;/code>or&lt;code>ctrl+p&lt;/code>自动补全就出现了。&lt;/li>
&lt;li>如果有多个，n是下一个，p是上一个。&lt;/li>
&lt;li>在ideavim中是代码提示。&lt;/li>
&lt;li>选中之后，继续输入，不用回车确定。ideavim代码中需要回车确定。&lt;/li>
&lt;li>具体看情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="标记">标记
&lt;/h4>&lt;p>在 Vim 中，&lt;code>m&lt;/code> 命令用于设置标记（mark）。标记是 Vim 提供的一种功能，用于在文件中记住特定的位置，以便以后快速跳转到这些位置。标记可以是局部标记（仅在当前文件中有效）或全局标记（在所有文件中有效）。以下是 &lt;code>m&lt;/code> 命令的详细使用方法：&lt;/p>
&lt;p>&lt;strong>设置标记&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>设置局部标记&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，按 &lt;code>m&lt;/code> 然后按一个小写字母（例如 &lt;code>a&lt;/code>）。&lt;/li>
&lt;li>例子：按 &lt;code>ma&lt;/code> 在当前光标位置设置标记 &lt;code>a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>设置全局标记&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，按 &lt;code>m&lt;/code> 然后按一个大写字母（例如 &lt;code>A&lt;/code>）。&lt;/li>
&lt;li>例子：按 &lt;code>mA&lt;/code> 在当前光标位置设置全局标记 &lt;code>A&lt;/code>。&lt;/li>
&lt;li>在ideavim中会有高亮。&lt;/li>
&lt;li>0-9字符也表示全局标记。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>m&lt;/code>命令是&lt;code>:mark 标记字符&lt;/code>的快捷键。
&lt;ol>
&lt;li>区别是&lt;code>m&lt;/code>会记录光标的列位置，&lt;code>:mark&lt;/code>不会，它的列号始终为0。&lt;/li>
&lt;li>所以&lt;code>:mark&lt;/code>跳转只会到标记行的头部。不会跳转到标记行光标的位置。&lt;/li>
&lt;li>一般使用&lt;code>m&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>注意：
&lt;ol>
&lt;li>标记字符只有一个。
&lt;ol>
&lt;li>标记字符常用的字母、数字。其他的部分能用。不用考虑。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>标记信息包括标记字符、光标的行号、列号以及行的文本内容。&lt;/li>
&lt;li>后续设置存在的标记会覆盖。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>跳转到标记&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>' 标记字符&lt;/code>：自动跳转到标记行的行头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>`` 标记字符`：自动跳转到标记行的光标位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>'a&lt;/code>：跳转到局部标记a的行头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>``A`跳转到全局标记A所在行光标的位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跳转标记的开头如何有空格，都会忽略。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>查看标记&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>:marks&lt;/code>：显示所有已设置的标记及其光标位置、行文本内容。&lt;/li>
&lt;li>使用&lt;code>:mark&lt;/code>标记的行，光标的列号为0。所以`` `也只能跳到标记行头。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>删除标记&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>删除指定标记：&lt;code>:delmarks ...标记字符&lt;/code>&lt;/p>
&lt;ol>
&lt;li>后面可以跟多个标记字符，用不用空格隔开都行。如： &lt;code>:delmarks ab&lt;/code> 删除标记 &lt;code>a&lt;/code> 和 &lt;code>b&lt;/code>。&lt;/li>
&lt;li>还可以删除范围内标记：如： &lt;code>:delmarks a-d&lt;/code> 删除标记 &lt;code>a&lt;/code> 到 &lt;code>d&lt;/code>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>删除所有标记：&lt;code>:delmarks!&lt;/code>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>注意该命令只能删除用户设置的所有本地标记，并且内置的特殊标记、全局标记不能删除。如&lt;code>', &amp;lt;, &amp;gt;&lt;/code>。（我快崩溃了😭）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>上面的三个内置特殊标记，不建议用来做标记。他们具有特殊的含义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>他们是动态生成的内置特殊标记，无法删除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>含义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;lt; # 可表示上次visual模式选择的行头。还可表示标记的行头。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&lt;/span>&amp;gt; &lt;span class="c1"># 可表示上次visual模式选择的末尾的行头。还可以表示标记的行头。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>&amp;lt; &lt;span class="c1"># 可表示上次visual模式选择开始的位置。还可表示标记行鼠标的位置。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">`&lt;/span>&amp;gt; &lt;span class="c1"># 可表示上次visual模式选择的末尾。还可表示标记行鼠标的位置。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">不用他们做标记。通常用在visual模式中，会动态自动生成。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">例子：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:&lt;span class="s1">&amp;#39;&amp;lt;,&amp;#39;&lt;/span>&amp;gt;y 复制上次选择的内容。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:&lt;span class="s1">&amp;#39;&amp;lt;,&amp;#39;&lt;/span>&amp;gt;d 删除上次选择的内容。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="c1"># 跳到光标上次所在的行头。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">配合标记可以实现来回两个标记行头之间跳转
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb">``&lt;/span> &lt;span class="c1"># 跳转到光标上次所在的确切位置（行和列）。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">配合标记可以实现来回两个标记光标确切位置之间跳转
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">意味着：&lt;span class="sb">`&lt;/span> &lt;span class="err">&amp;#39;&lt;/span> 做的标记会随时改变。不用他们做标记，会动态自动生成。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类似命令：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Ctrl-o&lt;/code>：跳转到上一个位置。&lt;/li>
&lt;li>&lt;code>Ctrl-i&lt;/code>：跳转到下一个位置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>全局标记需要指定标记字符才能删除。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Vim 内置的特殊标记是 Vim 自动管理的，用于记录特定的编辑位置和选择范围。这些标记不能手动删除，因为它们是为特定功能设计的，并且在相应操作时会动态更新。用户可以删除自己设置的标记，但不能删除这些内置特殊标记。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="寄存器">寄存器
&lt;/h4>&lt;p>在 Vim 中，寄存器（register）是一个&lt;strong>临时存储位置&lt;/strong>，用于&lt;strong>存储和检索文本、命令、宏等&lt;/strong>。寄存器的使用可以大大提高编辑效率。以下是对寄存器的详细介绍和使用方法：&lt;/p>
&lt;p>&lt;strong>寄存器的分类&lt;/strong>：&lt;/p>
&lt;p>Vim 中有多种类型的寄存器，每种类型都有特定的用途：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>无名寄存器&lt;/strong>（&lt;code>&amp;quot;&lt;/code>）Unnamed Register：
&lt;ul>
&lt;li>默认寄存器，所有的删除（&lt;code>d&lt;/code>）、复制（&lt;code>y&lt;/code>）、粘贴（&lt;code>p&lt;/code>）操作都与此寄存器关联。&lt;strong>缓存最后一次操作内容&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>具名寄存器&lt;/strong>（&lt;code>a&lt;/code> 到 &lt;code>z&lt;/code> 和 &lt;code>A&lt;/code> 到 &lt;code>Z&lt;/code>）Named Register：
&lt;ul>
&lt;li>用于存储用户指定的文本或宏。&lt;/li>
&lt;li>小写字母（&lt;code>a&lt;/code> 到 &lt;code>z&lt;/code>）：&lt;strong>覆盖存储&lt;/strong>。&lt;/li>
&lt;li>大写字母（&lt;code>A&lt;/code> 到 &lt;code>Z&lt;/code>）：&lt;strong>追加存储&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>剪贴板寄存器&lt;/strong>（&lt;code>*&lt;/code> 或 &lt;code>+&lt;/code>）selection and drop：
&lt;ul>
&lt;li>用于与系统剪贴板交互。二者可以画等号，区别：&lt;/li>
&lt;li>&lt;code>*&lt;/code>：与选择剪贴板（primary selection）交互（在 X Window 系统中）。&lt;/li>
&lt;li>&lt;code>+&lt;/code>：与系统剪贴板（clipboard）交互。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>数字寄存器&lt;/strong>（&lt;code>0&lt;/code> 到 &lt;code>9&lt;/code>）numbered：
&lt;ul>
&lt;li>自动存储最近的删除文本。&lt;/li>
&lt;li>&lt;code>0&lt;/code>：最近的复制（&lt;code>yank&lt;/code>）操作。&lt;/li>
&lt;li>&lt;code>1&lt;/code> 到 &lt;code>9&lt;/code>：最近的删除（&lt;code>delete&lt;/code>）操作，&lt;code>1&lt;/code> 是最新的，&lt;code>9&lt;/code> 是最旧的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>读取（命令）寄存器&lt;/strong>（&lt;code>:&lt;/code>）：
&lt;ul>
&lt;li>存储最近的命令行输入。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>搜索寄存器&lt;/strong>（&lt;code>/&lt;/code>）last search pattern：
&lt;ul>
&lt;li>存储最近的搜索模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>小删除寄存器&lt;/strong>（&lt;code>-&lt;/code>）small delete：
&lt;ul>
&lt;li>用于存储小于一行的删除操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>黑洞寄存器&lt;/strong>（&lt;code>_&lt;/code>）black hole：
&lt;ul>
&lt;li>丢弃写入其中的任何内容，不对其进行存储。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>表达式寄存器&lt;/strong>（&lt;code>=&lt;/code>）expression：
&lt;ul>
&lt;li>允许你输入数学运算进行计算。&lt;/li>
&lt;li>只能在Insert和Command模式使用，且部分版本不支持。&lt;/li>
&lt;li>如：insert模式下：&lt;code>ctrl-r =2+2 enter&lt;/code>结果为4。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>只读寄存器&lt;/strong>read only：
&lt;ul>
&lt;li>命令寄存器&lt;code>:&lt;/code>&lt;/li>
&lt;li>点寄存器&lt;code>.&lt;/code>：上次insert模式插入的文本内容。&lt;/li>
&lt;li>搜索寄存器&lt;code>/&lt;/code>&lt;/li>
&lt;li>当前文件名寄存器&lt;code>%&lt;/code>&lt;/li>
&lt;li>上一个文件名寄存器&lt;code>#&lt;/code>&lt;/li>
&lt;li>这些寄存器都只能读。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>使用寄存器&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>查看寄存器内容&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>:reg&lt;/code> 或 &lt;code>:registers&lt;/code>&lt;/strong>：查看所有寄存器的内容。
&lt;ul>
&lt;li>例子：输入 &lt;code>:reg&lt;/code> 查看所有寄存器的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>&lt;code>:reg {register}&lt;/code>&lt;/strong>：查看指定寄存器的内容。
&lt;ul>
&lt;li>寄存器可以有多个，用不用空格隔开都行。&lt;code>:reg 01 2&lt;/code>查看寄存器0, 1, 2的内容。&lt;/li>
&lt;li>例子：输入 &lt;code>:reg a&lt;/code> 查看寄存器 &lt;code>a&lt;/code> 的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>引用寄存器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>在Nomal模式下寄存器可以通过&lt;strong>在名字前加双引号来引用&lt;/strong>。例如，我们可以通过 &lt;code>&amp;quot;a&lt;/code> 来访问在 &lt;code>a&lt;/code> 寄存器中的内容。&lt;/li>
&lt;li>在Command或Insert模式下寄存器可以通过&lt;code>ctrl-r 名字&lt;/code>来引用。
&lt;ul>
&lt;li>注意在这两个模式下引用的寄存器会&lt;strong>立即输出其存储的内容&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>复制到寄存器&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}y{motion}&lt;/code>：复制文本到指定寄存器。
&lt;ul>
&lt;li>例子：输入 &lt;code>&amp;quot;ayiw&lt;/code> 将当前单词复制到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>粘贴寄存器内容&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}p&lt;/code> 或 &lt;code>&amp;quot;{register}P&lt;/code>：粘贴寄存器内容。
&lt;ul>
&lt;li>&lt;code>p&lt;/code> 在光标后粘贴，&lt;code>P&lt;/code> 在光标前粘贴。&lt;/li>
&lt;li>例子：输入 &lt;code>&amp;quot;ap&lt;/code> 将寄存器 &lt;code>a&lt;/code> 的内容粘贴到光标后。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>删除到寄存器&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;quot;{register}d{motion}&lt;/code>：删除文本并存储到指定寄存器。
&lt;ul>
&lt;li>例子：输入 &lt;code>&amp;quot;adiw&lt;/code> 删除当前单词并将其存储到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="#%e5%ae%8f%e5%bd%95%e5%88%b6" >录制宏&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>注意事项：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>无名寄存器：是默认的寄存器。d、c、s、x，y，p这些操作的文本，都在&lt;code>&amp;quot;&amp;quot;&lt;/code>无名寄存器中（&lt;strong>存储最后一次操作内容&lt;/strong>）。除非修改默认寄存器。&lt;/p>
&lt;ol>
&lt;li>意味着删除的可以使用p命令粘贴，因为默认从无名寄存器取值。&lt;/li>
&lt;li>默认寄存器如果是无名寄存器，p粘贴命令不能粘贴剪切板内容。要引用剪切板寄存器&lt;code>*&lt;/code>或&lt;code>+&lt;/code>才能粘贴。&lt;/li>
&lt;li>自然在vim中复制、删除的也就不能进剪切板。需要指定剪切板寄存器。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>数字寄存器：用于存储最近复制、删除的内容，删除的要以行为单位才会存储，否则删除的存储到&lt;code>-&lt;/code>寄存器。复制的不影响。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>复制用0存储。复制的只有0和无名寄存器存储。后者很快失效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除用1-9存储。数字越大，删除的时间越久。&lt;/p>
&lt;ul>
&lt;li>意味着指定寄存器，可以访问删除的内容:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;2p # 粘贴第二条删除的内容。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>数字寄存器不可以被自定义的具名也就是字母寄存器替代。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>具名也就是字母寄存器存在的意义是固化需要频繁剪切的内容，不会因为操作频繁被覆盖。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>我们一般操作具名寄存器：复制，粘贴，删除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器只可以覆盖，不可以删除，由vim自身管理生命周期。不是永久存在。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可跨文件使用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>寄存器的意义&lt;/strong>：&lt;/p>
&lt;p>首先，寄存器是可以&lt;strong>跨文本文件使用&lt;/strong>的，只有&lt;strong>有删除动作都会自动记录到1-9数字寄存器&lt;/strong>，&lt;strong>0存储复制动作&lt;/strong>，而这些寄存器是动态的，会变化的，如果操作动作很多，有一些操作是需要频繁使用的，那么，使用&lt;strong>自定义具名寄存器会大大的提高我们的效率&lt;/strong>，因为字母寄存器是不会改变的，除非你删除了这个寄存器。&lt;/p>
&lt;p>再次，我们如果有某些文件误修改了，或者有非法入侵，如果恶意闯入者没有删除所有寄存器的内容，我们有可能追踪到它的修改轨迹。&lt;/p>
&lt;p>最后，多说一句，寄存器的生命周期是很长的，即使服务器重启什么的，只要能正常进入系统，寄存器里的内容都是一直存在的。&lt;/p>
&lt;/blockquote>
&lt;p>Vim 的寄存器功能强大而灵活，通过熟练掌握寄存器的使用，可以极大地提升编辑效率。寄存器不仅可以用于基本的复制和粘贴，还可以存储宏、命令等，更好地管理和重用编辑内容。&lt;/p>
&lt;h4 id="宏录制">宏录制
&lt;/h4>&lt;p>在 Vim 中，宏是一组记录的&lt;strong>按键序列&lt;/strong>，可以重复执行以自动化重复性的任务。以下是使用宏的详细步骤和相关命令：&lt;/p>
&lt;p>&lt;strong>宏录制&lt;/strong>其实就是记录宏到&lt;a class="link" href="#%e5%af%84%e5%ad%98%e5%99%a8" >寄存器&lt;/a>（都是在&lt;strong>普通模式&lt;/strong>下开始、结束）：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>&lt;code>q{register}&lt;/code>&lt;/strong>：在Normal模式下，开始录制宏到指定寄存器。&lt;/p>
&lt;ul>
&lt;li>例子：按 &lt;code>qa&lt;/code> 开始录制宏到寄存器 &lt;code>a&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>开始录制之后可以任意执行vim命令。进行你希望录制的所有按键操作。Vim 会记录这些按键。&lt;/p>
&lt;ul>
&lt;li>例子：输入一系列编辑命令，如插入文本、删除文本、移动光标等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>q&lt;/code>&lt;/strong>：结束录制宏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>@{register}&lt;/code>&lt;/strong>：执行存储在寄存器中的宏。&lt;/p>
&lt;ul>
&lt;li>例子：按 &lt;code>@a&lt;/code> 执行寄存器 &lt;code>a&lt;/code> 中的宏。&lt;/li>
&lt;li>（ideavim目前不支持执行宏）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>@@&lt;/code>&lt;/strong>：重复执行上一次执行的宏。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多次执行宏：&lt;/p>
&lt;ul>
&lt;li>操作：在普通模式下，输入一个数字，然后按 &lt;code>@&lt;/code> 和寄存器字母键。
&lt;ul>
&lt;li>&lt;code>10@@&lt;/code>执行10上次执行的宏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>例子：按 &lt;code>10@a&lt;/code> 将宏 &lt;code>a&lt;/code> 执行 10 次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>编辑和查看宏&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>查看宏内容&lt;/strong>：
&lt;ul>
&lt;li>操作：在普通模式下，输入 &lt;code>:reg&lt;/code> 查看所有寄存器的内容，包括宏。&lt;/li>
&lt;li>例子：输入 &lt;code>:reg a&lt;/code> 查看寄存器 &lt;code>a&lt;/code> 的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>编辑宏内容&lt;/strong>：
&lt;ul>
&lt;li>操作：将宏内容复制到一个缓冲区进行编辑，然后将其粘贴回寄存器。&lt;/li>
&lt;li>例子：
&lt;ol>
&lt;li>输入 &lt;code>:let @a='your edited macro'&lt;/code>，将 &lt;code>'your edited macro'&lt;/code> 替换为编辑后的宏内容。&lt;/li>
&lt;li>或者，先用 &lt;code>:put a&lt;/code> 将寄存器内容粘贴到缓冲区，编辑后用 &lt;code>:let @a=join(getline(1, &amp;quot;$&amp;quot;), &amp;quot;\n&amp;quot;)&lt;/code> 保存修改。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>实例1&lt;/strong>：&lt;/p>
&lt;p>假设你想录制一个宏，用于在每行的末尾添加一个分号：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>开始录制&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>qa&lt;/code> 开始录制宏到寄存器 &lt;code>a&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>进行操作&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>$&lt;/code> 移动到行尾。&lt;/li>
&lt;li>按 &lt;code>a;&lt;/code> 在行尾插入分号。&lt;/li>
&lt;li>按 &lt;code>Esc&lt;/code> 退出插入模式。&lt;/li>
&lt;li>按 &lt;code>j&lt;/code> 移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>结束录制&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>q&lt;/code> 结束宏录制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>执行宏&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>@a&lt;/code> 执行宏，在当前行末尾添加分号并移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>多次执行宏&lt;/strong>：
&lt;ul>
&lt;li>按 &lt;code>10@a&lt;/code> 执行宏 10 次，每次在行末尾添加分号并移动到下一行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>ctrl-a&lt;/code>会对光标所在数字加1.&lt;/p>
&lt;p>示例2：&lt;/p>
&lt;p>在一个只有一行且这一行只有“1”的文本中，键入如下命令：&lt;/p>
&lt;p>&lt;code>qaYp&amp;lt;C-a&amp;gt;q&lt;/code>&lt;/p>
&lt;p>解释：&lt;/p>
&lt;ul>
&lt;li>&lt;code>qa&lt;/code> 开始录制。&lt;/li>
&lt;li>&lt;code>Yp&lt;/code> 复制行并粘贴。&lt;/li>
&lt;li>&lt;code>&amp;lt;C-a&amp;gt;&lt;/code> 增加1。&lt;/li>
&lt;li>&lt;code>q&lt;/code> 停止录制。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>@a&lt;/code> → 在1下面写下 2&lt;/p>
&lt;p>&lt;code>@@&lt;/code> → 在2 正面写下3&lt;/p>
&lt;p>现在做 &lt;code>100@@&lt;/code> 会创建新的100行，并把数据增加到 103.&lt;/p>
&lt;p>通过使用宏，你可以在 Vim 中有效地自动化重复性任务，提高编辑效率。录制、执行和编辑宏的灵活性使得它们成为强大的工具，适用于各种编辑场景。&lt;/p>
&lt;h4 id="分屏">分屏
&lt;/h4>&lt;p>在 Vim 中，分屏（split screen）功能非常强大，允许你在同一个 Vim 会话中同时查看和编辑多个文件或同一个文件的不同部分。以下是 Vim 分屏操作的详细介绍：&lt;/p>
&lt;p>&lt;strong>分类&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>水平分屏：命令：&lt;code>:sp [file]&lt;/code>or&lt;code>:split [file]&lt;/code>：
&lt;ul>
&lt;li>指定文件水平分屏，没有指定为当前文件。&lt;/li>
&lt;li>快捷键：&lt;code>ctrl+w s&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>垂直分屏：命令：&lt;code>:vsp [file]&lt;/code>or &lt;code>:vsplit [file]&lt;/code> ：
&lt;ul>
&lt;li>指定文件重置分屏，没有指定默认为当前文件。&lt;/li>
&lt;li>快捷键：&lt;code>ctrl+w v&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>操作（最后一个快捷键可以分开按）：&lt;/p>
&lt;ul>
&lt;li>分屏窗口跟普通窗口一模一样，可以执行vim的所有的命令。
&lt;ul>
&lt;li>分屏的窗口还可以继续分屏。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>切换到其他窗口&lt;/strong>
&lt;ul>
&lt;li>&lt;code>ctrl+w w&lt;/code>不同分屏窗口之间来回切换。&lt;/li>
&lt;li>&lt;code>Ctrl-w h&lt;/code>：切换到左边的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w j&lt;/code>：切换到下面的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w k&lt;/code>：切换到上面的窗口。&lt;/li>
&lt;li>&lt;code>Ctrl-w l&lt;/code>：切换到右边的窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>调整窗口高度&lt;/strong>（部分vim版本不起作用）：
&lt;ul>
&lt;li>&lt;code>Ctrl-w +&lt;/code>：增加当前窗口高度。&lt;/li>
&lt;li>&lt;code>Ctrl-w -&lt;/code>：减少当前窗口高度。&lt;/li>
&lt;li>&lt;code>Ctrl-w =&lt;/code>：使所有窗口等高。&lt;/li>
&lt;li>&lt;code>ctrl-w _&lt;/code>：最大化当前水平窗口。&lt;/li>
&lt;li>&lt;code>ctrl-w |&lt;/code>：最大化当前垂直窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>调整窗口宽度&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl-w &amp;gt;&lt;/code>：增加当前窗口宽度。&lt;/li>
&lt;li>&lt;code>Ctrl-w &amp;lt;&lt;/code>：减少当前窗口宽度。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关闭当前窗口&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:q&lt;/code> 或 &lt;code>:quit&lt;/code>：关闭当前窗口。&lt;/li>
&lt;li>&lt;strong>快捷键&lt;/strong>：&lt;code>Ctrl-w c&lt;/code> 或 &lt;code>Ctrl-w q&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>关闭其他窗口&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:only&lt;/code>：关闭除了当前窗口之外的所有窗口。&lt;/li>
&lt;li>&lt;strong>快捷键&lt;/strong>：&lt;code>Ctrl-w o&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>交换窗口位置&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>Ctrl-w r&lt;/code>：旋转窗口布局。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>拆分到标签页&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>:tab split&lt;/code>：在新标签页中水平分屏当前文件。&lt;/li>
&lt;li>&lt;code>:tab vsplit&lt;/code>：在新标签页中垂直分屏当前文件。&lt;/li>
&lt;li>我测试二者效果一样，就是将指定文件，默认当前文件拆分到标签页中。跟浏览器标签页类似。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>vim打开多个文件，默认不会分屏，是以多窗口的方式打开，可以使用&lt;code>bn, bp&lt;/code>切换。
&lt;ul>
&lt;li>&lt;code>-o[n]&lt;/code>选项:指定打开的分屏窗口数量，默认n为1个，默认水平分屏。
&lt;ul>
&lt;li>可以不用指定n，根据后面的文件数来确定分屏。&lt;/li>
&lt;li>如果n与文件数不等，n有几个就分几屏，多出的文件到分别一个完整的窗口中。&lt;/li>
&lt;li>&lt;code>-O&lt;/code>垂直分屏。后面有几个文件，就几个垂直分屏。（n与文件数相等的情况）。不等分屏数由n决定，多的文件分别单独一个窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="结束语">结束语
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>上面是作者最常用的90%的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我建议你每天都学1到2个新的命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在两到三周后，你会感到vim的强大的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有时候，学习VIM就像是在死背一些东西。&lt;/p>
&lt;ul>
&lt;li>官方建议：要在使用中学习，而不是在记忆中学习。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>幸运的是，vim有很多很不错的工具和优秀的文档。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行vimtutor直到你熟悉了那些基本命令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其实在线帮助文档中你应该要仔细阅读的是 &lt;code>:help usr_02.txt&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你会学习到诸如 &lt;code>!，&lt;/code> 目录，寄存器，插件等很多其它的功能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>学习vim就像学弹钢琴一样，一旦学会，受益无穷。&lt;/p>
&lt;div align="center" style='color:red'>
——————————正文结束——————————
&lt;/div>
&lt;h2 id="扩展">扩展
&lt;/h2>&lt;p>更多内容参考&lt;a class="link" href="https://arlettebrook.github.io/p/vim-introduction/" target="_blank" rel="noopener"
>vim-introduction&lt;/a>。&lt;/p>
&lt;h3 id="目录操作">目录操作
&lt;/h3>&lt;p>Vim 自带的 &lt;code>netrw&lt;/code> 插件提供了文件浏览器功能，可以用来&lt;strong>浏览、操作目录和文件&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>打开目录浏览&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Explore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Ex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>会关闭当前文件。&lt;/li>
&lt;li>用vim移动命令移动，回车打开文件或命令。&lt;/li>
&lt;li>&lt;code>:q&lt;/code>退出浏览。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在垂直分屏窗口中打开目录浏览器&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Vexplore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Vex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>分屏命令都可以用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在水平分屏窗口中打开目录浏览器&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">:Sexplore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Sex &lt;span class="c1"># 简写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>浏览指定目录&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">:Explore /path/to/directory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:Vex /path/to/directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>部分vim版本不带该目录浏览插件。&lt;/p>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;blockquote>
&lt;ol>
&lt;li>原文地址&lt;a class="link" href="https://blog.csdn.net/niushuai666/article/details/7275406" target="_blank" rel="noopener"
>Vim简明教程【CoolShell】&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.51cto.com/u_15966109/6082781" target="_blank" rel="noopener"
>vim的寄存器详解&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://segmentfault.com/a/1190000038477576" target="_blank" rel="noopener"
>(译)Vim 寄存器：由浅入深&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Linux Common Commands</title><link>https://arlettebrook.github.io/p/linux-common-commands/</link><pubDate>Wed, 08 May 2024 19:24:26 +0800</pubDate><guid>https://arlettebrook.github.io/p/linux-common-commands/</guid><description>&lt;hr>
&lt;blockquote>
&lt;p>Linux常用命令有很多，本文不会逐个介绍。以下命令是我在后期使用中遇到的，算是我对Linux常用命令的补充、回顾、总结。本篇文章阅读需要一定的Linux基础。更多常见命令可参考：&lt;a class="link" href="https://wiki.deepin.org/zh/04_%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98FAQ/600%E6%9D%A1Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93" target="_blank" rel="noopener"
>600条Linux命令总结&lt;/a>。&lt;/p>
&lt;p>&lt;strong>持续更新中&amp;hellip;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="ln">ln
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>ln&lt;/code>命令在Linux系统中用于&lt;strong>创建文件链接&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>Linux中文件链接的方式有两种：
&lt;ul>
&lt;li>&lt;strong>符号链接&lt;/strong>（也称为软链接Symbolic Link）：包含了到原文件的路径信息，相当于一个指向原文件的&lt;strong>快捷方式&lt;/strong>。
&lt;ul>
&lt;li>符号链接有自己的文件属性及权限等。&lt;/li>
&lt;li>可对不存在的文件或目录创建符号链接。&lt;/li>
&lt;li>符号链接可交叉文件系统，即可以在不同的文件系统之间创建。&lt;/li>
&lt;li>删除符号链接并不影响被指向的文件，但若被指向的原文件被删除，则相关符号链接被称为死链接（dangling link）。若被指向的文件重新被创建，死链接可恢复为正常的符号链接。&lt;/li>
&lt;li>符号链接文件的大小是其指向的文件的路径字符串的字节数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>硬链接&lt;/strong>：硬链接本质上是给一个文件取一个新的名称，原文件和硬链接在物理上仍然是同一个文件。它们共享相同的inode（索引节点）和数据块。
&lt;ul>
&lt;li>创建硬链接会在对应的目录中增加额外的记录项以引用文件。&lt;/li>
&lt;li>原文件和硬链接文件对应于同一文件系统上的一个物理文件。&lt;/li>
&lt;li>创建硬链接时原文件的连接数（i_nlink）会递增。即&lt;strong>硬链接数&lt;/strong>递增。&lt;/li>
&lt;li>删除文件时，&lt;code>rm&lt;/code>命令会递减计数的链接数。文件要是存在，至少有一个链接数。当链接数为零时，该文件才会被真正删除。&lt;/li>
&lt;li>硬链接不能跨域驱动器或分区，也不支持对目录创建硬链接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>总结来说，符号链接（软链接）和硬链接的主要区别在于：
&lt;ul>
&lt;li>符号链接是一个独立的文件，它包含了到原文件的路径信息（&lt;strong>快捷方式&lt;/strong>）；而硬链接则与原文件共享相同的inode和数据块（&lt;strong>文件别名&lt;/strong>）。&lt;/li>
&lt;li>符号链接可以&lt;strong>跨文件系统&lt;/strong>，并且可以对不存在的文件或目录创建；而硬链接则&lt;strong>不能跨域驱动器或分区&lt;/strong>，&lt;strong>也不能对目录创建&lt;/strong>。&lt;/li>
&lt;li>删除符号链接不影响原文件，但删除原文件会使符号链接成为死链接；而删除硬链接文件时，只有当所有硬链接都被删除且原文件的链接数为零时，文件才会被真正删除。即硬链接数为0，文件才真正被删除。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>这个命令允许你在不同的位置为同一个文件或目录建立同步的链接，从而避免了在多个位置重复存储相同的文件内容，&lt;strong>节省了磁盘空间&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>ln&lt;/code>命令的基本语法如下&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ln &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &amp;lt;源文件或目录&amp;gt; &amp;lt;链接文件或目录&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>常用选项包括：
&lt;ul>
&lt;li>&lt;code>-s&lt;/code>：创建符号链接（软链接）。这会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，而是保存了原始文件的路径。（创建快捷方式）
&lt;ul>
&lt;li>&lt;strong>不使用&lt;code>-s&lt;/code>选项时创建硬链接&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-f&lt;/code>：强制执行，如果链接文件已存在则覆盖。&lt;/li>
&lt;li>&lt;code>-v&lt;/code>：显示详细的输出信息。&lt;/li>
&lt;li>&lt;code>--help&lt;/code>：查看帮助文档。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>理解记忆：ln可以理解为link的缩写，s可以理解为soft软的意思。&lt;/li>
&lt;li>注意：源文件一般用绝对路径，相对会出现死链接情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>简单介绍一些&lt;code>ls -lh&lt;/code>输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">2&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:15 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># l显示详细信息，h文件大小用人类可读懂的方式显示。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw- r-- r--
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-开头表示文件，d表示目录，l表示链接，三位为一组用rwx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx r-x r-x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">当前用户权限 用户所属组权限 其他用户权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">数字1表示硬链接数，理解为别名，别名为0，文件才会被删除。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有多少种方式可以访问该文件或目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 文件一般为1：绝对路径
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 目录只有一层一般为2&lt;span class="o">(&lt;/span>不包含子目录）：绝对和cd ..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：拥有者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root ：所在组，没指定默认同名。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5月 &lt;span class="m">8&lt;/span> 22:49 文件最后修改日期时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">最后：文件或目录名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">有箭头表示软连接，没有硬链接。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>演示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">1&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">2&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -sv ~/test/abc.txt ./demo/soft
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/soft’ -&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ln -v ~/test/abc.txt ./demo/hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">‘./demo/hard’ &lt;span class="o">=&lt;/span>&amp;gt; ‘/root/test/abc.txt’
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x. &lt;span class="m">3&lt;/span> root root &lt;span class="m">42&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost &lt;span class="nb">test&lt;/span> $ &lt;span class="nb">cd&lt;/span> demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">localhost demo $ ls -lh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total 20K
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r--. &lt;span class="m">2&lt;/span> root root 19K May &lt;span class="m">8&lt;/span> 22:49 hard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lrwxrwxrwx. &lt;span class="m">1&lt;/span> root root &lt;span class="m">18&lt;/span> May &lt;span class="m">8&lt;/span> 23:46 soft -&amp;gt; /root/test/abc.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：&lt;/p>
&lt;ul>
&lt;li>测试环境是在Linux中，&lt;code>ln&lt;/code>命令并不适用于windows环境。创建的文件链接无效。&lt;/li>
&lt;li>&lt;strong>目录只能创建软链接，不能创建硬链接&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>文件两种链接都可以创建&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="curl">curl
&lt;/h2>&lt;p>&lt;code>curl&lt;/code>命令是一个利用URL规则在命令行下工作的文件传输工具，它支持文件的上传和下载，因此被视为综合传输工具，但传统上习惯称其为下载工具。curl支持包括HTTP、HTTPS、FTP等众多协议，并具备多种特性，如POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等。这些特性使得curl在处理网页处理流程和数据检索自动化方面非常有用。&lt;/p>
&lt;p>总结：用于发送网络请求，可以下载和上传文件。而&lt;code>wget&lt;/code>只能用于下载文件，但&lt;a class="link" href="#wget" >wget&lt;/a>下载文件的功能比&lt;code>curl&lt;/code>强大。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>linux系统：根据你的Linux发行版，使用相应的包管理器来安装curl。
&lt;ul>
&lt;li>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install curl&lt;/code>&lt;/li>
&lt;li>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install curl&lt;/code>&lt;/li>
&lt;li>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S curl&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>windows系统：
&lt;ol>
&lt;li>&lt;a class="link" href="https://curl.se/download.html" target="_blank" rel="noopener"
>官网&lt;/a>下载对应版本，添加一个CURL_HOME环境变量名，指向的是curl.exe文件所在路径。并将其添加到path环境变量中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。【推荐】：&lt;code>sudo pacman -S curl&lt;/code>&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.mingw-w64.org/downloads/#mingw-builds" target="_blank" rel="noopener"
>Mingw&lt;/a>自带curl，Mingw也可以用msys2来安装。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>MacOS系统自带。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>基本使用&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>curl命令的基本语法格式为：&lt;code>curl [选项] URL&lt;/code>。其中，URL是要请求的目标地址，而选项则用于指定各种参数和功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-X&lt;/code> 或 &lt;code>--request&lt;/code>：用于指定HTTP请求方法，如GET、POST、PUT、DELETE等。&lt;/p>
&lt;ul>
&lt;li>默认发送get请求。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -X POST http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-H&lt;/code> 或 &lt;code>--header&lt;/code>: 添加自定义的 HTTP 头信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-d&lt;/code> 或 &lt;code>--data&lt;/code>: 发送 POST 请求时，将数据作为请求体发送。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-SHELL" data-lang="SHELL">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s2">&amp;#34;param1=value1&amp;amp;param2=value2&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 JSON 数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -d &lt;span class="s1">&amp;#39;{&amp;#34;key1&amp;#34;:&amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;value2&amp;#34;}&amp;#39;&lt;/span> -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-F&lt;/code> 或 &lt;code>--form&lt;/code>: 用于发送 multipart/form-data 格式的数据，通常用于文件上传。&lt;/p>
&lt;ul>
&lt;li>参数&lt;code>&amp;quot;文件名=@path&amp;quot;&lt;/code>,还可以指定类型&lt;code>&amp;quot;文件名=@path;type=MIME&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -F &lt;span class="s2">&amp;#34;file=@filename.txt&amp;#34;&lt;/span> http://example.com/upload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-o&lt;/code> 或 &lt;code>--output&lt;/code>: 将响应输出到文件，而不是显示在终端上。默认当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -o output.html http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>-O&lt;/code>: 将响应保存到本地文件，文件名与远程文件的文件名相同。在当前目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -O http://example.com/file.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-s&lt;/code> 或 &lt;code>--silent&lt;/code>: 静默模式，不显示进度或错误消息。常用S组合使用，显示错误消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v&lt;/code> 或 &lt;code>--verbose&lt;/code>: 详细模式，显示详细的通信过程，包括请求头和响应头。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i&lt;/code>: 显示响应头信息以及返回的内容 body。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-I&lt;/code>: 只显示响应头信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-u&lt;/code> 用户名:密码: 指定用户名和密码进行身份验证。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -u username:password http://example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>-L&lt;/code>: 跟随重定向。当 HTTP 响应是一个重定向时，curl 会自动获取重定向后的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-k&lt;/code> 或 &lt;code>--insecure&lt;/code>: 允许连接到不安全的 SSL 站点，即忽略 SSL 证书验证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>常用组合：&lt;code>curl -fsSL&lt;/code>，默认get请求。&lt;/p>
&lt;ul>
&lt;li>f不显示客户端错误。&lt;/li>
&lt;li>s不显示进度、错误消息。配合S显示错误消息&lt;/li>
&lt;li>L接受重定向。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="wget">wget
&lt;/h2>&lt;p>&lt;code>wget&lt;/code> 是一个在 Unix 和 Linux 系统上常用的命令行工具，用于从网络上下载文件。&lt;/p>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>支持断点续传：如果下载过程中连接中断，可以在之后从断点处继续下载。&lt;/li>
&lt;li>支持递归下载：可以下载网页上的所有链接文件，并重建目录结构。&lt;/li>
&lt;li>强大的重试机制：在下载过程中如果网络出现问题，&lt;code>wget&lt;/code> 会自动重试，直到下载完成。&lt;/li>
&lt;li>后台执行：支持在后台运行下载任务，用户无需保持登录状态。&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="#curl" >curl&lt;/a>没有以上优点，但它支持更多的协议。wget只支持HTTP、HTTPS和FTP协议。curl使用更广泛。&lt;/p>
&lt;p>安装：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>linux系统：根据你的Linux发行版，使用相应的包管理器来安装wget。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于Debian/Ubuntu系统，使用apt-get命令安装：&lt;code>sudo apt install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于CentOS/Fedora系统，使用yum命令安装：&lt;code>sudo yum install wget&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Arch Linux系统，使用pacman命令安装：&lt;code>sudo pacman -S wget&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>windows系统：&lt;/p>
&lt;ul>
&lt;li>官网&lt;a class="link" href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener"
>GNU Wget&lt;/a>下载安装或其他可靠的软件下载，然后路径添加到环境变量path中。&lt;/li>
&lt;li>或者安装&lt;a class="link" href="https://www.msys2.org/" target="_blank" rel="noopener"
>msys2&lt;/a>利用pacman包管理器安装。【推荐】：&lt;code>sudo pacman -S wget&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>macos系统：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于macOS，使用&lt;a class="link" href="https://github.com/Homebrew/brew" target="_blank" rel="noopener"
>Homebrew&lt;/a>包管理器来安装wget。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">brew&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="nx">wget&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>基本使用&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>-b, &amp;ndash;background&lt;/strong>：在后台执行下载任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-c, &amp;ndash;continue&lt;/strong>：继续下载之前未完成的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-r, &amp;ndash;recursive&lt;/strong>：递归下载，下载指定 URL 中的所有链接。可以下载整个目录及其子目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -r http://www.example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：在使用递归下载时，建议加上 &lt;code>-np&lt;/code> 和 &lt;code>-nH&lt;/code> 选项，以避免下载过多的不必要文件和创建复杂的目录结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-np, &amp;ndash;no-parent&lt;/strong>：不递归下载上级目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nH, &amp;ndash;no-host-directories&lt;/strong>：不创建主机目录，将文件保存在当前目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-P DIRECTORY, &amp;ndash;directory-prefix=DIRECTORY&lt;/strong>：将下载的文件保存到指定的目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -P /tmp http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-O FILE, &amp;ndash;output-document=FILE&lt;/strong>：将下载的文件保存为指定的文件名。如果存在会覆盖。&lt;code>-N&lt;/code>（时间戳检查），如果旧会覆盖，反之不会。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">wget -O new_file.zip http://www.example.com/file.zip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nc, &amp;ndash;no-clobber&lt;/strong>：如果文件已经存在，不覆盖原有文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-nv, &amp;ndash;no-verbose&lt;/strong>：下载时只显示更新和出错信息，不显示详细的执行过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-v, &amp;ndash;verbose&lt;/strong>：详细模式，增加输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-q, &amp;ndash;quiet&lt;/strong>：静默模式，减少输出信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&amp;ndash;no-check-certificate&lt;/strong>：下载 HTTPS 网站资源时，跳过证书检测过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-t NUM 或 &amp;ndash;tries=NUM&lt;/strong>：指定最大尝试次数。如果下载失败，wget 会尝试重新下载指定的次数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-U AGENT 或 &amp;ndash;user-agent=AGENT&lt;/strong>：指定 User-Agent 字符串。这可以用来伪装为不同的浏览器或客户端。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-N 或 &amp;ndash;timestamping&lt;/strong>：如果本地文件存在且时间戳较新，则不重新下载文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-T SEC 或 &amp;ndash;timeout=SEC&lt;/strong>：指定超时时间（以秒为单位）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-A TYPES 或 &amp;ndash;accept=TYPES&lt;/strong>：指定下载文件的类型。例如，&lt;code>-A jpg,png,gif&lt;/code> 表示只下载 jpg、png 和 gif 文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-d 或 &amp;ndash;debug&lt;/strong>：打印调试输出。这会在标准错误上输出大量信息，通常用于诊断问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>常用组合：&lt;/p>
&lt;p>&lt;code>wget -O-&lt;/code>:O表示指定文件名，后面-表示没有指定文件名，内容将输出到TTY。&lt;/p>
&lt;p>通常配合&lt;code>bash -c &amp;quot;$(wget -O- url)&amp;quot;&lt;/code>运行脚本。url为脚本地址。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>其中$()表示在当前TTY中运行子命令，下载脚本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[bash -c](#bash -c)表示将下载的字符串做为命令执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="bash--c">bash -c
&lt;/h2>&lt;p>&lt;code>bash -c&lt;/code> 命令用于在 Bash shell 中执行一个字符串作为命令。&lt;/p>
&lt;p>&lt;strong>基本语法&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">bash -c &lt;span class="s1">&amp;#39;command_string&amp;#39;&lt;/span> &lt;span class="o">[&lt;/span>arg0 &lt;span class="o">[&lt;/span>arg1 ...&lt;span class="o">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>command_string&lt;/code> 是你想要执行的命令字符串。&lt;/li>
&lt;li>&lt;code>arg0&lt;/code>、&lt;code>arg1&lt;/code> 等是可选的，它们会被用作 &lt;code>$0&lt;/code>、&lt;code>$1&lt;/code>、&lt;code>$2&lt;/code> 等 shell 变量在 &lt;code>command_string&lt;/code> 内部。
&lt;ul>
&lt;li>注意这里的$0并不是脚本名或终端名，而是第一个参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>字符串可以用&lt;code>&amp;quot;&amp;quot;/''&lt;/code>，区别在于双引号会转义特殊字符，单引号不会。执行脚本时建议双引号。&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo Hello, World!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello, World!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bash -c &lt;span class="s1">&amp;#39;echo $0 $1&amp;#39;&lt;/span> bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bash -c &amp;#34;$(wget -O- https://gist.githubusercontent.com/lss233/2fdd75be3f0724739368d0dcd9d1367d/raw/62a790da4a391af096074b3355c2c2b7ecab3c28/chatgpt-mirai-installer-gocqhttp.sh)&amp;#34; chatgpt-qq-bot安装脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="pacman">pacman
&lt;/h2>&lt;p>Pacman是Arch Linux及其衍生发行版（如Manjaro、EndeavourOS等）使用的包管理器。总结它，是因为我们可以在Windows上安装msys2来使用pacman包管理器，进而在Windows上安装Linux命令。&lt;/p>
&lt;p>&lt;strong>基本用法&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo pacman &lt;span class="o">[&lt;/span>选项&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>软件名&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>常用选项&lt;/strong>如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-S&lt;/code>：安装软件包、软件源列表。
&lt;ul>
&lt;li>&lt;code>-y&lt;/code>：刷新软件源列表。&lt;/li>
&lt;li>&lt;code>-u&lt;/code>：更新软件包到最新版。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>以上三个选项可以组合使用。&lt;strong>常用&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>-Syu&lt;/code>：更新软件源列表，并升级已安装的包到最新版。【推荐】*&lt;/li>
&lt;li>&lt;code>-Sy&lt;/code>：更新软件源列表并安装。【推荐】*&lt;/li>
&lt;li>&lt;code>-Su&lt;/code>：只升级已安装的包到最新版。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-S package_name&lt;/code>：&lt;strong>安装软件包&lt;/strong>。多个用空格隔开。【推荐】*&lt;/li>
&lt;li>&lt;code>-R package_name&lt;/code>：卸载软件包（会保留依赖）。
&lt;ul>
&lt;li>&lt;code>-Rs package_name&lt;/code>：&lt;strong>卸载一个软件包及其依赖（未被其他包使用的依赖）&lt;/strong>。&lt;/li>
&lt;li>&lt;code>-Rns package_name&lt;/code>：&lt;strong>卸载一个软件包并删除不再使用的依赖&lt;/strong>。【推荐】*&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-Sc&lt;/code>：清理未使用的包缓存。
&lt;ul>
&lt;li>&lt;code>-Scc&lt;/code>：清理所有包缓存。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-Ss keyword&lt;/code>：搜索包含关键字的软件包。
&lt;ul>
&lt;li>&lt;code>-Si package_name&lt;/code>：显示软件包信息。【推荐】*&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-Q&lt;/code>：列出所有已安装的软件包。
&lt;ul>
&lt;li>&lt;code>-Qs keyword&lt;/code>：列出已安装的包含关键字的软件包。【推荐】&lt;/li>
&lt;li>&lt;code>-Qi package_name&lt;/code>：显示已安装软件包的信息。【推荐】*&lt;/li>
&lt;li>&lt;code>-Ql package_name&lt;/code>：列出软件包中包含的文件。【推荐】&lt;/li>
&lt;li>&lt;code>-Qk&lt;/code>：检查系统中所有已安装包的完整性。
&lt;ul>
&lt;li>&lt;code>-Qkk package_name&lt;/code>：检查指定软件包的完整性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr></description></item></channel></rss>